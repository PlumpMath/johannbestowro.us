/**
 * React v0.9.0
 */
!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      this.getDOMNode().focus();
    }
  }
};

module.exports = AutoFocusMixin;

},{}],2:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  fillOpacity: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],3:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");

var dangerousStyleValue = require("./dangerousStyleValue");
var escapeTextForBrowser = require("./escapeTextForBrowser");
var hyphenate = require("./hyphenate");
var memoizeStringOnly = require("./memoizeStringOnly");

var processStyleName = memoizeStringOnly(function(styleName) {
  return escapeTextForBrowser(hyphenate(styleName));
});

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":2,"./dangerousStyleValue":94,"./escapeTextForBrowser":96,"./hyphenate":107,"./memoizeStringOnly":116}],4:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var isEventSupported = require("./isEventSupported");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactEventTopLevelCallback. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":14,"./EventPluginHub":16,"./EventPropagators":19,"./ExecutionEnvironment":20,"./ReactUpdates":70,"./SyntheticEvent":77,"./isEventSupported":109,"./isTextInputElement":111,"./keyOf":115}],5:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],6:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");

var getTextContentAccessor = require("./getTextContentAccessor");
var keyOf = require("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  'documentMode' in document && document.documentMode > 8
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":14,"./EventPropagators":19,"./ExecutionEnvironment":20,"./ReactInputSelection":52,"./SyntheticCompositionEvent":75,"./getTextContentAccessor":105,"./keyOf":115}],7:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = require("./Danger");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  var childNodes = parentNode.childNodes;
  if (childNodes[index] === childNode) {
    return;
  }
  // If `childNode` is already a child of `parentNode`, remove it so that
  // computing `childNodes[index]` takes into account the removal.
  if (childNode.parentNode === parentNode) {
    parentNode.removeChild(childNode);
  }
  if (index >= childNodes.length) {
    parentNode.appendChild(childNode);
  } else {
    parentNode.insertBefore(childNode, childNodes[index]);
  }
}

/**
 * Sets the text content of `node` to `text`.
 *
 * @param {DOMElement} node Node to change
 * @param {string} text New text content
 */
var updateTextContent;
if (textContentAccessor === 'textContent') {
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":10,"./ReactMultiChildUpdateTypes":58,"./getTextContentAccessor":105}],8:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = require("./invariant");

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName[propName],
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName[propName]));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      var attributeName = DOMAttributeNames[propName];
      if (attributeName) {
        DOMProperty.getPossibleStandardName[attributeName] = propName;
      }

      DOMProperty.getAttributeName[propName] = attributeName || lowerCased;

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames[propName] || propName;

      var mutationMethod = DOMMutationMethods[propName];
      if (mutationMethod) {
        DOMProperty.getMutationMethod[propName] = mutationMethod;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        propConfig & DOMPropertyInjection.MUST_USE_ATTRIBUTE;
      DOMProperty.mustUseProperty[propName] =
        propConfig & DOMPropertyInjection.MUST_USE_PROPERTY;
      DOMProperty.hasSideEffects[propName] =
        propConfig & DOMPropertyInjection.HAS_SIDE_EFFECTS;
      DOMProperty.hasBooleanValue[propName] =
        propConfig & DOMPropertyInjection.HAS_BOOLEAN_VALUE;
      DOMProperty.hasPositiveNumericValue[propName] =
        propConfig & DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE;

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !DOMProperty.hasBooleanValue[propName] ||
          !DOMProperty.hasPositiveNumericValue[propName],
        'DOMProperty: Cannot have both boolean and positive numeric value: %s',
        propName
      ) : invariant(!DOMProperty.hasBooleanValue[propName] ||
        !DOMProperty.hasPositiveNumericValue[propName]));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    return DOMProperty._isCustomAttributeFunctions.some(
      function(isCustomAttributeFn) {
        return isCustomAttributeFn.call(null, attributeName);
      }
    );
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":108}],9:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var memoizeStringOnly = require("./memoizeStringOnly");

function shouldIgnoreValue(name, value) {
  return value == null ||
    DOMProperty.hasBooleanValue[name] && !value ||
    DOMProperty.hasPositiveNumericValue[name] && (isNaN(value) || value < 1);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps[name] || warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ?
      lowerCasedName : DOMProperty.getPossibleStandardName[lowerCasedName];

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    if (standardName != null) {
      console.warn(
        'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
      );
    }

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name]) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        if (!DOMProperty.hasSideEffects[name] || node[propName] !== value) {
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          name
        );
        if (!DOMProperty.hasSideEffects[name] ||
            node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":8,"./escapeTextForBrowser":96,"./memoizeStringOnly":116}],10:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createNodesFromMarkup = require("./createNodesFromMarkup");
var emptyFunction = require("./emptyFunction");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a Worker ' +
      'thread. This is likely a bug in the framework. Please report ' +
      'immediately.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. This is likely a bug in the framework. Please report ' +
      'immediately.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":20,"./createNodesFromMarkup":92,"./emptyFunction":95,"./getMarkupWrap":102,"./invariant":108}],11:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DefaultDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = require("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;

var DefaultDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    className: MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: null,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: null,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrollLeft: MUST_USE_PROPERTY,
    scrollTop: MUST_USE_PROPERTY,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    property: null, // Supports OG in meta tags

    /**
     * SVG Properties
     */
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    className: 'class',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    htmlFor: 'for',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeLinecap: 'stroke-linecap',
    strokeWidth: 'stroke-width',
    viewBox: 'viewBox'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc'
  },
  DOMMutationMethods: {
    /**
     * Setting `className` to null may cause it to be set to the string "null".
     *
     * @param {DOMElement} node
     * @param {*} value
     */
    className: function(node, value) {
      node.className = value || '';
    }
  }
};

module.exports = DefaultDOMPropertyConfig;

},{"./DOMProperty":8}],12:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = require("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":115}],13:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");

var ReactMount = require("./ReactMount");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":14,"./EventPropagators":19,"./ReactMount":55,"./SyntheticMouseEvent":80,"./keyOf":115}],14:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = require("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":114}],15:[function(require,module,exports){
/**
 * @providesModule EventListener
 */

var emptyFunction = require("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent(eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  }
};

module.exports = EventListener;

},{"./emptyFunction":95}],16:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = require("./EventPluginRegistry");
var EventPluginUtils = require("./EventPluginUtils");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var accumulate = require("./accumulate");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'Cannot call putListener() in a non-DOM environment.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    if ("production" !== "development") {
      // IE8 has no API for event capturing and the `onScroll` event doesn't
      // bubble.
      if (registrationName === 'onScroll' &&
          !isEventSupported('scroll', true)) {
        console.warn('This browser doesn\'t support the `onScroll` event');
      }
    }
    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulate(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulate(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":17,"./EventPluginUtils":18,"./ExecutionEnvironment":20,"./accumulate":86,"./forEachAccumulated":98,"./invariant":108,"./isEventSupported":109}],17:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs[eventName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs[eventName]));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than once.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":108}],18:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = require("./EventConstants");

var invariant = require("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":14,"./invariant":108}],19:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");

var accumulate = require("./accumulate");
var forEachAccumulated = require("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulate(event._dispatchListeners, listener);
    event._dispatchIDs = accumulate(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulate(event._dispatchListeners, listener);
      event._dispatchIDs = accumulate(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":14,"./EventPluginHub":16,"./accumulate":86,"./forEachAccumulated":98}],20:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = typeof window !== 'undefined';

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && (window.addEventListener || window.attachEvent),

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],21:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = require("./ReactPropTypes");

var invariant = require("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
      input.props.checkedLink == null || input.props.valueLink == null,
      'Cannot provide a checkedLink and a valueLink. If you want to use ' +
      'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if ("production" !== "development") {
          if (props[propName] &&
              !hasReadOnlyValue[props.type] &&
              !props.onChange &&
              !props.readOnly &&
              !props.disabled) {
            console.warn(
              'You provided a `value` prop to a form field without an ' +
              '`onChange` handler. This will render a read-only field. If ' +
              'the field should be mutable use `defaultValue`. Otherwise, ' +
              'set either `onChange` or `readOnly`.'
            );
          }
        }
      },
      checked: function(props, propName, componentName) {
        if ("production" !== "development") {
          if (props[propName] &&
              !props.onChange &&
              !props.readOnly &&
              !props.disabled) {
            console.warn(
              'You provided a `checked` prop to a form field without an ' +
              '`onChange` handler. This will render a read-only field. If ' +
              'the field should be mutable use `defaultChecked`. Otherwise, ' +
              'set either `onChange` or `readOnly`.'
            );
          }
        }
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":64,"./invariant":108}],22:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");

var emptyFunction = require("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":14,"./emptyFunction":95}],23:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = require("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":108}],24:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var EventPluginUtils = require("./EventPluginUtils");
var ReactChildren = require("./ReactChildren");
var ReactComponent = require("./ReactComponent");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactDOM = require("./ReactDOM");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDefaultInjection = require("./ReactDefaultInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");
var ReactPropTypes = require("./ReactPropTypes");
var ReactServerRendering = require("./ReactServerRendering");
var ReactTextComponent = require("./ReactTextComponent");

var onlyChild = require("./onlyChild");

ReactDefaultInjection.inject();

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  renderComponent: ReactPerf.measure(
    'React',
    'renderComponent',
    ReactMount.renderComponent
  ),
  renderComponentToString: ReactServerRendering.renderComponentToString,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactCompositeComponent.isValidClass,
  isValidComponent: ReactComponent.isValidComponent,
  withContext: ReactContext.withContext,
  __internals: {
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  }
};

if ("production" !== "development") {
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM &&
      window.top === window.self &&
      navigator.userAgent.indexOf('Chrome') > -1) {
    console.debug(
      'Download the React DevTools for a better development experience: ' +
      'http://fb.me/react-devtools'
    );
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.9.0';

module.exports = React;

},{"./DOMPropertyOperations":9,"./EventPluginUtils":18,"./ExecutionEnvironment":20,"./ReactChildren":25,"./ReactComponent":26,"./ReactCompositeComponent":29,"./ReactContext":30,"./ReactCurrentOwner":31,"./ReactDOM":32,"./ReactDOMComponent":34,"./ReactDefaultInjection":44,"./ReactInstanceHandles":53,"./ReactMount":55,"./ReactMultiChild":57,"./ReactPerf":60,"./ReactPropTypes":64,"./ReactServerRendering":68,"./ReactTextComponent":69,"./onlyChild":123}],25:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = require("./PooledClass");

var invariant = require("./invariant");
var traverseAllChildren = require("./traverseAllChildren");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;
  var mappedChild =
    mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
  // We found a component instance
  ("production" !== "development" ? invariant(
    !mapResult.hasOwnProperty(name),
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Children keys must be unique.',
    name
  ) : invariant(!mapResult.hasOwnProperty(name)));
  mapResult[name] = mappedChild;
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren
};

module.exports = ReactChildren;

},{"./PooledClass":23,"./invariant":108,"./traverseAllChildren":128}],26:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactOwner = require("./ReactOwner");
var ReactUpdates = require("./ReactUpdates");

var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var merge = require("./merge");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */

var ownerHasExplicitKeyWarning = {};
var ownerHasPropertyWarning = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 */
function validateExplicitKey(component) {
  if (component.__keyValidated__ || component.props.key != null) {
    return;
  }
  component.__keyValidated__ = true;

  // We can't provide friendly warnings for top level components.
  if (!ReactCurrentOwner.current) {
    return;
  }

  // Name of the component whose render method tried to pass children.
  var currentName = ReactCurrentOwner.current.constructor.displayName;
  if (ownerHasExplicitKeyWarning.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasExplicitKeyWarning[currentName] = true;

  var message = 'Each child in an array should have a unique "key" prop. ' +
                'Check the render method of ' + currentName + '.';
  if (!component.isOwnedBy(ReactCurrentOwner.current)) {
    // Name of the component that originally created this child.
    var childOwnerName =
      component._owner &&
      component._owner.constructor.displayName;

    // Usually the current owner is the offender, but if it accepts
    // children as a property, it may be the creator of the child that's
    // responsible for assigning it a key.
    message += ' It was passed a child from ' + childOwnerName + '.';
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  console.warn(message);
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 */
function validatePropertyKey(name) {
  if (NUMERIC_PROPERTY_REGEX.test(name)) {
    // Name of the component whose render method tried to pass children.
    var currentName = ReactCurrentOwner.current.constructor.displayName;
    if (ownerHasPropertyWarning.hasOwnProperty(currentName)) {
      return;
    }
    ownerHasPropertyWarning[currentName] = true;

    console.warn(
      'Child objects should have non-numeric keys so ordering is preserved. ' +
      'Check the render method of ' + currentName + '. ' +
      'See http://fb.me/react-warning-keys for more information.'
    );
  }
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @return {boolean}
 */
function validateChildKeys(component) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactComponent.isValidComponent(child)) {
        validateExplicitKey(child);
      }
    }
  } else if (ReactComponent.isValidComponent(component)) {
    // This component was passed in a valid location.
    component.__keyValidated__ = true;
  } else if (component && typeof component === 'object') {
    for (var name in component) {
      validatePropertyKey(name, component);
    }
  }
}

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid component.
   * @final
   */
  isValidComponent: function(object) {
    if (!object || !object.type || !object.type.prototype) {
      return false;
    }
    // This is the safer way of duck checking the type of instance this is.
    // The object can be a generic descriptor but the type property refers to
    // the constructor and it's prototype can be used to inspect the type that
    // will actually get mounted.
    var prototype = object.type.prototype;
    return (
      typeof prototype.mountComponentIntoNode === 'function' &&
      typeof prototype.receiveComponent === 'function'
    );
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: ReactComponentEnvironment.BackendIDOperations,

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   *
   * @private
   */
  unmountIDFromEnvironment: ReactComponentEnvironment.unmountIDFromEnvironment,

  /**
   * The "image" of a component tree, is the platform specific (typically
   * serialized) data that represents a tree of lower level UI building blocks.
   * On the web, this "image" is HTML markup which describes a construction of
   * low level `div` and `span` nodes. Other platforms may have different
   * encoding of this "image". This must be injected.
   *
   * @private
   */
  mountImageIntoNode: ReactComponentEnvironment.mountImageIntoNode,

  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction:
    ReactComponentEnvironment.ReactReconcileTransaction,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: merge(ReactComponentEnvironment.Mixin, {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with `_pendingProps` if it exists, otherwise with existing props.
      this.replaceProps(
        merge(this._pendingProps || this.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      this._pendingProps = props;
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {?object} initialProps
     * @param {*} children
     * @internal
     */
    construct: function(initialProps, children) {
      this.props = initialProps || {};
      // Record the component responsible for creating this component.
      this._owner = ReactCurrentOwner.current;
      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      this._pendingProps = null;
      this._pendingCallbacks = null;

      // Unlike _pendingProps and _pendingCallbacks, we won't use null to
      // indicate that nothing is pending because it's possible for a component
      // to have a null owner. Instead, an owner change is pending when
      // this._owner !== this._pendingOwner.
      this._pendingOwner = this._owner;

      // Children can be more than one argument
      var childrenLength = arguments.length - 1;
      if (childrenLength === 1) {
        if ("production" !== "development") {
          validateChildKeys(children);
        }
        this.props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          if ("production" !== "development") {
            validateChildKeys(arguments[i + 1]);
          }
          childArray[i] = arguments[i + 1];
        }
        this.props.children = childArray;
      }
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var props = this.props;
      if (props.ref != null) {
        ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var props = this.props;
      if (props.ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, props.ref, this._owner);
      }
      ReactComponent.unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextComponent, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingOwner = nextComponent._owner;
      this._pendingProps = nextComponent.props;
      this._performUpdateIfNecessary(transaction);
    },

    /**
     * Call `_performUpdateIfNecessary` within a new transaction.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function() {
      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();
      transaction.perform(this._performUpdateIfNecessary, this, transaction);
      ReactComponent.ReactReconcileTransaction.release(transaction);
    },

    /**
     * If `_pendingProps` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    _performUpdateIfNecessary: function(transaction) {
      if (this._pendingProps == null) {
        return;
      }
      var prevProps = this.props;
      var prevOwner = this._owner;
      this.props = this._pendingProps;
      this._owner = this._pendingOwner;
      this._pendingProps = null;
      this.updateComponent(transaction, prevProps, prevOwner);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevProps
     * @internal
     */
    updateComponent: function(transaction, prevProps, prevOwner) {
      var props = this.props;
      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`.
      if (this._owner !== prevOwner || props.ref !== prevProps.ref) {
        if (prevProps.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevProps.ref, prevOwner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (props.ref != null) {
          ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.renderComponent}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactComponent.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      ReactComponent.mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  })
};

module.exports = ReactComponent;

},{"./ReactComponentEnvironment":28,"./ReactCurrentOwner":31,"./ReactOwner":59,"./ReactUpdates":70,"./invariant":108,"./keyMirror":114,"./merge":117}],27:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");

var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var invariant = require("./invariant");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  /**
   * Mixed into every component instance.
   */
  Mixin: {
    /**
     * Returns the DOM node rendered by this component.
     *
     * @return {DOMElement} The root node of this component.
     * @final
     * @protected
     */
    getDOMNode: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'getDOMNode(): A component must be mounted to have a DOM node.'
      ) : invariant(this.isMounted()));
      return ReactMount.getNode(this._rootNodeID);
    }
  },

  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      // Asynchronously inject markup by ensuring that the container is not in
      // the document when settings its `innerHTML`.
      var parent = container.parentNode;
      if (parent) {
        var next = container.nextSibling;
        parent.removeChild(container);
        container.innerHTML = markup;
        if (next) {
          parent.insertBefore(container, next);
        } else {
          parent.appendChild(container);
        }
      } else {
        container.innerHTML = markup;
      }
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":36,"./ReactMarkupChecksum":54,"./ReactMount":55,"./ReactPerf":60,"./ReactReconcileTransaction":66,"./getReactRootElementInContainer":104,"./invariant":108}],28:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactComponentEnvironment
 */

"use strict";

var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");

var ReactComponentEnvironment = ReactComponentBrowserEnvironment;

module.exports = ReactComponentEnvironment;

},{"./ReactComponentBrowserEnvironment":27}],29:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactErrorUtils = require("./ReactErrorUtils");
var ReactOwner = require("./ReactOwner");
var ReactPerf = require("./ReactPerf");
var ReactPropTransferer = require("./ReactPropTransferer");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactUpdates = require("./ReactUpdates");

var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var merge = require("./merge");
var mixInto = require("./mixInto");
var objMap = require("./objMap");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(ConvenienceConstructor, displayName) {
    ConvenienceConstructor.componentConstructor.displayName = displayName;
  },
  mixins: function(ConvenienceConstructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(ConvenienceConstructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(ConvenienceConstructor, childContextTypes) {
    var Constructor = ConvenienceConstructor.componentConstructor;
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = merge(
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(ConvenienceConstructor, contextTypes) {
    var Constructor = ConvenienceConstructor.componentConstructor;
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = merge(Constructor.contextTypes, contextTypes);
  },
  propTypes: function(ConvenienceConstructor, propTypes) {
    var Constructor = ConvenienceConstructor.componentConstructor;
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = merge(Constructor.propTypes, propTypes);
  },
  statics: function(ConvenienceConstructor, statics) {
    mixStaticSpecIntoComponent(ConvenienceConstructor, statics);
  }
};

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface[name];

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). This could potentially cause an infinite ' +
    'loop so it is forbidden.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Custom version of `mixInto` which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(ConvenienceConstructor, spec) {
  ("production" !== "development" ? invariant(
    !isValidClass(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!isValidClass(spec)));
  ("production" !== "development" ? invariant(
    !ReactComponent.isValidComponent(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactComponent.isValidComponent(spec)));

  var Constructor = ConvenienceConstructor.componentConstructor;
  var proto = Constructor.prototype;
  for (var name in spec) {
    var property = spec[name];
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](ConvenienceConstructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod = name in ReactCompositeComponentInterface;
      var isInherited = name in proto;
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isInherited &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isInherited) {
          // For methods which are defined more than once, call the existing
          // methods before calling the new property.
          if (ReactCompositeComponentInterface[name] ===
              SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(ConvenienceConstructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name) || !property) {
      return;
    }

    var isInherited = name in ConvenienceConstructor;
    var result = property;
    if (isInherited) {
      var existingProperty = ConvenienceConstructor[name];
      var existingType = typeof existingProperty;
      var propertyType = typeof property;
      ("production" !== "development" ? invariant(
        existingType === 'function' && propertyType === 'function',
        'ReactCompositeComponent: You are attempting to define ' +
        '`%s` on your component more than once, but that is only supported ' +
        'for functions, which are chained together. This conflict may be ' +
        'due to a mixin.',
        name
      ) : invariant(existingType === 'function' && propertyType === 'function'));
      result = createChainedFunction(existingProperty, property);
    }
    ConvenienceConstructor[name] = result;
    ConvenienceConstructor.componentConstructor[name] = result;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  objMap(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: %s',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

if ("production" !== "development") {

  var unmountedPropertyWhitelist = {
    constructor: true,
    construct: true,
    isOwnedBy: true, // should be deprecated but can have code mod (internal)
    mountComponent: true,
    mountComponentIntoNode: true,
    props: true,
    type: true,
    _checkPropTypes: true,
    _mountComponentIntoNode: true,
    _processContext: true
  };

  var hasWarnedOnComponentType = {};

  var warnIfUnmounted = function(instance, key) {
    if (instance.__hasBeenMounted) {
      return;
    }
    var name = instance.constructor.displayName || 'Unknown';
    var owner = ReactCurrentOwner.current;
    var ownerName = (owner && owner.constructor.displayName) || 'Unknown';
    var warningKey = key + '|' + name + '|' + ownerName;
    if (hasWarnedOnComponentType.hasOwnProperty(warningKey)) {
      // We have already warned for this combination. Skip it this time.
      return;
    }
    hasWarnedOnComponentType[warningKey] = true;

    var context = owner ? ' in ' + ownerName + '.' : ' at the top level.';
    var staticMethodExample = '<' + name + ' />.type.' + key + '(...)';

    console.warn(
      'Invalid access to component property "' + key + '" on ' + name +
      context + ' See http://fb.me/react-warning-descriptors .' +
      ' Use a static method instead: ' + staticMethodExample
    );
  };

  var defineMembraneProperty = function(membrane, prototype, key) {
    Object.defineProperty(membrane, key, {

      configurable: false,
      enumerable: true,

      get: function() {
        if (this !== membrane) {
          // When this is accessed through a prototype chain we need to check if
          // this component was mounted.
          warnIfUnmounted(this, key);
        }
        return prototype[key];
      },

      set: function(value) {
        if (this !== membrane) {
          // When this is accessed through a prototype chain, we first check if
          // this component was mounted. Then we define a value on "this"
          // instance, effectively disabling the membrane on that prototype
          // chain.
          warnIfUnmounted(this, key);
          Object.defineProperty(this, key, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        } else {
          // Otherwise, this should modify the prototype
          prototype[key] = value;
        }
      }

    });
  };

  /**
   * Creates a membrane prototype which wraps the original prototype. If any
   * property is accessed in an unmounted state, a warning is issued.
   *
   * @param {object} prototype Original prototype.
   * @return {object} The membrane prototype.
   * @private
   */
  var createMountWarningMembrane = function(prototype) {
    try {
      var membrane = Object.create(prototype);
      for (var key in prototype) {
        if (unmountedPropertyWhitelist.hasOwnProperty(key)) {
          continue;
        }
        defineMembraneProperty(membrane, prototype, key);
      }

      membrane.mountComponent = function() {
        this.__hasBeenMounted = true;
        return prototype.mountComponent.apply(this, arguments);
      };

      return membrane;
    } catch(x) {
      // In IE8 define property will fail on non-DOM objects. If anything in
      // the membrane creation fails, we'll bail out and just use the prototype
      // without warnings.
      return prototype;
    }
  };

}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+------------------------------------------------------+--------+
 * |  UN   |                    MOUNTED                           |   UN   |
 * |MOUNTED|                                                      | MOUNTED|
 * +-------+------------------------------------------------------+--------+
 * |       ^--------+   +------+   +------+   +------+   +--------^        |
 * |       |        |   |      |   |      |   |      |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |
 * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |
 * |       |        |   |      |   |      |   |      |   |        |        |
 * |       |        |   |      |   |      |   |      |   |        |        |
 * |       +--------+   +------+   +------+   +------+   +--------+        |
 * |       |                                                      |        |
 * +-------+------------------------------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null,
  /**
   * Components that are mounted and receiving new state are guarded against
   * additional state changes.
   */
  RECEIVING_STATE: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {?object} initialProps
   * @param {*} children
   * @final
   * @internal
   */
  construct: function(initialProps, children) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    this.context = this._processContext(ReactContext.current);
    this._currentContext = ReactContext.current;
    this._pendingContext = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      this._defaultProps = this.getDefaultProps ? this.getDefaultProps() : null;
      this.props = this._processProps(this.props);

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = this._renderValidatedComponent();

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this, this.componentDidMount);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._defaultProps = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    if (this.refs) {
      this.refs = null;
    }

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development") {
      if (partialState == null) {
        console.warn(
          'setState(...): You passed an undefined or null state object; ' +
          'instead, use forceUpdate().'
        );
      }
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      merge(this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return merge(currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    var props = merge(newProps);
    var defaultProps = this._defaultProps;
    for (var propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, props, ReactPropTypeLocations.prop);
      }
    }
    return props;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        propTypes[propName](props, propName, componentName, location);
      }
    }
  },

  performUpdateIfNecessary: function() {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }
    ReactComponent.Mixin.performUpdateIfNecessary.call(this);
  },

  /**
   * If any of `_pendingProps`, `_pendingState`, or `_pendingForceUpdate` is
   * set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _performUpdateIfNecessary: function(transaction) {
    if (this._pendingProps == null &&
        this._pendingState == null &&
        this._pendingContext == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextFullContext = this._pendingContext || this._currentContext;
    var nextContext = this._processContext(nextFullContext);
    this._pendingContext = null;

    var nextProps = this.props;
    if (this._pendingProps != null) {
      nextProps = this._processProps(this._pendingProps);
      this._pendingProps = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;

    // Unlike props, state, and context, we specifically don't want to set
    // _pendingOwner to null here because it's possible for a component to have
    // a null owner, so we instead make `this._owner === this._pendingOwner`
    // mean that there's no owner change pending.
    var nextOwner = this._pendingOwner;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    try {
      if (this._pendingForceUpdate ||
          !this.shouldComponentUpdate ||
          this.shouldComponentUpdate(nextProps, nextState, nextContext)) {
        this._pendingForceUpdate = false;
        // Will set `this.props`, `this.state` and `this.context`.
        this._performComponentUpdate(
          nextProps,
          nextOwner,
          nextState,
          nextFullContext,
          nextContext,
          transaction
        );
      } else {
        // If it's determined that a component should not update, we still want
        // to set props and state.
        this.props = nextProps;
        this._owner = nextOwner;
        this.state = nextState;
        this._currentContext = nextFullContext;
        this.context = nextContext;
      }
    } finally {
      this._compositeLifeCycleState = null;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {object} nextProps Next object to set as properties.
   * @param {?ReactComponent} nextOwner Next component to set as owner
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextFullContext Next object to set as _currentContext.
   * @param {?object} nextContext Next object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextProps,
    nextOwner,
    nextState,
    nextFullContext,
    nextContext,
    transaction
  ) {
    var prevProps = this.props;
    var prevOwner = this._owner;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this.props = nextProps;
    this._owner = nextOwner;
    this.state = nextState;
    this._currentContext = nextFullContext;
    this.context = nextContext;

    this.updateComponent(
      transaction,
      prevProps,
      prevOwner,
      prevState,
      prevContext
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this,
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext)
      );
    }
  },

  receiveComponent: function(nextComponent, transaction) {
    if (nextComponent === this) {
      // Since props and context are immutable after the component is
      // mounted, we can do a cheap identity compare here to determine
      // if this is a superfluous reconcile.
      return;
    }

    this._pendingContext = nextComponent._currentContext;
    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextComponent,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {object} prevProps
   * @param {?ReactComponent} prevOwner
   * @param {?object} prevState
   * @param {?object} prevContext
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevProps, prevOwner, prevState, prevContext) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevProps,
        prevOwner
      );
      var prevComponent = this._renderedComponent;
      var nextComponent = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevComponent, nextComponent)) {
        prevComponent.receiveComponent(nextComponent, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponent._rootNodeID;
        prevComponent.unmountComponent();
        this._renderedComponent = nextComponent;
        var nextMarkup = nextComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or during an existing state transition (such as within `render`).'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&
    compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(this._currentContext);
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactComponent.isValidComponent(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned null, undefined, an array, or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactComponent.isValidComponent(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = function() {
      return method.apply(component, arguments);
    };
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {var args=Array.prototype.slice.call(arguments,1);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
mixInto(ReactCompositeComponentBase, ReactComponent.Mixin);
mixInto(ReactCompositeComponentBase, ReactOwner.Mixin);
mixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);
mixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);

/**
 * Checks if a value is a valid component constructor.
 *
 * @param {*}
 * @return {boolean}
 * @public
 */
function isValidClass(componentClass) {
  return componentClass instanceof Function &&
         'componentConstructor' in componentClass &&
         componentClass.componentConstructor instanceof Function;
}
/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function() {};
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    var ConvenienceConstructor = function(props, children) {
      var instance = new Constructor();
      instance.construct.apply(instance, arguments);
      return instance;
    };
    ConvenienceConstructor.componentConstructor = Constructor;
    Constructor.ConvenienceConstructor = ConvenienceConstructor;
    ConvenienceConstructor.originalSpec = spec;

    mixSpecIntoComponent(ConvenienceConstructor, spec);

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Expose the convience constructor on the prototype so that it can be
    // easily accessed on descriptors. E.g. <Foo />.type === Foo.type and for
    // static methods like <Foo />.type.staticMethod();
    // This should not be named constructor since this may not be the function
    // that created the descriptor, and it may not even be a constructor.
    ConvenienceConstructor.type = Constructor;
    Constructor.prototype.type = Constructor;

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      Constructor.prototype = createMountWarningMembrane(Constructor.prototype);
    }

    return ConvenienceConstructor;
  },

  isValidClass: isValidClass
};

module.exports = ReactCompositeComponent;

},{"./ReactComponent":26,"./ReactContext":30,"./ReactCurrentOwner":31,"./ReactErrorUtils":47,"./ReactOwner":59,"./ReactPerf":60,"./ReactPropTransferer":61,"./ReactPropTypeLocationNames":62,"./ReactPropTypeLocations":63,"./ReactUpdates":70,"./invariant":108,"./keyMirror":114,"./merge":117,"./mixInto":120,"./objMap":121,"./shouldUpdateReactComponent":126}],30:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactContext
 */

"use strict";

var merge = require("./merge");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'} () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = merge(previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./merge":117}],31:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],32:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactDOMComponent = require("./ReactDOMComponent");

var mergeInto = require("./mergeInto");
var objMapKeyVal = require("./objMapKeyVal");

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @param {boolean} omitClose True if the close tag should be omitted.
 * @private
 */
function createDOMComponentClass(tag, omitClose) {
  var Constructor = function() {};
  Constructor.prototype = new ReactDOMComponent(tag, omitClose);
  Constructor.prototype.constructor = Constructor;
  Constructor.displayName = tag;

  var ConvenienceConstructor = function(props, children) {
    var instance = new Constructor();
    instance.construct.apply(instance, arguments);
    return instance;
  };

  // Expose the constructor on the ConvenienceConstructor and prototype so that
  // it can be easily easily accessed on descriptors.
  // E.g. <div />.type === div.type
  ConvenienceConstructor.type = Constructor;
  Constructor.prototype.type = Constructor;

  Constructor.ConvenienceConstructor = ConvenienceConstructor;
  ConvenienceConstructor.componentConstructor = Constructor;
  return ConvenienceConstructor;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = objMapKeyVal({
  a: false,
  abbr: false,
  address: false,
  area: false,
  article: false,
  aside: false,
  audio: false,
  b: false,
  base: false,
  bdi: false,
  bdo: false,
  big: false,
  blockquote: false,
  body: false,
  br: true,
  button: false,
  canvas: false,
  caption: false,
  cite: false,
  code: false,
  col: true,
  colgroup: false,
  data: false,
  datalist: false,
  dd: false,
  del: false,
  details: false,
  dfn: false,
  div: false,
  dl: false,
  dt: false,
  em: false,
  embed: true,
  fieldset: false,
  figcaption: false,
  figure: false,
  footer: false,
  form: false, // NOTE: Injected, see `ReactDOMForm`.
  h1: false,
  h2: false,
  h3: false,
  h4: false,
  h5: false,
  h6: false,
  head: false,
  header: false,
  hr: true,
  html: false,
  i: false,
  iframe: false,
  img: true,
  input: true,
  ins: false,
  kbd: false,
  keygen: true,
  label: false,
  legend: false,
  li: false,
  link: false,
  main: false,
  map: false,
  mark: false,
  menu: false,
  menuitem: false, // NOTE: Close tag should be omitted, but causes problems.
  meta: true,
  meter: false,
  nav: false,
  noscript: false,
  object: false,
  ol: false,
  optgroup: false,
  option: false,
  output: false,
  p: false,
  param: true,
  pre: false,
  progress: false,
  q: false,
  rp: false,
  rt: false,
  ruby: false,
  s: false,
  samp: false,
  script: false,
  section: false,
  select: false,
  small: false,
  source: false,
  span: false,
  strong: false,
  style: false,
  sub: false,
  summary: false,
  sup: false,
  table: false,
  tbody: false,
  td: false,
  textarea: false, // NOTE: Injected, see `ReactDOMTextarea`.
  tfoot: false,
  th: false,
  thead: false,
  time: false,
  title: false,
  tr: false,
  track: true,
  u: false,
  ul: false,
  'var': false,
  video: false,
  wbr: false,

  // SVG
  circle: false,
  defs: false,
  g: false,
  line: false,
  linearGradient: false,
  path: false,
  polygon: false,
  polyline: false,
  radialGradient: false,
  rect: false,
  stop: false,
  svg: false,
  text: false
}, createDOMComponentClass);

var injection = {
  injectComponentClasses: function(componentClasses) {
    mergeInto(ReactDOM, componentClasses);
  }
};

ReactDOM.injection = injection;

module.exports = ReactDOM;

},{"./ReactDOMComponent":34,"./mergeInto":119,"./objMapKeyVal":122}],33:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

var keyMirror = require("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`.
var button = ReactDOM.button;

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":1,"./ReactCompositeComponent":29,"./ReactDOM":32,"./keyMirror":114}],34:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMProperty = require("./DOMProperty");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponent = require("./ReactComponent");
var ReactEventEmitter = require("./ReactEventEmitter");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var invariant = require("./invariant");
var keyOf = require("./keyOf");
var merge = require("./merge");
var mixInto = require("./mixInto");

var deleteListener = ReactEventEmitter.deleteListener;
var listenTo = ReactEventEmitter.listenTo;
var registrationNameModules = ReactEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}


/**
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag, omitClose) {
  this._tagOpen = '<' + tag;
  this._tagClose = omitClose ? '' : '</' + tag + '>';
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        this._tagClose
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = this._tagOpen;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules[propKey]) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = merge(props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    var idMarkup = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + idMarkup + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextComponent, transaction) {
    assertValidProps(nextComponent.props);
    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextComponent,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {object} prevProps
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevProps, prevOwner) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevProps,
        prevOwner
      );
      this._updateDOMProperties(prevProps, transaction);
      this._updateDOMChildren(prevProps, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules[propKey]) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = merge(nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                !nextProp.hasOwnProperty(styleName)) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules[propKey]) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

mixInto(ReactDOMComponent, ReactComponent.Mixin);
mixInto(ReactDOMComponent, ReactDOMComponent.Mixin);
mixInto(ReactDOMComponent, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":3,"./DOMProperty":8,"./DOMPropertyOperations":9,"./ReactComponent":26,"./ReactEventEmitter":48,"./ReactMount":55,"./ReactMultiChild":57,"./ReactPerf":60,"./escapeTextForBrowser":96,"./invariant":108,"./keyOf":115,"./merge":117,"./mixInto":120}],35:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");
var ReactEventEmitter = require("./ReactEventEmitter");
var EventConstants = require("./EventConstants");

// Store a reference to the <form> `ReactDOMComponent`.
var form = ReactDOM.form;

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return this.transferPropsTo(form(null, this.props.children));
  },

  componentDidMount: function() {
    ReactEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topReset,
      'reset',
      this.getDOMNode()
    );
    ReactEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topSubmit,
      'submit',
      this.getDOMNode()
    );
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":14,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactEventEmitter":48}],36:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMChildrenOperations = require("./DOMChildrenOperations");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

var useWhitespaceWorkaround;

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);

      // IE8: When updating a just created node with innerHTML only leading
      // whitespace is removed. When updating an existing node with innerHTML
      // whitespace in root TextNodes is also collapsed.
      // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

      if (useWhitespaceWorkaround === undefined) {
        // Feature detection; only IE8 is known to behave improperly like this.
        var temp = document.createElement('div');
        temp.innerHTML = ' ';
        useWhitespaceWorkaround = temp.innerHTML === '';
      }

      if (useWhitespaceWorkaround) {
        // Magic theory: IE8 supposedly differentiates between added and updated
        // nodes when processing innerHTML, innerHTML on updated nodes suffers
        // from worse whitespace behavior. Re-adding a node like this triggers
        // the initial and more favorable whitespace behavior.
        node.parentNode.replaceChild(node, node);
      }

      if (useWhitespaceWorkaround && html.match(/^[ \r\n\t\f]/)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;
        node.firstChild.deleteData(0, 1);
      } else {
        node.innerHTML = html;
      }
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":3,"./DOMChildrenOperations":7,"./DOMPropertyOperations":9,"./ReactMount":55,"./ReactPerf":60,"./invariant":108}],37:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");
var ReactEventEmitter = require("./ReactEventEmitter");
var EventConstants = require("./EventConstants");

// Store a reference to the <img> `ReactDOMComponent`.
var img = ReactDOM.img;

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    var node = this.getDOMNode();
    ReactEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topLoad,
      'load',
      node
    );
    ReactEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topError,
      'error',
      node
    );
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":14,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactEventEmitter":48}],38:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");
var merge = require("./merge");

// Store a reference to the <input> `ReactDOMComponent`.
var input = ReactDOM.input;

var instancesByReactID = {};

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      checked: this.props.defaultChecked || false,
      value: defaultValue != null ? defaultValue : null
    };
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onChange` handler.
    return !this._isChanging;
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = merge(this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.value;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.checked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      this._isChanging = true;
      returnValue = onChange.call(this, event);
      this._isChanging = false;
    }
    this.setState({
      checked: event.target.checked,
      value: event.target.value
    });

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // In some cases, this will actually change the `checked` state value.
        // In other cases, there's no change but this forces a reconcile upon
        // which componentDidUpdate will reset the DOM property to whatever it
        // should be.
        otherInstance.setState({
          checked: false
        });
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":1,"./DOMPropertyOperations":9,"./LinkedValueUtils":21,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactMount":55,"./invariant":108,"./merge":117}],39:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

// Store a reference to the <option> `ReactDOMComponent`.
var option = ReactDOM.option;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (this.props.selected != null) {
      if ("production" !== "development") {
        console.warn(
          'Use the `defaultValue` or `value` props on <select> instead of ' +
          'setting `selected` on <option>.'
        );
      }
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactCompositeComponent":29,"./ReactDOM":32}],40:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

var invariant = require("./invariant");
var merge = require("./merge");

// Store a reference to the <select> `ReactDOMComponent`.
var select = ReactDOM.select;

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    ("production" !== "development" ? invariant(
      Array.isArray(props[propName]),
      'The `%s` prop supplied to <select> must be an array if `multiple` is ' +
      'true.',
      propName
    ) : invariant(Array.isArray(props[propName])));
  } else {
    ("production" !== "development" ? invariant(
      !Array.isArray(props[propName]),
      'The `%s` prop supplied to <select> must be a scalar value if ' +
      '`multiple` is false.',
      propName
    ) : invariant(!Array.isArray(props[propName])));
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onChange` handler.
    return !this._isChanging;
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = merge(this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function() {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      this._isChanging = true;
      returnValue = onChange.call(this, event);
      this._isChanging = false;
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this.setState({value: selectedValue});
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":1,"./LinkedValueUtils":21,"./ReactCompositeComponent":29,"./ReactDOM":32,"./invariant":108,"./merge":117}],41:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection();

  if (selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);
  var rangeLength = currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var start = tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;
  detectionRange.detach();

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  var selection = window.getSelection();

  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }

    range.detach();
  }
}

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: function(node) {
    var getOffsets = document.selection ? getIEOffsets : getModernOffsets;
    return getOffsets(node);
  },

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: function(node, offsets) {
    var setOffsets = document.selection ? setIEOffsets : setModernOffsets;
    setOffsets(node, offsets);
  }
};

module.exports = ReactDOMSelection;

},{"./getNodeForCharacterOffset":103,"./getTextContentAccessor":105}],42:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

var invariant = require("./invariant");
var merge = require("./merge");

// Store a reference to the <textarea> `ReactDOMComponent`.
var textarea = ReactDOM.textarea;

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        console.warn(
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        );
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue),
      value: defaultValue
    };
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onChange` handler.
    return !this._isChanging;
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = merge(this.props);
    var value = LinkedValueUtils.getValue(this);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = value != null ? value : this.state.value;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      this._isChanging = true;
      returnValue = onChange.call(this, event);
      this._isChanging = false;
    }
    this.setState({value: event.target.value});
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":1,"./DOMPropertyOperations":9,"./LinkedValueUtils":21,"./ReactCompositeComponent":29,"./ReactDOM":32,"./invariant":108,"./merge":117}],43:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = require("./ReactUpdates");
var Transaction = require("./Transaction");

var emptyFunction = require("./emptyFunction");
var mixInto = require("./mixInto");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

mixInto(ReactDefaultBatchingStrategyTransaction, Transaction.Mixin);
mixInto(ReactDefaultBatchingStrategyTransaction, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, param) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(param);
    } else {
      transaction.perform(callback, null, param);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./ReactUpdates":70,"./Transaction":84,"./emptyFunction":95,"./mixInto":120}],44:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var ReactInjection = require("./ReactInjection");

var ExecutionEnvironment = require("./ExecutionEnvironment");

var DefaultDOMPropertyConfig = require("./DefaultDOMPropertyConfig");

var ChangeEventPlugin = require("./ChangeEventPlugin");
var ClientReactRootIndex = require("./ClientReactRootIndex");
var CompositionEventPlugin = require("./CompositionEventPlugin");
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
var ReactEventTopLevelCallback = require("./ReactEventTopLevelCallback");
var ReactDOM = require("./ReactDOM");
var ReactDOMButton = require("./ReactDOMButton");
var ReactDOMForm = require("./ReactDOMForm");
var ReactDOMImg = require("./ReactDOMImg");
var ReactDOMInput = require("./ReactDOMInput");
var ReactDOMOption = require("./ReactDOMOption");
var ReactDOMSelect = require("./ReactDOMSelect");
var ReactDOMTextarea = require("./ReactDOMTextarea");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var SelectEventPlugin = require("./SelectEventPlugin");
var ServerReactRootIndex = require("./ServerReactRootIndex");
var SimpleEventPlugin = require("./SimpleEventPlugin");

var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");

var createFullPageComponent = require("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectTopLevelCallbackCreator(
    ReactEventTopLevelCallback
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin
  });

  ReactInjection.DOM.injectComponentClasses({
    button: ReactDOMButton,
    form: ReactDOMForm,
    img: ReactDOMImg,
    input: ReactDOMInput,
    option: ReactDOMOption,
    select: ReactDOMSelect,
    textarea: ReactDOMTextarea,

    html: createFullPageComponent(ReactDOM.html),
    head: createFullPageComponent(ReactDOM.head),
    title: createFullPageComponent(ReactDOM.title),
    body: createFullPageComponent(ReactDOM.body)
  });

  ReactInjection.DOMProperty.injectDOMPropertyConfig(DefaultDOMPropertyConfig);

  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = require("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./ChangeEventPlugin":4,"./ClientReactRootIndex":5,"./CompositionEventPlugin":6,"./DefaultDOMPropertyConfig":11,"./DefaultEventPluginOrder":12,"./EnterLeaveEventPlugin":13,"./ExecutionEnvironment":20,"./MobileSafariClickEventPlugin":22,"./ReactDOM":32,"./ReactDOMButton":33,"./ReactDOMForm":35,"./ReactDOMImg":37,"./ReactDOMInput":38,"./ReactDOMOption":39,"./ReactDOMSelect":40,"./ReactDOMTextarea":42,"./ReactDefaultBatchingStrategy":43,"./ReactDefaultPerf":45,"./ReactEventTopLevelCallback":50,"./ReactInjection":51,"./ReactInstanceHandles":53,"./ReactMount":55,"./SelectEventPlugin":71,"./ServerReactRootIndex":72,"./SimpleEventPlugin":73,"./createFullPageComponent":91}],45:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var performanceNow = require("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Total exclusive time (ms)': roundFloat(item.exclusive),
        'Exclusive time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {var args=Array.prototype.slice.call(arguments,0);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          entry.counts[rootNodeID] = entry.counts[rootNodeID] || 0;
          entry.counts[rootNodeID] += 1;
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        var typeOfLog = isRender ? entry.exclusive : entry.inclusive;
        typeOfLog[rootNodeID] = typeOfLog[rootNodeID] || 0;
        typeOfLog[rootNodeID] += totalTime;

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":8,"./ReactDefaultPerfAnalysis":46,"./ReactMount":55,"./ReactPerf":60,"./performanceNow":124}],46:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var merge = require("./merge");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = merge(measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        count: 0
      };
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = merge(measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = merge(measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggerd
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./merge":117}],47:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],48:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventListener = require("./EventListener");
var EventPluginHub = require("./EventPluginHub");
var EventPluginRegistry = require("./EventPluginRegistry");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
var ViewportMetrics = require("./ViewportMetrics");

var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");
var merge = require("./merge");

/**
 * Summary of `ReactEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap native browser events. We normalize
 *    and de-duplicate events to account for browser quirks.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 *                   .
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .                         +-----------+
 *       +           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  if (mountAt[topListenersIDKey] == null) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * Traps top-level events by using event bubbling.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {string} handlerBaseName Event name (e.g. "click").
 * @param {DOMEventTarget} element Element on which to attach listener.
 * @internal
 */
function trapBubbledEvent(topLevelType, handlerBaseName, element) {
  EventListener.listen(
    element,
    handlerBaseName,
    ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(
      topLevelType
    )
  );
}

/**
 * Traps a top-level event by using event capturing.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {string} handlerBaseName Event name (e.g. "click").
 * @param {DOMEventTarget} element Element on which to attach listener.
 * @internal
 */
function trapCapturedEvent(topLevelType, handlerBaseName, element) {
  EventListener.capture(
    element,
    handlerBaseName,
    ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(
      topLevelType
    )
  );
}

/**
 * `ReactEventEmitter` is used to attach top-level event listeners. For example:
 *
 *   ReactEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactEventEmitter = merge(ReactEventEmitterMixin, {

  /**
   * React references `ReactEventTopLevelCallback` using this property in order
   * to allow dependency injection.
   */
  TopLevelCallbackCreator: null,

  injection: {
    /**
     * @param {function} TopLevelCallbackCreator
     */
    injectTopLevelCallbackCreator: function(TopLevelCallbackCreator) {
      ReactEventEmitter.TopLevelCallbackCreator = TopLevelCallbackCreator;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'setEnabled(...): Cannot toggle event listening in a Worker thread. ' +
      'This is likely a bug in the framework. Please report immediately.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    if (ReactEventEmitter.TopLevelCallbackCreator) {
      ReactEventEmitter.TopLevelCallbackCreator.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactEventEmitter.TopLevelCallbackCreator &&
      ReactEventEmitter.TopLevelCallbackCreator.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {DOMDocument} contentDocument Document which owns the container
   */
  listenTo: function(registrationName, contentDocument) {
    var mountAt = contentDocument;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!isListening[dependency]) {
        var topLevelType = topLevelTypes[dependency];

        if (topLevelType === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt);
          }
        } else if (topLevelType === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
          } else {
            trapBubbledEvent(topLevelTypes.topScroll, 'scroll', window);
          }
        } else if (topLevelType === topLevelTypes.topFocus ||
            topLevelType === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
            trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
            trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping[dependency]) {
          trapBubbledEvent(topLevelType, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      EventListener.listen(window, 'scroll', refresh);
      EventListener.listen(window, 'resize', refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners,

  trapBubbledEvent: trapBubbledEvent,

  trapCapturedEvent: trapCapturedEvent

});

module.exports = ReactEventEmitter;

},{"./EventConstants":14,"./EventListener":15,"./EventPluginHub":16,"./EventPluginRegistry":17,"./ExecutionEnvironment":20,"./ReactEventEmitterMixin":49,"./ViewportMetrics":85,"./invariant":108,"./isEventSupported":109,"./merge":117}],49:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = require("./EventPluginHub");
var ReactUpdates = require("./ReactUpdates");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    // Event queue being processed in the same cycle allows `preventDefault`.
    ReactUpdates.batchedUpdates(runEventQueueInBatch, events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":16,"./ReactUpdates":70}],50:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactEventTopLevelCallback
 * @typechecks static-only
 */

"use strict";

var PooledClass = require("./PooledClass");
var ReactEventEmitter = require("./ReactEventEmitter");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");

var getEventTarget = require("./getEventTarget");
var mixInto = require("./mixInto");

/**
 * @type {boolean}
 * @private
 */
var _topLevelListenersEnabled = true;

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

/**
 * Calls ReactEventEmitter.handleTopLevel for each node stored in bookKeeping's
 * ancestor list. Separated from createTopLevelCallback to avoid try/finally
 * deoptimization.
 *
 * @param {string} topLevelType
 * @param {DOMEvent} nativeEvent
 * @param {TopLevelCallbackBookKeeping} bookKeeping
 */
function handleTopLevelImpl(topLevelType, nativeEvent, bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventEmitter.handleTopLevel(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );
  }
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping() {
  this.ancestors = [];
}
mixInto(TopLevelCallbackBookKeeping, {
  destructor: function() {
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping);

/**
 * Top-level callback creator used to implement event handling using delegation.
 * This is used via dependency injection.
 */
var ReactEventTopLevelCallback = {

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    _topLevelListenersEnabled = !!enabled;
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return _topLevelListenersEnabled;
  },

  /**
   * Creates a callback for the supplied `topLevelType` that could be added as
   * a listener to the document. The callback computes a `topLevelTarget` which
   * should be the root node of a mounted React component where the listener
   * is attached.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @return {function} Callback for handling top-level events.
   */
  createTopLevelCallback: function(topLevelType) {
    return function(nativeEvent) {
      if (!_topLevelListenersEnabled) {
        return;
      }

      var bookKeeping = TopLevelCallbackBookKeeping.getPooled();
      try {
        handleTopLevelImpl(topLevelType, nativeEvent, bookKeeping);
      } finally {
        TopLevelCallbackBookKeeping.release(bookKeeping);
      }
    };
  }

};

module.exports = ReactEventTopLevelCallback;

},{"./PooledClass":23,"./ReactEventEmitter":48,"./ReactInstanceHandles":53,"./ReactMount":55,"./getEventTarget":101,"./mixInto":120}],51:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var EventPluginHub = require("./EventPluginHub");
var ReactDOM = require("./ReactDOM");
var ReactEventEmitter = require("./ReactEventEmitter");
var ReactPerf = require("./ReactPerf");
var ReactRootIndex = require("./ReactRootIndex");
var ReactUpdates = require("./ReactUpdates");

var ReactInjection = {
  DOMProperty: DOMProperty.injection,
  EventPluginHub: EventPluginHub.injection,
  DOM: ReactDOM.injection,
  EventEmitter: ReactEventEmitter.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":8,"./EventPluginHub":16,"./ReactDOM":32,"./ReactEventEmitter":48,"./ReactPerf":60,"./ReactRootIndex":67,"./ReactUpdates":70}],52:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = require("./ReactDOMSelection");

var containsNode = require("./containsNode");
var getActiveElement = require("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      priorFocusedElem.focus();
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":41,"./containsNode":88,"./getActiveElement":99}],53:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = require("./ReactRootIndex");

var invariant = require("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":67,"./invariant":108}],54:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = require("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":87}],55:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactEventEmitter = require("./ReactEventEmitter");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactPerf = require("./ReactPerf");

var containsNode = require("./containsNode");
var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var invariant = require("./invariant");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.renderComponent(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Time spent generating markup. */
  totalInstantiationTime: 0,

  /** Time spent inserting markup into the DOM. */
  totalInjectionTime: 0,

  /** Whether support for touch events should be initialized. */
  useTouchEvents: false,

  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      var reactRootID = ReactMount._registerComponent(nextComponent, container);
      nextComponent.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return nextComponent;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} nextComponent Component instance to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderComponent: function(nextComponent, container, callback) {
    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      if (shouldUpdateReactComponent(prevComponent, nextComponent)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextComponent,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextComponent,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    return ReactMount.renderComponent(constructor(props), container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser). ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

module.exports = ReactMount;

},{"./DOMProperty":8,"./ReactEventEmitter":48,"./ReactInstanceHandles":53,"./ReactPerf":60,"./containsNode":88,"./getReactRootElementInContainer":104,"./invariant":108,"./shouldUpdateReactComponent":126}],56:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMountReady
 */

"use strict";

var PooledClass = require("./PooledClass");

var mixInto = require("./mixInto");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `ReactMountReady.getPooled()`.
 *
 * @param {?array<function>} initialCollection
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function ReactMountReady(initialCollection) {
  this._queue = initialCollection || null;
}

mixInto(ReactMountReady, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked. This is used
   * to enqueue calls to `componentDidMount` and `componentDidUpdate`.
   *
   * @param {ReactComponent} component Component being rendered.
   * @param {function(DOMElement)} callback Invoked when `notifyAll` is invoked.
   * @internal
   */
  enqueue: function(component, callback) {
    this._queue = this._queue || [];
    this._queue.push({component: component, callback: callback});
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var queue = this._queue;
    if (queue) {
      this._queue = null;
      for (var i = 0, l = queue.length; i < l; i++) {
        var component = queue[i].component;
        var callback = queue[i].callback;
        callback.call(component);
      }
      queue.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._queue = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(ReactMountReady);

module.exports = ReactMountReady;

},{"./PooledClass":23,"./mixInto":120}],57:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var flattenChildren = require("./flattenChildren");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = child.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          child._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (shouldUpdateReactComponent(prevChild, nextChild)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextChild, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          this._mountChildByNameAtIndex(
            nextChild, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      // TODO: When is this not true?
      if (ReactComponent.isValidComponent(child)) {
        this.removeChild(child);
        child._mountIndex = null;
        child.unmountComponent();
        delete this._renderedChildren[name];
      }
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":26,"./ReactMultiChildUpdateTypes":58,"./flattenChildren":97,"./shouldUpdateReactComponent":126}],58:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = require("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":114}],59:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactOwner
 */

"use strict";

var invariant = require("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs || (this.refs = {});
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./invariant":108}],60:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      return function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],61:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var emptyFunction = require("./emptyFunction");
var invariant = require("./invariant");
var joinClasses = require("./joinClasses");
var merge = require("./merge");

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Never transfer the `key` prop.
   */
  key: emptyFunction,
  /**
   * Never transfer the `ref` prop.
   */
  ref: emptyFunction,
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: createTransferStrategy(merge)
};

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    var props = merge(oldProps);

    for (var thisKey in newProps) {
      if (!newProps.hasOwnProperty(thisKey)) {
        continue;
      }

      var transferStrategy = TransferStrategies[thisKey];

      if (transferStrategy) {
        transferStrategy(props, thisKey, newProps[thisKey]);
      } else if (!props.hasOwnProperty(thisKey)) {
        props[thisKey] = newProps[thisKey];
      }
    }

    return props;
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactComponent} component Component receiving the properties.
     * @return {ReactComponent} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(component) {
      ("production" !== "development" ? invariant(
        component._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        component.constructor.displayName
      ) : invariant(component._owner === this));

      component.props = ReactPropTransferer.mergeProps(
        component.props,
        this.props
      );

      return component;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./emptyFunction":95,"./invariant":108,"./joinClasses":113,"./merge":117}],62:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],63:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = require("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":114}],64:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

var warning = require("./warning");
var createObjectFrom = require("./createObjectFrom");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyLink = React.createClass({
 *     propTypes: {
 *       // An optional string or URI prop named "href".
 *       href: function(props, propName, componentName) {
 *         var propValue = props[propName];
 *         warning(
 *           propValue == null ||
 *           typeof propValue === 'string' ||
 *           propValue instanceof URI,
 *           'Invalid `%s` supplied to `%s`, expected string or URI.',
 *           propName,
 *           componentName
 *         );
 *       }
 *     },
 *     render: function() { ... }
 *   });
 *
 * @internal
 */
var Props = {

  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  shape: createShapeTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  arrayOf: createArrayOfTypeChecker,

  instanceOf: createInstanceTypeChecker,

  renderable: createRenderableTypeChecker(),

  component: createComponentTypeChecker(),

  any: createAnyTypeChecker()
};

var ANONYMOUS = '<<anonymous>>';

function isRenderable(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isRenderable);
      }
      if (ReactComponent.isValidComponent(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isRenderable(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of typeof but with special handling for arrays
function getPropType(propValue) {
  var propType = typeof propValue;
  if (propType === 'object' && Array.isArray(propValue)) {
    return 'array';
  }
  return propType;
}

function createAnyTypeChecker() {
  function validateAnyType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    return true; // is always valid
  }
  return createChainableTypeChecker(validateAnyType);
}

function createPrimitiveTypeChecker(expectedType) {
  function validatePrimitiveType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var propType = getPropType(propValue);
    var isValid = propType === expectedType;
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` of type `%s` supplied to `%s`, expected `%s`.',
        ReactPropTypeLocationNames[location],
        propName,
        propType,
        componentName,
        expectedType
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validatePrimitiveType);
}

function createEnumTypeChecker(expectedValues) {
  var expectedEnum = createObjectFrom(expectedValues);
  function validateEnumType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var isValid = expectedEnum[propValue];
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` supplied to `%s`, expected one of %s.',
        ReactPropTypeLocationNames[location],
        propName,
        componentName,
        JSON.stringify(Object.keys(expectedEnum))
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateEnumType);
}

function createShapeTypeChecker(shapeTypes) {
  function validateShapeType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var propType = getPropType(propValue);
    var isValid = propType === 'object';
    if (isValid) {
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (checker && !checker(propValue, key, componentName, location)) {
          return false;
        }
      }
    }
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` of type `%s` supplied to `%s`, expected `object`.',
        ReactPropTypeLocationNames[location],
        propName,
        propType,
        componentName
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateShapeType);
}

function createInstanceTypeChecker(expectedClass) {
  function validateInstanceType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var isValid = propValue instanceof expectedClass;
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` supplied to `%s`, expected instance of `%s`.',
        ReactPropTypeLocationNames[location],
        propName,
        componentName,
        expectedClass.name || ANONYMOUS
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateInstanceType);
}

function createArrayOfTypeChecker(propTypeChecker) {
  function validateArrayType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var isValid = Array.isArray(propValue);
    if (isValid) {
      for (var i = 0; i < propValue.length; i++) {
        if (!propTypeChecker(propValue, i, componentName, location)) {
          return false;
        }
      }
    }
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` supplied to `%s`, expected an array.',
        ReactPropTypeLocationNames[location],
        propName,
        componentName
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateArrayType);
}

function createRenderableTypeChecker() {
  function validateRenderableType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var isValid = isRenderable(propValue);
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` supplied to `%s`, expected a renderable prop.',
        ReactPropTypeLocationNames[location],
        propName,
        componentName
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateRenderableType);
}

function createComponentTypeChecker() {
  function validateComponentType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var isValid = ReactComponent.isValidComponent(propValue);
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` supplied to `%s`, expected a React component.',
        ReactPropTypeLocationNames[location],
        propName,
        componentName
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateComponentType);
}

function createUnionTypeChecker(arrayOfValidators) {
  return function(props, propName, componentName, location) {
    var isValid = false;
    for (var ii = 0; ii < arrayOfValidators.length; ii++) {
      var validate = arrayOfValidators[ii];
      if (typeof validate.weak === 'function') {
        validate = validate.weak;
      }
      if (validate(props, propName, componentName, location)) {
        isValid = true;
        break;
      }
    }
    ("production" !== "development" ? warning(
      isValid,
      'Invalid %s `%s` supplied to `%s`.',
      ReactPropTypeLocationNames[location],
      propName,
      componentName || ANONYMOUS
    ) : null);
    return isValid;
  };
}

function createChainableTypeChecker(validate) {
  function checkType(
    isRequired, shouldWarn, props, propName, componentName, location
  ) {
    var propValue = props[propName];
    if (propValue != null) {
      // Only validate if there is a value to check.
      return validate(
        shouldWarn,
        propValue,
        propName,
        componentName || ANONYMOUS,
        location
      );
    } else {
      var isValid = !isRequired;
      if (shouldWarn) {
        ("production" !== "development" ? warning(
          isValid,
          'Required %s `%s` was not specified in `%s`.',
          ReactPropTypeLocationNames[location],
          propName,
          componentName || ANONYMOUS
        ) : null);
      }
      return isValid;
    }
  }

  var checker = checkType.bind(null, false, true);
  checker.weak = checkType.bind(null, false, false);
  checker.isRequired = checkType.bind(null, true, true);
  checker.weak.isRequired = checkType.bind(null, true, false);
  checker.isRequired.weak = checker.weak.isRequired;

  return checker;
}

module.exports = Props;

},{"./ReactComponent":26,"./ReactPropTypeLocationNames":62,"./createObjectFrom":93,"./warning":129}],65:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = require("./PooledClass");
var ReactEventEmitter = require("./ReactEventEmitter");

var mixInto = require("./mixInto");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

mixInto(ReactPutListenerQueue, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./PooledClass":23,"./ReactEventEmitter":48,"./mixInto":120}],66:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");
var PooledClass = require("./PooledClass");
var ReactEventEmitter = require("./ReactEventEmitter");
var ReactInputSelection = require("./ReactInputSelection");
var ReactMountReady = require("./ReactMountReady");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var mixInto = require("./mixInto");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactEventEmitter` before the
   * reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactEventEmitter.isEnabled();
    ReactEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of `ReactEventEmitter`
   *   before the reconciliation occured. `close` restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a `ReactMountReady` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  this.reactMountReady = ReactMountReady.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    if (ExecutionEnvironment.canUseDOM) {
      return TRANSACTION_WRAPPERS;
    } else {
      return [];
    }
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   *   TODO: convert to ReactMountReady
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    ReactMountReady.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


mixInto(ReactReconcileTransaction, Transaction.Mixin);
mixInto(ReactReconcileTransaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./ExecutionEnvironment":20,"./PooledClass":23,"./ReactEventEmitter":48,"./ReactInputSelection":52,"./ReactMountReady":56,"./ReactPutListenerQueue":65,"./Transaction":84,"./mixInto":120}],67:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],68:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactComponent = require("./ReactComponent");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");

var invariant = require("./invariant");

/**
 * @param {ReactComponent} component
 * @return {string} the markup
 */
function renderComponentToString(component) {
  ("production" !== "development" ? invariant(
    ReactComponent.isValidComponent(component),
    'renderComponentToString(): You must pass a valid ReactComponent.'
  ) : invariant(ReactComponent.isValidComponent(component)));

  ("production" !== "development" ? invariant(
    !(arguments.length === 2 && typeof arguments[1] === 'function'),
    'renderComponentToString(): This function became synchronous and now ' +
    'returns the generated markup. Please remove the second parameter.'
  ) : invariant(!(arguments.length === 2 && typeof arguments[1] === 'function')));

  var id = ReactInstanceHandles.createReactRootID();
  var transaction = ReactReconcileTransaction.getPooled();
  transaction.reinitializeTransaction();
  try {
    return transaction.perform(function() {
      var markup = component.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactReconcileTransaction.release(transaction);
  }
}

module.exports = {
  renderComponentToString: renderComponentToString
};

},{"./ReactComponent":26,"./ReactInstanceHandles":53,"./ReactMarkupChecksum":54,"./ReactReconcileTransaction":66,"./invariant":108}],69:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponent = require("./ReactComponent");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var mixInto = require("./mixInto");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(initialText) {
  this.construct({text: initialText});
};

mixInto(ReactTextComponent, ReactComponent.Mixin);
mixInto(ReactTextComponent, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );
    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapeTextForBrowser(this.props.text) +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps.text !== this.props.text) {
      this.props.text = nextProps.text;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps.text
      );
    }
  }

});

// Expose the constructor on itself and the prototype for consistency with other
// descriptors.
ReactTextComponent.type = ReactTextComponent;
ReactTextComponent.prototype.type = ReactTextComponent;

module.exports = ReactTextComponent;

},{"./DOMPropertyOperations":9,"./ReactComponent":26,"./escapeTextForBrowser":96,"./mixInto":120}],70:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");

var dirtyComponents = [];

var batchingStrategy = null;

function ensureBatchingStrategy() {
  ("production" !== "development" ? invariant(batchingStrategy, 'ReactUpdates: must inject a batching strategy') : invariant(batchingStrategy));
}

function batchedUpdates(callback, param) {
  ensureBatchingStrategy();
  batchingStrategy.batchedUpdates(callback, param);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates() {
  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.

  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < dirtyComponents.length; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary();
      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          callbacks[j].call(component);
        }
      }
    }
  }
}

function clearDirtyComponents() {
  dirtyComponents.length = 0;
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // Run these in separate functions so the JIT can optimize
    try {
      runBatchedUpdates();
    } finally {
      clearDirtyComponents();
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureBatchingStrategy();

  if (!batchingStrategy.isBatchingUpdates) {
    component.performUpdateIfNecessary();
    callback && callback.call(component);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

var ReactUpdatesInjection = {
  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection
};

module.exports = ReactUpdates;

},{"./ReactPerf":60,"./invariant":108}],71:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticEvent = require("./SyntheticEvent");

var getActiveElement = require("./getActiveElement");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");
var shallowEqual = require("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  } else {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":14,"./EventPropagators":19,"./ReactInputSelection":52,"./SyntheticEvent":77,"./getActiveElement":99,"./isTextInputElement":111,"./keyOf":115,"./shallowEqual":125}],72:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],73:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginUtils = require("./EventPluginUtils");
var EventPropagators = require("./EventPropagators");
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
var SyntheticEvent = require("./SyntheticEvent");
var SyntheticFocusEvent = require("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");
var SyntheticDragEvent = require("./SyntheticDragEvent");
var SyntheticTouchEvent = require("./SyntheticTouchEvent");
var SyntheticUIEvent = require("./SyntheticUIEvent");
var SyntheticWheelEvent = require("./SyntheticWheelEvent");

var invariant = require("./invariant");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);
    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyPress:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":14,"./EventPluginUtils":18,"./EventPropagators":19,"./SyntheticClipboardEvent":74,"./SyntheticDragEvent":76,"./SyntheticEvent":77,"./SyntheticFocusEvent":78,"./SyntheticKeyboardEvent":79,"./SyntheticMouseEvent":80,"./SyntheticTouchEvent":81,"./SyntheticUIEvent":82,"./SyntheticWheelEvent":83,"./invariant":108,"./keyOf":115}],74:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":77}],75:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":77}],76:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":80}],77:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = require("./PooledClass");

var emptyFunction = require("./emptyFunction");
var getEventTarget = require("./getEventTarget");
var merge = require("./merge");
var mergeInto = require("./mergeInto");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

mergeInto(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  mergeInto(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = merge(Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./PooledClass":23,"./emptyFunction":95,"./getEventTarget":101,"./merge":117,"./mergeInto":119}],78:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":82}],79:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventKey = require("./getEventKey");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  // Legacy Interface
  'char': null,
  charCode: null,
  keyCode: null,
  which: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":82,"./getEventKey":100}],80:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");
var ViewportMetrics = require("./ViewportMetrics");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":82,"./ViewportMetrics":85}],81:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":82}],82:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: null,
  detail: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":77}],83:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":80}],84:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = require("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Bonus:
 * - Reports timing metrics by method name and wrapper index.
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    if (!this.timingMetrics) {
      this.timingMetrics = {};
    }
    this.timingMetrics.methodInvocationTime = 0;
    if (!this.timingMetrics.wrapperInitTimes) {
      this.timingMetrics.wrapperInitTimes = [];
    } else {
      this.timingMetrics.wrapperInitTimes.length = 0;
    }
    if (!this.timingMetrics.wrapperCloseTimes) {
      this.timingMetrics.wrapperCloseTimes = [];
    } else {
      this.timingMetrics.wrapperCloseTimes.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var memberStart = Date.now();
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      var memberEnd = Date.now();
      this.methodInvocationTime += (memberEnd - memberStart);
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    var wrapperInitTimes = this.timingMetrics.wrapperInitTimes;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var initStart = Date.now();
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        var curInitTime = wrapperInitTimes[i];
        var initEnd = Date.now();
        wrapperInitTimes[i] = (curInitTime || 0) + (initEnd - initStart);

        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    var wrapperCloseTimes = this.timingMetrics.wrapperCloseTimes;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var closeStart = Date.now();
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        var closeEnd = Date.now();
        var curCloseTime = wrapperCloseTimes[i];
        wrapperCloseTimes[i] = (curCloseTime || 0) + (closeEnd - closeStart);

        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":108}],85:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":106}],86:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule accumulate
 */

"use strict";

var invariant = require("./invariant");

/**
 * Accumulates items that must not be null or undefined.
 *
 * This is used to conserve memory by avoiding array allocations.
 *
 * @return {*|array<*>} An accumulation of items.
 */
function accumulate(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulate(...): Accumulated items must be not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  } else {
    // Both are not empty. Warning: Never call x.concat(y) when you are not
    // certain that x is an Array (x could be a string with concat method).
    var currentIsArray = Array.isArray(current);
    var nextIsArray = Array.isArray(next);
    if (currentIsArray) {
      return current.concat(next);
    } else {
      if (nextIsArray) {
        return [current].concat(next);
      } else {
        return [current, next];
      }
    }
  }
}

module.exports = accumulate;

},{"./invariant":108}],87:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonable good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],88:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = require("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":112}],89:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule copyProperties
 */

/**
 * Copy properties from one or more objects (up to 5) into the first object.
 * This is a shallow copy. It mutates the first object and also returns it.
 *
 * NOTE: `arguments` has a very significant performance penalty, which is why
 * we don't support unlimited arguments.
 */
function copyProperties(obj, a, b, c, d, e, f) {
  obj = obj || {};

  if ("production" !== "development") {
    if (f) {
      throw new Error('Too many arguments passed to copyProperties');
    }
  }

  var args = [a, b, c, d, e];
  var ii = 0, v;
  while (args[ii]) {
    v = args[ii++];
    for (var k in v) {
      obj[k] = v[k];
    }

    // IE ignores toString in object iteration.. See:
    // webreflection.blogspot.com/2007/07/quick-fix-internet-explorer-and.html
    if (v.hasOwnProperty && v.hasOwnProperty('toString') &&
        (typeof v.toString != 'undefined') && (obj.toString !== v.toString)) {
      obj.toString = v.toString;
    }
  }

  return obj;
}

module.exports = copyProperties;

},{}],90:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = require("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":127}],91:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = require("./ReactCompositeComponent");

var invariant = require("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {function} componentClass convenience constructor to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(componentClass) {
  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + (
      componentClass.componentConstructor.displayName || ''
    ),

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return this.transferPropsTo(componentClass(null, this.props.children));
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":29,"./invariant":108}],92:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createArrayFrom = require("./createArrayFrom");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":20,"./createArrayFrom":90,"./getMarkupWrap":102,"./invariant":108}],93:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createObjectFrom
 */

/**
 * Construct an object from an array of keys
 * and optionally specified value or list of values.
 *
 *  >>> createObjectFrom(['a','b','c']);
 *  {a: true, b: true, c: true}
 *
 *  >>> createObjectFrom(['a','b','c'], false);
 *  {a: false, b: false, c: false}
 *
 *  >>> createObjectFrom(['a','b','c'], 'monkey');
 *  {c:'monkey', b:'monkey' c:'monkey'}
 *
 *  >>> createObjectFrom(['a','b','c'], [1,2,3]);
 *  {a: 1, b: 2, c: 3}
 *
 *  >>> createObjectFrom(['women', 'men'], [true, false]);
 *  {women: true, men: false}
 *
 * @param   Array   list of keys
 * @param   mixed   optional value or value array.  defaults true.
 * @returns object
 */
function createObjectFrom(keys, values /* = true */) {
  if ("production" !== "development") {
    if (!Array.isArray(keys)) {
      throw new TypeError('Must pass an array of keys.');
    }
  }

  var object = {};
  var isArray = Array.isArray(values);
  if (typeof values == 'undefined') {
    values = true;
  }

  for (var ii = keys.length; ii--;) {
    object[keys[ii]] = isArray ? values[ii] : values;
  }
  return object;
}

module.exports = createObjectFrom;

},{}],94:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");

/**
 * Convert a value into the proper css writable value. The `styleName` name
 * name should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} styleName CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(styleName, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || CSSProperty.isUnitlessNumber[styleName]) {
    return '' + value; // cast to string
  }

  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":2}],95:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule emptyFunction
 */

var copyProperties = require("./copyProperties");

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

copyProperties(emptyFunction, {
  thatReturns: makeEmptyFunction,
  thatReturnsFalse: makeEmptyFunction(false),
  thatReturnsTrue: makeEmptyFunction(true),
  thatReturnsNull: makeEmptyFunction(null),
  thatReturnsThis: function() { return this; },
  thatReturnsArgument: function(arg) { return arg; }
});

module.exports = emptyFunction;

},{"./copyProperties":89}],96:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;",
  "/": "&#x2f;"
};

var ESCAPE_REGEX = /[&><"'\/]/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],97:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule flattenChildren
 */

"use strict";

var invariant = require("./invariant");
var traverseAllChildren = require("./traverseAllChildren");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  ("production" !== "development" ? invariant(
    !result.hasOwnProperty(name),
    'flattenChildren(...): Encountered two children with the same key, `%s`. ' +
    'Children keys must be unique.',
    name
  ) : invariant(!result.hasOwnProperty(name)));
  if (child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./invariant":108,"./traverseAllChildren":128}],98:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],99:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],100:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

/**
 * Normalization of deprecated HTML5 "key" values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy "which/keyCode" to HTML5 "key"
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  return 'key' in nativeEvent ?
    normalizeKey[nativeEvent.key] || nativeEvent.key :
    translateToKey[nativeEvent.which || nativeEvent.keyCode] || 'Unidentified';
}

module.exports = getEventKey;

},{}],101:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],102:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var invariant = require("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":20,"./invariant":108}],103:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],104:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],105:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.createElement('div') ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":20}],106:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],107:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],108:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition) {
  if (!condition) {
    var error = new Error(
      'Minified exception occured; use the non-minified dev environment for ' +
      'the full error message and additional helpful warnings.'
    );
    error.framesToPop = 1;
    throw error;
  }
};

if ("production" !== "development") {
  invariant = function(condition, format, a, b, c, d, e, f) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }

    if (!condition) {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      var error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  };
}

module.exports = invariant;

},{}],109:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":20}],110:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node !== 'undefined' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],111:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],112:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = require("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":110}],113:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      nextClass && (className += ' ' + nextClass);
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],114:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":108}],115:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],116:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],117:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule merge
 */

"use strict";

var mergeInto = require("./mergeInto");

/**
 * Shallow merges two structures into a return value, without mutating either.
 *
 * @param {?object} one Optional object with properties to merge from.
 * @param {?object} two Optional object with properties to merge from.
 * @return {object} The shallow extension of one by two.
 */
var merge = function(one, two) {
  var result = {};
  mergeInto(result, one);
  mergeInto(result, two);
  return result;
};

module.exports = merge;

},{"./mergeInto":119}],118:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule mergeHelpers
 *
 * requiresPolyfills: Array.isArray
 */

"use strict";

var invariant = require("./invariant");
var keyMirror = require("./keyMirror");

/**
 * Maximum number of levels to traverse. Will catch circular structures.
 * @const
 */
var MAX_MERGE_DEPTH = 36;

/**
 * We won't worry about edge cases like new String('x') or new Boolean(true).
 * Functions are considered terminals, and arrays are not.
 * @param {*} o The item/object/value to test.
 * @return {boolean} true iff the argument is a terminal.
 */
var isTerminal = function(o) {
  return typeof o !== 'object' || o === null;
};

var mergeHelpers = {

  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,

  isTerminal: isTerminal,

  /**
   * Converts null/undefined values into empty object.
   *
   * @param {?Object=} arg Argument to be normalized (nullable optional)
   * @return {!Object}
   */
  normalizeMergeArg: function(arg) {
    return arg === undefined || arg === null ? {} : arg;
  },

  /**
   * If merging Arrays, a merge strategy *must* be supplied. If not, it is
   * likely the caller's fault. If this function is ever called with anything
   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.
   *
   * @param {*} one Array to merge into.
   * @param {*} two Array to merge from.
   */
  checkMergeArrayArgs: function(one, two) {
    ("production" !== "development" ? invariant(
      Array.isArray(one) && Array.isArray(two),
      'Tried to merge arrays, instead got %s and %s.',
      one,
      two
    ) : invariant(Array.isArray(one) && Array.isArray(two)));
  },

  /**
   * @param {*} one Object to merge into.
   * @param {*} two Object to merge from.
   */
  checkMergeObjectArgs: function(one, two) {
    mergeHelpers.checkMergeObjectArg(one);
    mergeHelpers.checkMergeObjectArg(two);
  },

  /**
   * @param {*} arg
   */
  checkMergeObjectArg: function(arg) {
    ("production" !== "development" ? invariant(
      !isTerminal(arg) && !Array.isArray(arg),
      'Tried to merge an object, instead got %s.',
      arg
    ) : invariant(!isTerminal(arg) && !Array.isArray(arg)));
  },

  /**
   * Checks that a merge was not given a circular object or an object that had
   * too great of depth.
   *
   * @param {number} Level of recursion to validate against maximum.
   */
  checkMergeLevel: function(level) {
    ("production" !== "development" ? invariant(
      level < MAX_MERGE_DEPTH,
      'Maximum deep merge depth exceeded. You may be attempting to merge ' +
      'circular structures in an unsupported way.'
    ) : invariant(level < MAX_MERGE_DEPTH));
  },

  /**
   * Checks that the supplied merge strategy is valid.
   *
   * @param {string} Array merge strategy.
   */
  checkArrayStrategy: function(strategy) {
    ("production" !== "development" ? invariant(
      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,
      'You must provide an array strategy to deep merge functions to ' +
      'instruct the deep merge how to resolve merging two arrays.'
    ) : invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies));
  },

  /**
   * Set of possible behaviors of merge algorithms when encountering two Arrays
   * that must be merged together.
   * - `clobber`: The left `Array` is ignored.
   * - `indexByIndex`: The result is achieved by recursively deep merging at
   *   each index. (not yet supported.)
   */
  ArrayStrategies: keyMirror({
    Clobber: true,
    IndexByIndex: true
  })

};

module.exports = mergeHelpers;

},{"./invariant":108,"./keyMirror":114}],119:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule mergeInto
 * @typechecks static-only
 */

"use strict";

var mergeHelpers = require("./mergeHelpers");

var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;

/**
 * Shallow merges two structures by mutating the first parameter.
 *
 * @param {object} one Object to be merged into.
 * @param {?object} two Optional object with properties to merge from.
 */
function mergeInto(one, two) {
  checkMergeObjectArg(one);
  if (two != null) {
    checkMergeObjectArg(two);
    for (var key in two) {
      if (!two.hasOwnProperty(key)) {
        continue;
      }
      one[key] = two[key];
    }
  }
}

module.exports = mergeInto;

},{"./mergeHelpers":118}],120:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule mixInto
 */

"use strict";

/**
 * Simply copies properties to the prototype.
 */
var mixInto = function(constructor, methodBag) {
  var methodName;
  for (methodName in methodBag) {
    if (!methodBag.hasOwnProperty(methodName)) {
      continue;
    }
    constructor.prototype[methodName] = methodBag[methodName];
  }
};

module.exports = mixInto;

},{}],121:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule objMap
 */

"use strict";

/**
 * For each key/value pair, invokes callback func and constructs a resulting
 * object which contains, for every key in obj, values that are the result of
 * of invoking the function:
 *
 *   func(value, key, iteration)
 *
 * @param {?object} obj Object to map keys over
 * @param {function} func Invoked for each key/val pair.
 * @param {?*} context
 * @return {?object} Result of mapping or null if obj is falsey
 */
function objMap(obj, func, context) {
  if (!obj) {
    return null;
  }
  var i = 0;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      ret[key] = func.call(context, obj[key], key, i++);
    }
  }
  return ret;
}

module.exports = objMap;

},{}],122:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule objMapKeyVal
 */

"use strict";

/**
 * Behaves the same as `objMap` but invokes func with the key first, and value
 * second. Use `objMap` unless you need this special case.
 * Invokes func as:
 *
 *   func(key, value, iteration)
 *
 * @param {?object} obj Object to map keys over
 * @param {!function} func Invoked for each key/val pair.
 * @param {?*} context
 * @return {?object} Result of mapping or null if obj is falsey
 */
function objMapKeyVal(obj, func, context) {
  if (!obj) {
    return null;
  }
  var i = 0;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      ret[key] = func.call(context, key, obj[key], i++);
    }
  }
  return ret;
}

module.exports = objMapKeyVal;

},{}],123:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactComponent = require("./ReactComponent");

var invariant = require("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactComponent.isValidComponent(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactComponent.isValidComponent(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactComponent":26,"./invariant":108}],124:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule performanceNow
 * @typechecks static-only
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

/**
 * Detect if we can use window.performance.now() and gracefully
 * fallback to Date.now() if it doesn't exist.
 * We need to support Firefox < 15 for now due to Facebook's webdriver
 * infrastructure.
 */
var performance = null;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.webkitPerformance;
}

if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./ExecutionEnvironment":20}],125:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B'a keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],126:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevComponent` and `nextComponent`, determines if `prevComponent`
 * should be updated as opposed to being destroyed or replaced.
 *
 * @param {?object} prevComponent
 * @param {?object} nextComponent
 * @return {boolean} True if `prevComponent` should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevComponent, nextComponent) {
  // TODO: Remove warning after a release.
  if (prevComponent && nextComponent &&
      prevComponent.constructor === nextComponent.constructor && (
        (prevComponent.props && prevComponent.props.key) ===
        (nextComponent.props && nextComponent.props.key)
      )) {
    if (prevComponent._owner === nextComponent._owner) {
      return true;
    } else {
      if ("production" !== "development") {
        if (prevComponent.state) {
          console.warn(
            'A recent change to React has been found to impact your code. ' +
            'A mounted component will now be unmounted and replaced by a ' +
            'component (of the same class) if their owners are different. ' +
            'Previously, ownership was not considered when updating.',
            prevComponent,
            nextComponent
          );
        }
      }
    }
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],127:[function(require,module,exports){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":108}],128:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactTextComponent = require("./ReactTextComponent");

var invariant = require("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.props && component.props.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.props.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        var nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        var nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (children.mountComponentIntoNode) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else {
        if (type === 'object') {
          ("production" !== "development" ? invariant(
            !children || children.nodeType !== 1,
            'traverseAllChildren(...): Encountered an invalid child; DOM ' +
            'elements are not valid children of React components.'
          ) : invariant(!children || children.nodeType !== 1));
          for (var key in children) {
            if (children.hasOwnProperty(key)) {
              subtreeCount += traverseAllChildrenImpl(
                children[key],
                (
                  nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
                  wrapUserProvidedKey(key) + SUBSEPARATOR +
                  getComponentKey(children[key], 0)
                ),
                indexSoFar + subtreeCount,
                callback,
                traverseContext
              );
            }
          }
        } else if (type === 'string') {
          var normalizedText = new ReactTextComponent(children);
          callback(traverseContext, normalizedText, storageName, indexSoFar);
          subtreeCount += 1;
        } else if (type === 'number') {
          var normalizedNumber = new ReactTextComponent('' + children);
          callback(traverseContext, normalizedNumber, storageName, indexSoFar);
          subtreeCount += 1;
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children !== null && children !== undefined) {
    traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
  }
}

module.exports = traverseAllChildren;

},{"./ReactInstanceHandles":53,"./ReactTextComponent":69,"./invariant":108}],129:[function(require,module,exports){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = require("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {var args=Array.prototype.slice.call(arguments,2);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":95}]},{},[24])
(24)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_DEFINES;
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && opt_object !== undefined) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.DEBUG) {
    if (!caller) {
      throw Error("arguments.caller not defined.  goog.base() expects not " + "to be running in strict mode. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
    }
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;").replace(goog.string.singleQuoteRe_, "\x26#39;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.singleQuoteRe_, "\x26#39;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /"/g;
goog.string.singleQuoteRe_ = /'/g;
goog.string.allRe_ = /[&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2227";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__15860__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__15860 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15860__delegate.call(this, args);
    };
    G__15860.cljs$lang$maxFixedArity = 0;
    G__15860.cljs$lang$applyTo = function(arglist__15861) {
      var args = cljs.core.seq(arglist__15861);
      return G__15860__delegate(args);
    };
    G__15860.cljs$core$IFn$_invoke$arity$variadic = G__15860__delegate;
    return G__15860;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3529__auto__ = ty;
    if (cljs.core.truth_(and__3529__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3529__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4397__auto___15862 = len;
  var i_15863 = 0;
  while (true) {
    if (i_15863 < n__4397__auto___15862) {
      new_arr[i_15863] = arr[i_15863];
      var G__15864 = i_15863 + 1;
      i_15863 = G__15864;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__15865__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__15865 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15865__delegate.call(this, array, i, idxs);
    };
    G__15865.cljs$lang$maxFixedArity = 2;
    G__15865.cljs$lang$applyTo = function(arglist__15866) {
      var array = cljs.core.first(arglist__15866);
      arglist__15866 = cljs.core.next(arglist__15866);
      var i = cljs.core.first(arglist__15866);
      var idxs = cljs.core.rest(arglist__15866);
      return G__15865__delegate(array, i, idxs);
    };
    G__15865.cljs$core$IFn$_invoke$arity$variadic = G__15865__delegate;
    return G__15865;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__15867__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__15867 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15867__delegate.call(this, array, idx, idx2, idxv);
    };
    G__15867.cljs$lang$maxFixedArity = 3;
    G__15867.cljs$lang$applyTo = function(arglist__15868) {
      var array = cljs.core.first(arglist__15868);
      arglist__15868 = cljs.core.next(arglist__15868);
      var idx = cljs.core.first(arglist__15868);
      arglist__15868 = cljs.core.next(arglist__15868);
      var idx2 = cljs.core.first(arglist__15868);
      var idxv = cljs.core.rest(arglist__15868);
      return G__15867__delegate(array, idx, idx2, idxv);
    };
    G__15867.cljs$core$IFn$_invoke$arity$variadic = G__15867__delegate;
    return G__15867;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj15870 = {};
  return obj15870;
}();
cljs.core.IFn = function() {
  var obj15872 = {};
  return obj15872;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = cljs.core._invoke[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._invoke["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj15874 = {};
  return obj15874;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3529__auto__ = value;
    if (and__3529__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4168__auto__ = value == null ? null : value;
    return function() {
      var or__3541__auto__ = cljs.core._clone[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._clone["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj15876 = {};
  return obj15876;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._count[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._count["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj15878 = {};
  return obj15878;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._empty[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._empty["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj15880 = {};
  return obj15880;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._conj[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._conj["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj15882 = {};
  return obj15882;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3529__auto__ = coll;
      if (and__3529__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4168__auto__ = coll == null ? null : coll;
      return function() {
        var or__3541__auto__ = cljs.core._nth[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._nth["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3529__auto__ = coll;
      if (and__3529__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4168__auto__ = coll == null ? null : coll;
      return function() {
        var or__3541__auto__ = cljs.core._nth[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._nth["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj15884 = {};
  return obj15884;
}();
cljs.core.ISeq = function() {
  var obj15886 = {};
  return obj15886;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._first[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._first["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._rest[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._rest["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj15888 = {};
  return obj15888;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._next[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._next["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj15890 = {};
  return obj15890;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3529__auto__ = o;
      if (and__3529__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4168__auto__ = o == null ? null : o;
      return function() {
        var or__3541__auto__ = cljs.core._lookup[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._lookup["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3529__auto__ = o;
      if (and__3529__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4168__auto__ = o == null ? null : o;
      return function() {
        var or__3541__auto__ = cljs.core._lookup[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._lookup["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj15892 = {};
  return obj15892;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._assoc[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._assoc["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj15894 = {};
  return obj15894;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._dissoc[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._dissoc["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj15896 = {};
  return obj15896;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._key[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._key["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._val[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._val["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj15898 = {};
  return obj15898;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._disjoin[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._disjoin["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj15900 = {};
  return obj15900;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._peek[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._peek["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._pop[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._pop["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj15902 = {};
  return obj15902;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._assoc_n[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj15904 = {};
  return obj15904;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3529__auto__ = o;
    if (and__3529__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4168__auto__ = o == null ? null : o;
    return function() {
      var or__3541__auto__ = cljs.core._deref[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._deref["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj15906 = {};
  return obj15906;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3529__auto__ = o;
    if (and__3529__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4168__auto__ = o == null ? null : o;
    return function() {
      var or__3541__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj15908 = {};
  return obj15908;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3529__auto__ = o;
    if (and__3529__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4168__auto__ = o == null ? null : o;
    return function() {
      var or__3541__auto__ = cljs.core._meta[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._meta["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj15910 = {};
  return obj15910;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3529__auto__ = o;
    if (and__3529__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4168__auto__ = o == null ? null : o;
    return function() {
      var or__3541__auto__ = cljs.core._with_meta[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._with_meta["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj15912 = {};
  return obj15912;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3529__auto__ = coll;
      if (and__3529__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4168__auto__ = coll == null ? null : coll;
      return function() {
        var or__3541__auto__ = cljs.core._reduce[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._reduce["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3529__auto__ = coll;
      if (and__3529__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4168__auto__ = coll == null ? null : coll;
      return function() {
        var or__3541__auto__ = cljs.core._reduce[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._reduce["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj15914 = {};
  return obj15914;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj15916 = {};
  return obj15916;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3529__auto__ = o;
    if (and__3529__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4168__auto__ = o == null ? null : o;
    return function() {
      var or__3541__auto__ = cljs.core._equiv[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._equiv["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj15918 = {};
  return obj15918;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3529__auto__ = o;
    if (and__3529__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4168__auto__ = o == null ? null : o;
    return function() {
      var or__3541__auto__ = cljs.core._hash[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._hash["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj15920 = {};
  return obj15920;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3529__auto__ = o;
    if (and__3529__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4168__auto__ = o == null ? null : o;
    return function() {
      var or__3541__auto__ = cljs.core._seq[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._seq["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj15922 = {};
  return obj15922;
}();
cljs.core.IList = function() {
  var obj15924 = {};
  return obj15924;
}();
cljs.core.IRecord = function() {
  var obj15926 = {};
  return obj15926;
}();
cljs.core.IReversible = function() {
  var obj15928 = {};
  return obj15928;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._rseq[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._rseq["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj15930 = {};
  return obj15930;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._entry_key[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._entry_key["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._comparator[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._comparator["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj15932 = {};
  return obj15932;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3529__auto__ = writer;
    if (and__3529__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4168__auto__ = writer == null ? null : writer;
    return function() {
      var or__3541__auto__ = cljs.core._write[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._write["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3529__auto__ = writer;
    if (and__3529__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4168__auto__ = writer == null ? null : writer;
    return function() {
      var or__3541__auto__ = cljs.core._flush[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._flush["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj15934 = {};
  return obj15934;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3529__auto__ = o;
    if (and__3529__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4168__auto__ = o == null ? null : o;
    return function() {
      var or__3541__auto__ = cljs.core._pr_writer[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj15936 = {};
  return obj15936;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3529__auto__ = d;
    if (and__3529__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4168__auto__ = d == null ? null : d;
    return function() {
      var or__3541__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj15938 = {};
  return obj15938;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = cljs.core._notify_watches[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = cljs.core._add_watch[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._add_watch["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = cljs.core._remove_watch[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj15940 = {};
  return obj15940;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._as_transient[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._as_transient["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj15942 = {};
  return obj15942;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3529__auto__ = tcoll;
    if (and__3529__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4168__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3541__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3529__auto__ = tcoll;
    if (and__3529__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4168__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3541__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj15944 = {};
  return obj15944;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3529__auto__ = tcoll;
    if (and__3529__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4168__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3541__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj15946 = {};
  return obj15946;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3529__auto__ = tcoll;
    if (and__3529__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4168__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3541__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj15948 = {};
  return obj15948;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3529__auto__ = tcoll;
    if (and__3529__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4168__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3541__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3529__auto__ = tcoll;
    if (and__3529__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4168__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3541__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj15950 = {};
  return obj15950;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3529__auto__ = tcoll;
    if (and__3529__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4168__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3541__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj15952 = {};
  return obj15952;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3529__auto__ = x;
    if (and__3529__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4168__auto__ = x == null ? null : x;
    return function() {
      var or__3541__auto__ = cljs.core._compare[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._compare["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj15954 = {};
  return obj15954;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._drop_first[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._drop_first["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj15956 = {};
  return obj15956;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._chunked_first[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj15958 = {};
  return obj15958;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3529__auto__ = coll;
    if (and__3529__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4168__auto__ = coll == null ? null : coll;
    return function() {
      var or__3541__auto__ = cljs.core._chunked_next[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj15960 = {};
  return obj15960;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3529__auto__ = x;
    if (and__3529__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4168__auto__ = x == null ? null : x;
    return function() {
      var or__3541__auto__ = cljs.core._name[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._name["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3529__auto__ = x;
    if (and__3529__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4168__auto__ = x == null ? null : x;
    return function() {
      var or__3541__auto__ = cljs.core._namespace[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._namespace["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3529__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3529__auto__) {
        return b.ns;
      } else {
        return and__3529__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3952__auto__ = self__._hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__15962 = null;
  var G__15962__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__15962__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__15962 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15962__2.call(this, self__, coll);
      case 3:
        return G__15962__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15962;
}();
cljs.core.Symbol.prototype.apply = function(self__, args15961) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15961)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__15964 = value;
  if (G__15964) {
    var bit__4191__auto__ = G__15964.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4191__auto__ || G__15964.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__15964.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15964);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15964);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15966 = coll;
      if (G__15966) {
        var bit__4184__auto__ = G__15966.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4184__auto__ || G__15966.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15968 = coll;
      if (G__15968) {
        var bit__4184__auto__ = G__15968.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4184__auto__ || G__15968.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15970 = coll;
      if (G__15970) {
        var bit__4184__auto__ = G__15970.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4184__auto__ || G__15970.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15972 = coll;
      if (G__15972) {
        var bit__4184__auto__ = G__15972.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4184__auto__ || G__15972.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__15973__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__15974 = y;
            var G__15975 = cljs.core.first.call(null, more);
            var G__15976 = cljs.core.next.call(null, more);
            x = G__15974;
            y = G__15975;
            more = G__15976;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15973 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15973__delegate.call(this, x, y, more);
    };
    G__15973.cljs$lang$maxFixedArity = 2;
    G__15973.cljs$lang$applyTo = function(arglist__15977) {
      var x = cljs.core.first(arglist__15977);
      arglist__15977 = cljs.core.next(arglist__15977);
      var y = cljs.core.first(arglist__15977);
      var more = cljs.core.rest(arglist__15977);
      return G__15973__delegate(x, y, more);
    };
    G__15973.cljs$core$IFn$_invoke$arity$variadic = G__15973__delegate;
    return G__15973;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15978 = nval;
            var G__15979 = n + 1;
            val = G__15978;
            n = G__15979;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15980 = nval;
          var G__15981 = n + 1;
          val__$1 = G__15980;
          n = G__15981;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15982 = nval;
          var G__15983 = n + 1;
          val__$1 = G__15982;
          n = G__15983;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15984 = nval;
            var G__15985 = n + 1;
            val = G__15984;
            n = G__15985;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15986 = nval;
          var G__15987 = n + 1;
          val__$1 = G__15986;
          n = G__15987;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15988 = nval;
          var G__15989 = n + 1;
          val__$1 = G__15988;
          n = G__15989;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__15991 = x;
  if (G__15991) {
    var bit__4191__auto__ = G__15991.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4191__auto__ || G__15991.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__15991.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15991);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15991);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__15993 = x;
  if (G__15993) {
    var bit__4191__auto__ = G__15993.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4191__auto__ || G__15993.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__15993.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15993);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15993);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__15994 = sn;
      s = G__15994;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__15995__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__15996 = conj.call(null, coll, x);
          var G__15997 = cljs.core.first.call(null, xs);
          var G__15998 = cljs.core.next.call(null, xs);
          coll = G__15996;
          x = G__15997;
          xs = G__15998;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__15995 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15995__delegate.call(this, coll, x, xs);
    };
    G__15995.cljs$lang$maxFixedArity = 2;
    G__15995.cljs$lang$applyTo = function(arglist__15999) {
      var coll = cljs.core.first(arglist__15999);
      arglist__15999 = cljs.core.next(arglist__15999);
      var x = cljs.core.first(arglist__15999);
      var xs = cljs.core.rest(arglist__15999);
      return G__15995__delegate(coll, x, xs);
    };
    G__15995.cljs$core$IFn$_invoke$arity$variadic = G__15995__delegate;
    return G__15995;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__16000 = cljs.core.next.call(null, s);
      var G__16001 = acc + 1;
      s = G__16000;
      acc = G__16001;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16003 = coll;
      if (G__16003) {
        var bit__4184__auto__ = G__16003.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4184__auto__ || G__16003.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__16004 = cljs.core.next.call(null, coll);
              var G__16005 = n - 1;
              coll = G__16004;
              n = G__16005;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__16006 = cljs.core.next.call(null, coll);
              var G__16007 = n - 1;
              var G__16008 = not_found;
              coll = G__16006;
              n = G__16007;
              not_found = G__16008;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__16013 = coll;
          if (G__16013) {
            var bit__4184__auto__ = G__16013.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4184__auto__ || G__16013.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__16014 = coll;
                  if (G__16014) {
                    var bit__4191__auto__ = G__16014.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4191__auto__ || G__16014.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__16014.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16014);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16014);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__16015 = coll;
          if (G__16015) {
            var bit__4184__auto__ = G__16015.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4184__auto__ || G__16015.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__16016 = coll;
                  if (G__16016) {
                    var bit__4191__auto__ = G__16016.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4191__auto__ || G__16016.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__16016.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16016);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16016);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__16019 = o;
        if (G__16019) {
          var bit__4184__auto__ = G__16019.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4184__auto__ || G__16019.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__16020 = o;
        if (G__16020) {
          var bit__4184__auto__ = G__16020.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4184__auto__ || G__16020.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__16021__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__16022 = ret;
          var G__16023 = cljs.core.first.call(null, kvs);
          var G__16024 = cljs.core.second.call(null, kvs);
          var G__16025 = cljs.core.nnext.call(null, kvs);
          coll = G__16022;
          k = G__16023;
          v = G__16024;
          kvs = G__16025;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__16021 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16021__delegate.call(this, coll, k, v, kvs);
    };
    G__16021.cljs$lang$maxFixedArity = 3;
    G__16021.cljs$lang$applyTo = function(arglist__16026) {
      var coll = cljs.core.first(arglist__16026);
      arglist__16026 = cljs.core.next(arglist__16026);
      var k = cljs.core.first(arglist__16026);
      arglist__16026 = cljs.core.next(arglist__16026);
      var v = cljs.core.first(arglist__16026);
      var kvs = cljs.core.rest(arglist__16026);
      return G__16021__delegate(coll, k, v, kvs);
    };
    G__16021.cljs$core$IFn$_invoke$arity$variadic = G__16021__delegate;
    return G__16021;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__16027__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__16028 = ret;
            var G__16029 = cljs.core.first.call(null, ks);
            var G__16030 = cljs.core.next.call(null, ks);
            coll = G__16028;
            k = G__16029;
            ks = G__16030;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__16027 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16027__delegate.call(this, coll, k, ks);
    };
    G__16027.cljs$lang$maxFixedArity = 2;
    G__16027.cljs$lang$applyTo = function(arglist__16031) {
      var coll = cljs.core.first(arglist__16031);
      arglist__16031 = cljs.core.next(arglist__16031);
      var k = cljs.core.first(arglist__16031);
      var ks = cljs.core.rest(arglist__16031);
      return G__16027__delegate(coll, k, ks);
    };
    G__16027.cljs$core$IFn$_invoke$arity$variadic = G__16027__delegate;
    return G__16027;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3541__auto__ = goog.isFunction(f);
  if (or__3541__auto__) {
    return or__3541__auto__;
  } else {
    var G__16035 = f;
    if (G__16035) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto____$1 = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto____$1)) {
          return or__3541__auto____$1;
        } else {
          return G__16035.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__16035.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__16035);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__16035);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__16043 = o;
    if (G__16043) {
      var bit__4191__auto__ = G__16043.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4191__auto__ || G__16043.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__16043.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__16043);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__16043);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t16044 !== "undefined") {
      } else {
        cljs.core.t16044 = function(meta, o, with_meta, meta16045) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta16045 = meta16045;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t16044.cljs$lang$type = true;
        cljs.core.t16044.cljs$lang$ctorStr = "cljs.core/t16044";
        cljs.core.t16044.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
          return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/t16044");
        };
        cljs.core.t16044.prototype.call = function() {
          var G__16048__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__16048 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__16048__delegate.call(this, self__, args);
          };
          G__16048.cljs$lang$maxFixedArity = 1;
          G__16048.cljs$lang$applyTo = function(arglist__16049) {
            var self__ = cljs.core.first(arglist__16049);
            var args = cljs.core.rest(arglist__16049);
            return G__16048__delegate(self__, args);
          };
          G__16048.cljs$core$IFn$_invoke$arity$variadic = G__16048__delegate;
          return G__16048;
        }();
        cljs.core.t16044.prototype.apply = function(self__, args16047) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16047)));
        };
        cljs.core.t16044.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__16050__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__16050 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__16050__delegate.call(this, args);
          };
          G__16050.cljs$lang$maxFixedArity = 0;
          G__16050.cljs$lang$applyTo = function(arglist__16051) {
            var args = cljs.core.seq(arglist__16051);
            return G__16050__delegate(args);
          };
          G__16050.cljs$core$IFn$_invoke$arity$variadic = G__16050__delegate;
          return G__16050;
        }();
        cljs.core.t16044.prototype.cljs$core$Fn$ = true;
        cljs.core.t16044.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16046) {
          var self__ = this;
          var _16046__$1 = this;
          return self__.meta16045;
        };
        cljs.core.t16044.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16046, meta16045__$1) {
          var self__ = this;
          var _16046__$1 = this;
          return new cljs.core.t16044(self__.meta, self__.o, self__.with_meta, meta16045__$1);
        };
        cljs.core.__GT_t16044 = function __GT_t16044(meta__$1, o__$1, with_meta__$1, meta16045) {
          return new cljs.core.t16044(meta__$1, o__$1, with_meta__$1, meta16045);
        };
      }
      return new cljs.core.t16044(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3529__auto__ = !(o == null);
    if (and__3529__auto__) {
      var G__16055 = o;
      if (G__16055) {
        var bit__4191__auto__ = G__16055.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4191__auto__ || G__16055.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__16055.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16055);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16055);
      }
    } else {
      return and__3529__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__16056__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__16057 = ret;
            var G__16058 = cljs.core.first.call(null, ks);
            var G__16059 = cljs.core.next.call(null, ks);
            coll = G__16057;
            k = G__16058;
            ks = G__16059;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__16056 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16056__delegate.call(this, coll, k, ks);
    };
    G__16056.cljs$lang$maxFixedArity = 2;
    G__16056.cljs$lang$applyTo = function(arglist__16060) {
      var coll = cljs.core.first(arglist__16060);
      arglist__16060 = cljs.core.next(arglist__16060);
      var k = cljs.core.first(arglist__16060);
      var ks = cljs.core.rest(arglist__16060);
      return G__16056__delegate(coll, k, ks);
    };
    G__16056.cljs$core$IFn$_invoke$arity$variadic = G__16056__delegate;
    return G__16056;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj16062 = {};
  return obj16062;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj16066 = {};
      return obj16066;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__16068 = o;
    if (G__16068) {
      var bit__4184__auto__ = G__16068.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4184__auto__ || G__16068.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16070 = x;
    if (G__16070) {
      var bit__4191__auto__ = G__16070.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4191__auto__ || G__16070.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__16070.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__16070);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__16070);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16072 = x;
    if (G__16072) {
      var bit__4191__auto__ = G__16072.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4191__auto__ || G__16072.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__16072.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__16072);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__16072);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__16074 = x;
  if (G__16074) {
    var bit__4191__auto__ = G__16074.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4191__auto__ || G__16074.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__16074.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__16074);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__16074);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__16076 = x;
  if (G__16076) {
    var bit__4191__auto__ = G__16076.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4191__auto__ || G__16076.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__16076.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__16076);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__16076);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__16078 = x;
  if (G__16078) {
    var bit__4191__auto__ = G__16078.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4191__auto__ || G__16078.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__16078.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__16078);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__16078);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__16080 = x;
  if (G__16080) {
    var bit__4191__auto__ = G__16080.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4191__auto__ || G__16080.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__16080.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__16080);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__16080);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16082 = x;
    if (G__16082) {
      var bit__4191__auto__ = G__16082.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4191__auto__ || G__16082.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__16082.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__16082);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__16082);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__16084 = x;
  if (G__16084) {
    var bit__4191__auto__ = G__16084.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4191__auto__ || G__16084.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__16084.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__16084);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__16084);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__16086 = x;
  if (G__16086) {
    var bit__4184__auto__ = G__16086.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4184__auto__ || G__16086.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj16090 = {};
    return obj16090;
  };
  var js_obj__1 = function() {
    var G__16091__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__16091 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16091__delegate.call(this, keyvals);
    };
    G__16091.cljs$lang$maxFixedArity = 0;
    G__16091.cljs$lang$applyTo = function(arglist__16092) {
      var keyvals = cljs.core.seq(arglist__16092);
      return G__16091__delegate(keyvals);
    };
    G__16091.cljs$core$IFn$_invoke$arity$variadic = G__16091__delegate;
    return G__16091;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16093 = i__$1 + 1;
      var G__16094 = j__$1 + 1;
      var G__16095 = len__$1 - 1;
      i__$1 = G__16093;
      j__$1 = G__16094;
      len__$1 = G__16095;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16096 = i__$1 - 1;
      var G__16097 = j__$1 - 1;
      var G__16098 = len__$1 - 1;
      i__$1 = G__16096;
      j__$1 = G__16097;
      len__$1 = G__16098;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj16100 = {};
  return obj16100;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__16102 = s;
    if (G__16102) {
      var bit__4191__auto__ = G__16102.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4191__auto__ || G__16102.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__16102.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16102);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16102);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__16104 = s;
  if (G__16104) {
    var bit__4191__auto__ = G__16104.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4191__auto__ || G__16104.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__16104.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__16104);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__16104);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3541__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3541__auto__) {
    return or__3541__auto__;
  } else {
    var G__16108 = f;
    if (G__16108) {
      var bit__4191__auto__ = G__16108.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4191__auto__ || G__16108.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__16108.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__16108);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__16108);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__16109__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__16110 = cljs.core.conj.call(null, s, x__$1);
              var G__16111 = etc;
              s = G__16110;
              xs = G__16111;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__16109 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16109__delegate.call(this, x, y, more);
    };
    G__16109.cljs$lang$maxFixedArity = 2;
    G__16109.cljs$lang$applyTo = function(arglist__16112) {
      var x = cljs.core.first(arglist__16112);
      arglist__16112 = cljs.core.next(arglist__16112);
      var y = cljs.core.first(arglist__16112);
      var more = cljs.core.rest(arglist__16112);
      return G__16109__delegate(x, y, more);
    };
    G__16109.cljs$core$IFn$_invoke$arity$variadic = G__16109__delegate;
    return G__16109;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3541__auto__ = cljs.core.seq.call(null, coll);
    if (or__3541__auto__) {
      return or__3541__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__16114 = x;
            if (G__16114) {
              var bit__4184__auto__ = G__16114.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4184__auto__ || G__16114.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__16115 = xs;
        var G__16116 = ys;
        var G__16117 = len;
        var G__16118 = n + 1;
        xs = G__16115;
        ys = G__16116;
        len = G__16117;
        n = G__16118;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16119 = nval;
          var G__16120 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__16119;
          coll__$1 = G__16120;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__16123 = coll;
      if (G__16123) {
        var bit__4184__auto__ = G__16123.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4184__auto__ || G__16123.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__16124 = coll;
      if (G__16124) {
        var bit__4184__auto__ = G__16124.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4184__auto__ || G__16124.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__16125__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__16125 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16125__delegate.call(this, x, y, more);
    };
    G__16125.cljs$lang$maxFixedArity = 2;
    G__16125.cljs$lang$applyTo = function(arglist__16126) {
      var x = cljs.core.first(arglist__16126);
      arglist__16126 = cljs.core.next(arglist__16126);
      var y = cljs.core.first(arglist__16126);
      var more = cljs.core.rest(arglist__16126);
      return G__16125__delegate(x, y, more);
    };
    G__16125.cljs$core$IFn$_invoke$arity$variadic = G__16125__delegate;
    return G__16125;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__16127__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__16127 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16127__delegate.call(this, x, y, more);
    };
    G__16127.cljs$lang$maxFixedArity = 2;
    G__16127.cljs$lang$applyTo = function(arglist__16128) {
      var x = cljs.core.first(arglist__16128);
      arglist__16128 = cljs.core.next(arglist__16128);
      var y = cljs.core.first(arglist__16128);
      var more = cljs.core.rest(arglist__16128);
      return G__16127__delegate(x, y, more);
    };
    G__16127.cljs$core$IFn$_invoke$arity$variadic = G__16127__delegate;
    return G__16127;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__16129__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__16129 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16129__delegate.call(this, x, y, more);
    };
    G__16129.cljs$lang$maxFixedArity = 2;
    G__16129.cljs$lang$applyTo = function(arglist__16130) {
      var x = cljs.core.first(arglist__16130);
      arglist__16130 = cljs.core.next(arglist__16130);
      var y = cljs.core.first(arglist__16130);
      var more = cljs.core.rest(arglist__16130);
      return G__16129__delegate(x, y, more);
    };
    G__16129.cljs$core$IFn$_invoke$arity$variadic = G__16129__delegate;
    return G__16129;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__16131__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__16131 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16131__delegate.call(this, x, y, more);
    };
    G__16131.cljs$lang$maxFixedArity = 2;
    G__16131.cljs$lang$applyTo = function(arglist__16132) {
      var x = cljs.core.first(arglist__16132);
      arglist__16132 = cljs.core.next(arglist__16132);
      var y = cljs.core.first(arglist__16132);
      var more = cljs.core.rest(arglist__16132);
      return G__16131__delegate(x, y, more);
    };
    G__16131.cljs$core$IFn$_invoke$arity$variadic = G__16131__delegate;
    return G__16131;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__16133__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__16134 = y;
            var G__16135 = cljs.core.first.call(null, more);
            var G__16136 = cljs.core.next.call(null, more);
            x = G__16134;
            y = G__16135;
            more = G__16136;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16133 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16133__delegate.call(this, x, y, more);
    };
    G__16133.cljs$lang$maxFixedArity = 2;
    G__16133.cljs$lang$applyTo = function(arglist__16137) {
      var x = cljs.core.first(arglist__16137);
      arglist__16137 = cljs.core.next(arglist__16137);
      var y = cljs.core.first(arglist__16137);
      var more = cljs.core.rest(arglist__16137);
      return G__16133__delegate(x, y, more);
    };
    G__16133.cljs$core$IFn$_invoke$arity$variadic = G__16133__delegate;
    return G__16133;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__16138__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16139 = y;
            var G__16140 = cljs.core.first.call(null, more);
            var G__16141 = cljs.core.next.call(null, more);
            x = G__16139;
            y = G__16140;
            more = G__16141;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16138 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16138__delegate.call(this, x, y, more);
    };
    G__16138.cljs$lang$maxFixedArity = 2;
    G__16138.cljs$lang$applyTo = function(arglist__16142) {
      var x = cljs.core.first(arglist__16142);
      arglist__16142 = cljs.core.next(arglist__16142);
      var y = cljs.core.first(arglist__16142);
      var more = cljs.core.rest(arglist__16142);
      return G__16138__delegate(x, y, more);
    };
    G__16138.cljs$core$IFn$_invoke$arity$variadic = G__16138__delegate;
    return G__16138;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__16143__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__16144 = y;
            var G__16145 = cljs.core.first.call(null, more);
            var G__16146 = cljs.core.next.call(null, more);
            x = G__16144;
            y = G__16145;
            more = G__16146;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16143 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16143__delegate.call(this, x, y, more);
    };
    G__16143.cljs$lang$maxFixedArity = 2;
    G__16143.cljs$lang$applyTo = function(arglist__16147) {
      var x = cljs.core.first(arglist__16147);
      arglist__16147 = cljs.core.next(arglist__16147);
      var y = cljs.core.first(arglist__16147);
      var more = cljs.core.rest(arglist__16147);
      return G__16143__delegate(x, y, more);
    };
    G__16143.cljs$core$IFn$_invoke$arity$variadic = G__16143__delegate;
    return G__16143;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__16148__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16149 = y;
            var G__16150 = cljs.core.first.call(null, more);
            var G__16151 = cljs.core.next.call(null, more);
            x = G__16149;
            y = G__16150;
            more = G__16151;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16148 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16148__delegate.call(this, x, y, more);
    };
    G__16148.cljs$lang$maxFixedArity = 2;
    G__16148.cljs$lang$applyTo = function(arglist__16152) {
      var x = cljs.core.first(arglist__16152);
      arglist__16152 = cljs.core.next(arglist__16152);
      var y = cljs.core.first(arglist__16152);
      var more = cljs.core.rest(arglist__16152);
      return G__16148__delegate(x, y, more);
    };
    G__16148.cljs$core$IFn$_invoke$arity$variadic = G__16148__delegate;
    return G__16148;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3848__auto__ = x;
    var y__3849__auto__ = y;
    return x__3848__auto__ > y__3849__auto__ ? x__3848__auto__ : y__3849__auto__;
  };
  var max__3 = function() {
    var G__16153__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3848__auto__ = x;
        var y__3849__auto__ = y;
        return x__3848__auto__ > y__3849__auto__ ? x__3848__auto__ : y__3849__auto__;
      }(), more);
    };
    var G__16153 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16153__delegate.call(this, x, y, more);
    };
    G__16153.cljs$lang$maxFixedArity = 2;
    G__16153.cljs$lang$applyTo = function(arglist__16154) {
      var x = cljs.core.first(arglist__16154);
      arglist__16154 = cljs.core.next(arglist__16154);
      var y = cljs.core.first(arglist__16154);
      var more = cljs.core.rest(arglist__16154);
      return G__16153__delegate(x, y, more);
    };
    G__16153.cljs$core$IFn$_invoke$arity$variadic = G__16153__delegate;
    return G__16153;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3855__auto__ = x;
    var y__3856__auto__ = y;
    return x__3855__auto__ < y__3856__auto__ ? x__3855__auto__ : y__3856__auto__;
  };
  var min__3 = function() {
    var G__16155__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3855__auto__ = x;
        var y__3856__auto__ = y;
        return x__3855__auto__ < y__3856__auto__ ? x__3855__auto__ : y__3856__auto__;
      }(), more);
    };
    var G__16155 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16155__delegate.call(this, x, y, more);
    };
    G__16155.cljs$lang$maxFixedArity = 2;
    G__16155.cljs$lang$applyTo = function(arglist__16156) {
      var x = cljs.core.first(arglist__16156);
      arglist__16156 = cljs.core.next(arglist__16156);
      var y = cljs.core.first(arglist__16156);
      var more = cljs.core.rest(arglist__16156);
      return G__16155__delegate(x, y, more);
    };
    G__16155.cljs$core$IFn$_invoke$arity$variadic = G__16155__delegate;
    return G__16155;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__16157__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__16157 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16157__delegate.call(this, x, y, more);
    };
    G__16157.cljs$lang$maxFixedArity = 2;
    G__16157.cljs$lang$applyTo = function(arglist__16158) {
      var x = cljs.core.first(arglist__16158);
      arglist__16158 = cljs.core.next(arglist__16158);
      var y = cljs.core.first(arglist__16158);
      var more = cljs.core.rest(arglist__16158);
      return G__16157__delegate(x, y, more);
    };
    G__16157.cljs$core$IFn$_invoke$arity$variadic = G__16157__delegate;
    return G__16157;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__16159__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__16159 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16159__delegate.call(this, x, y, more);
    };
    G__16159.cljs$lang$maxFixedArity = 2;
    G__16159.cljs$lang$applyTo = function(arglist__16160) {
      var x = cljs.core.first(arglist__16160);
      arglist__16160 = cljs.core.next(arglist__16160);
      var y = cljs.core.first(arglist__16160);
      var more = cljs.core.rest(arglist__16160);
      return G__16159__delegate(x, y, more);
    };
    G__16159.cljs$core$IFn$_invoke$arity$variadic = G__16159__delegate;
    return G__16159;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__16161__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__16161 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16161__delegate.call(this, x, y, more);
    };
    G__16161.cljs$lang$maxFixedArity = 2;
    G__16161.cljs$lang$applyTo = function(arglist__16162) {
      var x = cljs.core.first(arglist__16162);
      arglist__16162 = cljs.core.next(arglist__16162);
      var y = cljs.core.first(arglist__16162);
      var more = cljs.core.rest(arglist__16162);
      return G__16161__delegate(x, y, more);
    };
    G__16161.cljs$core$IFn$_invoke$arity$variadic = G__16161__delegate;
    return G__16161;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__16163__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__16163 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16163__delegate.call(this, x, y, more);
    };
    G__16163.cljs$lang$maxFixedArity = 2;
    G__16163.cljs$lang$applyTo = function(arglist__16164) {
      var x = cljs.core.first(arglist__16164);
      arglist__16164 = cljs.core.next(arglist__16164);
      var y = cljs.core.first(arglist__16164);
      var more = cljs.core.rest(arglist__16164);
      return G__16163__delegate(x, y, more);
    };
    G__16163.cljs$core$IFn$_invoke$arity$variadic = G__16163__delegate;
    return G__16163;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__16165__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__16165 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16165__delegate.call(this, x, y, more);
    };
    G__16165.cljs$lang$maxFixedArity = 2;
    G__16165.cljs$lang$applyTo = function(arglist__16166) {
      var x = cljs.core.first(arglist__16166);
      arglist__16166 = cljs.core.next(arglist__16166);
      var y = cljs.core.first(arglist__16166);
      var more = cljs.core.rest(arglist__16166);
      return G__16165__delegate(x, y, more);
    };
    G__16165.cljs$core$IFn$_invoke$arity$variadic = G__16165__delegate;
    return G__16165;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__16167__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__16167 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16167__delegate.call(this, x, y, more);
    };
    G__16167.cljs$lang$maxFixedArity = 2;
    G__16167.cljs$lang$applyTo = function(arglist__16168) {
      var x = cljs.core.first(arglist__16168);
      arglist__16168 = cljs.core.next(arglist__16168);
      var y = cljs.core.first(arglist__16168);
      var more = cljs.core.rest(arglist__16168);
      return G__16167__delegate(x, y, more);
    };
    G__16167.cljs$core$IFn$_invoke$arity$variadic = G__16167__delegate;
    return G__16167;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__16169__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__16169 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16169__delegate.call(this, x, y, more);
    };
    G__16169.cljs$lang$maxFixedArity = 2;
    G__16169.cljs$lang$applyTo = function(arglist__16170) {
      var x = cljs.core.first(arglist__16170);
      arglist__16170 = cljs.core.next(arglist__16170);
      var y = cljs.core.first(arglist__16170);
      var more = cljs.core.rest(arglist__16170);
      return G__16169__delegate(x, y, more);
    };
    G__16169.cljs$core$IFn$_invoke$arity$variadic = G__16169__delegate;
    return G__16169;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__16171__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__16172 = y;
            var G__16173 = cljs.core.first.call(null, more);
            var G__16174 = cljs.core.next.call(null, more);
            x = G__16172;
            y = G__16173;
            more = G__16174;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16171 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16171__delegate.call(this, x, y, more);
    };
    G__16171.cljs$lang$maxFixedArity = 2;
    G__16171.cljs$lang$applyTo = function(arglist__16175) {
      var x = cljs.core.first(arglist__16175);
      arglist__16175 = cljs.core.next(arglist__16175);
      var y = cljs.core.first(arglist__16175);
      var more = cljs.core.rest(arglist__16175);
      return G__16171__delegate(x, y, more);
    };
    G__16171.cljs$core$IFn$_invoke$arity$variadic = G__16171__delegate;
    return G__16171;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__16176 = n__$1 - 1;
      var G__16177 = cljs.core.next.call(null, xs);
      n__$1 = G__16176;
      xs = G__16177;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__16178__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__16179 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__16180 = cljs.core.next.call(null, more);
          sb = G__16179;
          more = G__16180;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__16178 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16178__delegate.call(this, x, ys);
    };
    G__16178.cljs$lang$maxFixedArity = 1;
    G__16178.cljs$lang$applyTo = function(arglist__16181) {
      var x = cljs.core.first(arglist__16181);
      var ys = cljs.core.rest(arglist__16181);
      return G__16178__delegate(x, ys);
    };
    G__16178.cljs$core$IFn$_invoke$arity$variadic = G__16178__delegate;
    return G__16178;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__16182 = cljs.core.next.call(null, xs);
            var G__16183 = cljs.core.next.call(null, ys);
            xs = G__16182;
            ys = G__16183;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__16184 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__16185 = cljs.core.next.call(null, s);
        res = G__16184;
        s = G__16185;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__16186 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__16187 = cljs.core.next.call(null, s);
      h = G__16186;
      s = G__16187;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__16188 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__16189 = cljs.core.next.call(null, s__$1);
      h = G__16188;
      s__$1 = G__16189;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__16196_16202 = cljs.core.seq.call(null, fn_map);
  var chunk__16197_16203 = null;
  var count__16198_16204 = 0;
  var i__16199_16205 = 0;
  while (true) {
    if (i__16199_16205 < count__16198_16204) {
      var vec__16200_16206 = cljs.core._nth.call(null, chunk__16197_16203, i__16199_16205);
      var key_name_16207 = cljs.core.nth.call(null, vec__16200_16206, 0, null);
      var f_16208 = cljs.core.nth.call(null, vec__16200_16206, 1, null);
      var str_name_16209 = cljs.core.name.call(null, key_name_16207);
      obj[str_name_16209] = f_16208;
      var G__16210 = seq__16196_16202;
      var G__16211 = chunk__16197_16203;
      var G__16212 = count__16198_16204;
      var G__16213 = i__16199_16205 + 1;
      seq__16196_16202 = G__16210;
      chunk__16197_16203 = G__16211;
      count__16198_16204 = G__16212;
      i__16199_16205 = G__16213;
      continue;
    } else {
      var temp__4092__auto___16214 = cljs.core.seq.call(null, seq__16196_16202);
      if (temp__4092__auto___16214) {
        var seq__16196_16215__$1 = temp__4092__auto___16214;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16196_16215__$1)) {
          var c__4297__auto___16216 = cljs.core.chunk_first.call(null, seq__16196_16215__$1);
          var G__16217 = cljs.core.chunk_rest.call(null, seq__16196_16215__$1);
          var G__16218 = c__4297__auto___16216;
          var G__16219 = cljs.core.count.call(null, c__4297__auto___16216);
          var G__16220 = 0;
          seq__16196_16202 = G__16217;
          chunk__16197_16203 = G__16218;
          count__16198_16204 = G__16219;
          i__16199_16205 = G__16220;
          continue;
        } else {
          var vec__16201_16221 = cljs.core.first.call(null, seq__16196_16215__$1);
          var key_name_16222 = cljs.core.nth.call(null, vec__16201_16221, 0, null);
          var f_16223 = cljs.core.nth.call(null, vec__16201_16221, 1, null);
          var str_name_16224 = cljs.core.name.call(null, key_name_16222);
          obj[str_name_16224] = f_16223;
          var G__16225 = cljs.core.next.call(null, seq__16196_16215__$1);
          var G__16226 = null;
          var G__16227 = 0;
          var G__16228 = 0;
          seq__16196_16202 = G__16225;
          chunk__16197_16203 = G__16226;
          count__16198_16204 = G__16227;
          i__16199_16205 = G__16228;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__16230 = coll;
  if (G__16230) {
    var bit__4191__auto__ = G__16230.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4191__auto__ || G__16230.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__16230.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16230);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16230);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__16231 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__16231;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__16232 = i - 1;
        var G__16233 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__16232;
        r = G__16233;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__16234) {
    var xs = cljs.core.seq(arglist__16234);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3541__auto__ = coll == null;
    if (or__3541__auto__) {
      return or__3541__auto__;
    } else {
      var G__16238 = coll;
      if (G__16238) {
        var bit__4184__auto__ = G__16238.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4184__auto__ || G__16238.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__16240 = x;
  if (G__16240) {
    var bit__4191__auto__ = G__16240.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4191__auto__ || G__16240.cljs$core$IList$) {
      return true;
    } else {
      if (!G__16240.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16240);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16240);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__16242 = null;
  var G__16242__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__16242__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__16242 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16242__2.call(this, self__, coll);
      case 3:
        return G__16242__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16242;
}();
cljs.core.Keyword.prototype.apply = function(self__, args16241) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16241)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__16244 = x;
    if (G__16244) {
      var bit__4184__auto__ = G__16244.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4184__auto__ || G__16244.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__16245 = ls.sval();
        ls = G__16245;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__16247 = s;
    if (G__16247) {
      var bit__4184__auto__ = G__16247.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4184__auto__ || G__16247.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__16248 = cljs.core.next.call(null, s__$1);
      s__$1 = G__16248;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_16249 = 0;
  var xs_16250 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_16250) {
      ret[i_16249] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_16250));
      var G__16251 = i_16249 + 1;
      var G__16252 = cljs.core.next.call(null, xs_16250);
      i_16249 = G__16251;
      xs_16250 = G__16252;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16253 = i + 1;
          var G__16254 = cljs.core.next.call(null, s__$1);
          i = G__16253;
          s__$1 = G__16254;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4397__auto___16255 = size;
      var i_16256 = 0;
      while (true) {
        if (i_16256 < n__4397__auto___16255) {
          a[i_16256] = init_val_or_seq;
          var G__16257 = i_16256 + 1;
          i_16256 = G__16257;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16258 = i + 1;
          var G__16259 = cljs.core.next.call(null, s__$1);
          i = G__16258;
          s__$1 = G__16259;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4397__auto___16260 = size;
      var i_16261 = 0;
      while (true) {
        if (i_16261 < n__4397__auto___16260) {
          a[i_16261] = init_val_or_seq;
          var G__16262 = i_16261 + 1;
          i_16261 = G__16262;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16263 = i + 1;
          var G__16264 = cljs.core.next.call(null, s__$1);
          i = G__16263;
          s__$1 = G__16264;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4397__auto___16265 = size;
      var i_16266 = 0;
      while (true) {
        if (i_16266 < n__4397__auto___16265) {
          a[i_16266] = init_val_or_seq;
          var G__16267 = i_16266 + 1;
          i_16266 = G__16267;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16268 = i + 1;
          var G__16269 = cljs.core.next.call(null, s__$1);
          i = G__16268;
          s__$1 = G__16269;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4397__auto___16270 = size;
      var i_16271 = 0;
      while (true) {
        if (i_16271 < n__4397__auto___16270) {
          a[i_16271] = init_val_or_seq;
          var G__16272 = i_16271 + 1;
          i_16271 = G__16272;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__16273 = cljs.core.next.call(null, s__$1);
        var G__16274 = i - 1;
        var G__16275 = sum + 1;
        s__$1 = G__16273;
        i = G__16274;
        sum = G__16275;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__16276__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__16276 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16276__delegate.call(this, x, y, zs);
    };
    G__16276.cljs$lang$maxFixedArity = 2;
    G__16276.cljs$lang$applyTo = function(arglist__16277) {
      var x = cljs.core.first(arglist__16277);
      arglist__16277 = cljs.core.next(arglist__16277);
      var y = cljs.core.first(arglist__16277);
      var zs = cljs.core.rest(arglist__16277);
      return G__16276__delegate(x, y, zs);
    };
    G__16276.cljs$core$IFn$_invoke$arity$variadic = G__16276__delegate;
    return G__16276;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__16278__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__16278 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16278__delegate.call(this, a, b, c, d, more);
    };
    G__16278.cljs$lang$maxFixedArity = 4;
    G__16278.cljs$lang$applyTo = function(arglist__16279) {
      var a = cljs.core.first(arglist__16279);
      arglist__16279 = cljs.core.next(arglist__16279);
      var b = cljs.core.first(arglist__16279);
      arglist__16279 = cljs.core.next(arglist__16279);
      var c = cljs.core.first(arglist__16279);
      arglist__16279 = cljs.core.next(arglist__16279);
      var d = cljs.core.first(arglist__16279);
      var more = cljs.core.rest(arglist__16279);
      return G__16278__delegate(a, b, c, d, more);
    };
    G__16278.cljs$core$IFn$_invoke$arity$variadic = G__16278__delegate;
    return G__16278;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__16280__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16281 = ntcoll;
          var G__16282 = cljs.core.first.call(null, vals);
          var G__16283 = cljs.core.next.call(null, vals);
          tcoll = G__16281;
          val = G__16282;
          vals = G__16283;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16280 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16280__delegate.call(this, tcoll, val, vals);
    };
    G__16280.cljs$lang$maxFixedArity = 2;
    G__16280.cljs$lang$applyTo = function(arglist__16284) {
      var tcoll = cljs.core.first(arglist__16284);
      arglist__16284 = cljs.core.next(arglist__16284);
      var val = cljs.core.first(arglist__16284);
      var vals = cljs.core.rest(arglist__16284);
      return G__16280__delegate(tcoll, val, vals);
    };
    G__16280.cljs$core$IFn$_invoke$arity$variadic = G__16280__delegate;
    return G__16280;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__16285__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__16286 = ntcoll;
          var G__16287 = cljs.core.first.call(null, kvs);
          var G__16288 = cljs.core.second.call(null, kvs);
          var G__16289 = cljs.core.nnext.call(null, kvs);
          tcoll = G__16286;
          key = G__16287;
          val = G__16288;
          kvs = G__16289;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16285 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16285__delegate.call(this, tcoll, key, val, kvs);
    };
    G__16285.cljs$lang$maxFixedArity = 3;
    G__16285.cljs$lang$applyTo = function(arglist__16290) {
      var tcoll = cljs.core.first(arglist__16290);
      arglist__16290 = cljs.core.next(arglist__16290);
      var key = cljs.core.first(arglist__16290);
      arglist__16290 = cljs.core.next(arglist__16290);
      var val = cljs.core.first(arglist__16290);
      var kvs = cljs.core.rest(arglist__16290);
      return G__16285__delegate(tcoll, key, val, kvs);
    };
    G__16285.cljs$core$IFn$_invoke$arity$variadic = G__16285__delegate;
    return G__16285;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__16291__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__16292 = ntcoll;
          var G__16293 = cljs.core.first.call(null, ks);
          var G__16294 = cljs.core.next.call(null, ks);
          tcoll = G__16292;
          key = G__16293;
          ks = G__16294;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16291 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16291__delegate.call(this, tcoll, key, ks);
    };
    G__16291.cljs$lang$maxFixedArity = 2;
    G__16291.cljs$lang$applyTo = function(arglist__16295) {
      var tcoll = cljs.core.first(arglist__16295);
      arglist__16295 = cljs.core.next(arglist__16295);
      var key = cljs.core.first(arglist__16295);
      var ks = cljs.core.rest(arglist__16295);
      return G__16291__delegate(tcoll, key, ks);
    };
    G__16291.cljs$core$IFn$_invoke$arity$variadic = G__16291__delegate;
    return G__16291;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__16296__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16297 = ntcoll;
          var G__16298 = cljs.core.first.call(null, vals);
          var G__16299 = cljs.core.next.call(null, vals);
          tcoll = G__16297;
          val = G__16298;
          vals = G__16299;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16296 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16296__delegate.call(this, tcoll, val, vals);
    };
    G__16296.cljs$lang$maxFixedArity = 2;
    G__16296.cljs$lang$applyTo = function(arglist__16300) {
      var tcoll = cljs.core.first(arglist__16300);
      arglist__16300 = cljs.core.next(arglist__16300);
      var val = cljs.core.first(arglist__16300);
      var vals = cljs.core.rest(arglist__16300);
      return G__16296__delegate(tcoll, val, vals);
    };
    G__16296.cljs$core$IFn$_invoke$arity$variadic = G__16296__delegate;
    return G__16296;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4441 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4441);
      } else {
        return f.call(null, a4441);
      }
    } else {
      var b4442 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4441, b4442);
        } else {
          return f.call(null, a4441, b4442);
        }
      } else {
        var c4443 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4441, b4442, c4443);
          } else {
            return f.call(null, a4441, b4442, c4443);
          }
        } else {
          var d4444 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4441, b4442, c4443, d4444);
            } else {
              return f.call(null, a4441, b4442, c4443, d4444);
            }
          } else {
            var e4445 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4441, b4442, c4443, d4444, e4445);
              } else {
                return f.call(null, a4441, b4442, c4443, d4444, e4445);
              }
            } else {
              var f4446 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4441, b4442, c4443, d4444, e4445, f4446);
                } else {
                  return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446);
                }
              } else {
                var g4447 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4441, b4442, c4443, d4444, e4445, f4446, g4447);
                  } else {
                    return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447);
                  }
                } else {
                  var h4448 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448);
                    } else {
                      return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448);
                    }
                  } else {
                    var i4449 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449);
                      } else {
                        return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449);
                      }
                    } else {
                      var j4450 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450);
                        } else {
                          return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450);
                        }
                      } else {
                        var k4451 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451);
                          } else {
                            return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451);
                          }
                        } else {
                          var l4452 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452);
                            } else {
                              return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452);
                            }
                          } else {
                            var m4453 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453);
                              } else {
                                return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453);
                              }
                            } else {
                              var n4454 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454);
                                } else {
                                  return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454);
                                }
                              } else {
                                var o4455 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455);
                                  } else {
                                    return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455);
                                  }
                                } else {
                                  var p4456 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455, p4456);
                                    } else {
                                      return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455, p4456);
                                    }
                                  } else {
                                    var q4457 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455, p4456, q4457);
                                      } else {
                                        return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455, p4456, q4457);
                                      }
                                    } else {
                                      var r4458 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455, p4456, q4457, r4458);
                                        } else {
                                          return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455, p4456, q4457, r4458);
                                        }
                                      } else {
                                        var s4459 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455, p4456, q4457, r4458, s4459);
                                          } else {
                                            return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455, p4456, q4457, r4458, s4459);
                                          }
                                        } else {
                                          var t4460 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455, p4456, q4457, r4458, s4459, t4460);
                                            } else {
                                              return f.call(null, a4441, b4442, c4443, d4444, e4445, f4446, g4447, h4448, i4449, j4450, k4451, l4452, m4453, n4454, o4455, p4456, q4457, r4458, s4459, t4460);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__16301__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__16301 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__16301__delegate.call(this, f, a, b, c, d, args);
    };
    G__16301.cljs$lang$maxFixedArity = 5;
    G__16301.cljs$lang$applyTo = function(arglist__16302) {
      var f = cljs.core.first(arglist__16302);
      arglist__16302 = cljs.core.next(arglist__16302);
      var a = cljs.core.first(arglist__16302);
      arglist__16302 = cljs.core.next(arglist__16302);
      var b = cljs.core.first(arglist__16302);
      arglist__16302 = cljs.core.next(arglist__16302);
      var c = cljs.core.first(arglist__16302);
      arglist__16302 = cljs.core.next(arglist__16302);
      var d = cljs.core.first(arglist__16302);
      var args = cljs.core.rest(arglist__16302);
      return G__16301__delegate(f, a, b, c, d, args);
    };
    G__16301.cljs$core$IFn$_invoke$arity$variadic = G__16301__delegate;
    return G__16301;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__16303__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__16303 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__16303__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__16303.cljs$lang$maxFixedArity = 6;
    G__16303.cljs$lang$applyTo = function(arglist__16304) {
      var obj = cljs.core.first(arglist__16304);
      arglist__16304 = cljs.core.next(arglist__16304);
      var f = cljs.core.first(arglist__16304);
      arglist__16304 = cljs.core.next(arglist__16304);
      var a = cljs.core.first(arglist__16304);
      arglist__16304 = cljs.core.next(arglist__16304);
      var b = cljs.core.first(arglist__16304);
      arglist__16304 = cljs.core.next(arglist__16304);
      var c = cljs.core.first(arglist__16304);
      arglist__16304 = cljs.core.next(arglist__16304);
      var d = cljs.core.first(arglist__16304);
      var args = cljs.core.rest(arglist__16304);
      return G__16303__delegate(obj, f, a, b, c, d, args);
    };
    G__16303.cljs$core$IFn$_invoke$arity$variadic = G__16303__delegate;
    return G__16303;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__16305__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__16305 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16305__delegate.call(this, x, y, more);
    };
    G__16305.cljs$lang$maxFixedArity = 2;
    G__16305.cljs$lang$applyTo = function(arglist__16306) {
      var x = cljs.core.first(arglist__16306);
      arglist__16306 = cljs.core.next(arglist__16306);
      var y = cljs.core.first(arglist__16306);
      var more = cljs.core.rest(arglist__16306);
      return G__16305__delegate(x, y, more);
    };
    G__16305.cljs$core$IFn$_invoke$arity$variadic = G__16305__delegate;
    return G__16305;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__16307 = pred;
        var G__16308 = cljs.core.next.call(null, coll);
        pred = G__16307;
        coll = G__16308;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3541__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        var G__16309 = pred;
        var G__16310 = cljs.core.next.call(null, coll);
        pred = G__16309;
        coll = G__16310;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__16311 = null;
    var G__16311__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__16311__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__16311__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__16311__3 = function() {
      var G__16312__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__16312 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__16312__delegate.call(this, x, y, zs);
      };
      G__16312.cljs$lang$maxFixedArity = 2;
      G__16312.cljs$lang$applyTo = function(arglist__16313) {
        var x = cljs.core.first(arglist__16313);
        arglist__16313 = cljs.core.next(arglist__16313);
        var y = cljs.core.first(arglist__16313);
        var zs = cljs.core.rest(arglist__16313);
        return G__16312__delegate(x, y, zs);
      };
      G__16312.cljs$core$IFn$_invoke$arity$variadic = G__16312__delegate;
      return G__16312;
    }();
    G__16311 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__16311__0.call(this);
        case 1:
          return G__16311__1.call(this, x);
        case 2:
          return G__16311__2.call(this, x, y);
        default:
          return G__16311__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16311.cljs$lang$maxFixedArity = 2;
    G__16311.cljs$lang$applyTo = G__16311__3.cljs$lang$applyTo;
    return G__16311;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__16314__delegate = function(args) {
      return x;
    };
    var G__16314 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16314__delegate.call(this, args);
    };
    G__16314.cljs$lang$maxFixedArity = 0;
    G__16314.cljs$lang$applyTo = function(arglist__16315) {
      var args = cljs.core.seq(arglist__16315);
      return G__16314__delegate(args);
    };
    G__16314.cljs$core$IFn$_invoke$arity$variadic = G__16314__delegate;
    return G__16314;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__16316 = null;
      var G__16316__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__16316__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__16316__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__16316__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__16316__4 = function() {
        var G__16317__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__16317 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16317__delegate.call(this, x, y, z, args);
        };
        G__16317.cljs$lang$maxFixedArity = 3;
        G__16317.cljs$lang$applyTo = function(arglist__16318) {
          var x = cljs.core.first(arglist__16318);
          arglist__16318 = cljs.core.next(arglist__16318);
          var y = cljs.core.first(arglist__16318);
          arglist__16318 = cljs.core.next(arglist__16318);
          var z = cljs.core.first(arglist__16318);
          var args = cljs.core.rest(arglist__16318);
          return G__16317__delegate(x, y, z, args);
        };
        G__16317.cljs$core$IFn$_invoke$arity$variadic = G__16317__delegate;
        return G__16317;
      }();
      G__16316 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16316__0.call(this);
          case 1:
            return G__16316__1.call(this, x);
          case 2:
            return G__16316__2.call(this, x, y);
          case 3:
            return G__16316__3.call(this, x, y, z);
          default:
            return G__16316__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16316.cljs$lang$maxFixedArity = 3;
      G__16316.cljs$lang$applyTo = G__16316__4.cljs$lang$applyTo;
      return G__16316;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__16319 = null;
      var G__16319__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__16319__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__16319__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__16319__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__16319__4 = function() {
        var G__16320__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__16320 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16320__delegate.call(this, x, y, z, args);
        };
        G__16320.cljs$lang$maxFixedArity = 3;
        G__16320.cljs$lang$applyTo = function(arglist__16321) {
          var x = cljs.core.first(arglist__16321);
          arglist__16321 = cljs.core.next(arglist__16321);
          var y = cljs.core.first(arglist__16321);
          arglist__16321 = cljs.core.next(arglist__16321);
          var z = cljs.core.first(arglist__16321);
          var args = cljs.core.rest(arglist__16321);
          return G__16320__delegate(x, y, z, args);
        };
        G__16320.cljs$core$IFn$_invoke$arity$variadic = G__16320__delegate;
        return G__16320;
      }();
      G__16319 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16319__0.call(this);
          case 1:
            return G__16319__1.call(this, x);
          case 2:
            return G__16319__2.call(this, x, y);
          case 3:
            return G__16319__3.call(this, x, y, z);
          default:
            return G__16319__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16319.cljs$lang$maxFixedArity = 3;
      G__16319.cljs$lang$applyTo = G__16319__4.cljs$lang$applyTo;
      return G__16319;
    }();
  };
  var comp__4 = function() {
    var G__16322__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__16323__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__16324 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__16325 = cljs.core.next.call(null, fs__$2);
                ret = G__16324;
                fs__$2 = G__16325;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__16323 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__16323__delegate.call(this, args);
          };
          G__16323.cljs$lang$maxFixedArity = 0;
          G__16323.cljs$lang$applyTo = function(arglist__16326) {
            var args = cljs.core.seq(arglist__16326);
            return G__16323__delegate(args);
          };
          G__16323.cljs$core$IFn$_invoke$arity$variadic = G__16323__delegate;
          return G__16323;
        }();
      }(fs__$1);
    };
    var G__16322 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16322__delegate.call(this, f1, f2, f3, fs);
    };
    G__16322.cljs$lang$maxFixedArity = 3;
    G__16322.cljs$lang$applyTo = function(arglist__16327) {
      var f1 = cljs.core.first(arglist__16327);
      arglist__16327 = cljs.core.next(arglist__16327);
      var f2 = cljs.core.first(arglist__16327);
      arglist__16327 = cljs.core.next(arglist__16327);
      var f3 = cljs.core.first(arglist__16327);
      var fs = cljs.core.rest(arglist__16327);
      return G__16322__delegate(f1, f2, f3, fs);
    };
    G__16322.cljs$core$IFn$_invoke$arity$variadic = G__16322__delegate;
    return G__16322;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__16328__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__16328 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16328__delegate.call(this, args);
      };
      G__16328.cljs$lang$maxFixedArity = 0;
      G__16328.cljs$lang$applyTo = function(arglist__16329) {
        var args = cljs.core.seq(arglist__16329);
        return G__16328__delegate(args);
      };
      G__16328.cljs$core$IFn$_invoke$arity$variadic = G__16328__delegate;
      return G__16328;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__16330__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__16330 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16330__delegate.call(this, args);
      };
      G__16330.cljs$lang$maxFixedArity = 0;
      G__16330.cljs$lang$applyTo = function(arglist__16331) {
        var args = cljs.core.seq(arglist__16331);
        return G__16330__delegate(args);
      };
      G__16330.cljs$core$IFn$_invoke$arity$variadic = G__16330__delegate;
      return G__16330;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__16332__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__16332 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16332__delegate.call(this, args);
      };
      G__16332.cljs$lang$maxFixedArity = 0;
      G__16332.cljs$lang$applyTo = function(arglist__16333) {
        var args = cljs.core.seq(arglist__16333);
        return G__16332__delegate(args);
      };
      G__16332.cljs$core$IFn$_invoke$arity$variadic = G__16332__delegate;
      return G__16332;
    }();
  };
  var partial__5 = function() {
    var G__16334__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__16335__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__16335 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16335__delegate.call(this, args);
        };
        G__16335.cljs$lang$maxFixedArity = 0;
        G__16335.cljs$lang$applyTo = function(arglist__16336) {
          var args = cljs.core.seq(arglist__16336);
          return G__16335__delegate(args);
        };
        G__16335.cljs$core$IFn$_invoke$arity$variadic = G__16335__delegate;
        return G__16335;
      }();
    };
    var G__16334 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16334__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__16334.cljs$lang$maxFixedArity = 4;
    G__16334.cljs$lang$applyTo = function(arglist__16337) {
      var f = cljs.core.first(arglist__16337);
      arglist__16337 = cljs.core.next(arglist__16337);
      var arg1 = cljs.core.first(arglist__16337);
      arglist__16337 = cljs.core.next(arglist__16337);
      var arg2 = cljs.core.first(arglist__16337);
      arglist__16337 = cljs.core.next(arglist__16337);
      var arg3 = cljs.core.first(arglist__16337);
      var more = cljs.core.rest(arglist__16337);
      return G__16334__delegate(f, arg1, arg2, arg3, more);
    };
    G__16334.cljs$core$IFn$_invoke$arity$variadic = G__16334__delegate;
    return G__16334;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__16338 = null;
      var G__16338__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__16338__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__16338__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__16338__4 = function() {
        var G__16339__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__16339 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16339__delegate.call(this, a, b, c, ds);
        };
        G__16339.cljs$lang$maxFixedArity = 3;
        G__16339.cljs$lang$applyTo = function(arglist__16340) {
          var a = cljs.core.first(arglist__16340);
          arglist__16340 = cljs.core.next(arglist__16340);
          var b = cljs.core.first(arglist__16340);
          arglist__16340 = cljs.core.next(arglist__16340);
          var c = cljs.core.first(arglist__16340);
          var ds = cljs.core.rest(arglist__16340);
          return G__16339__delegate(a, b, c, ds);
        };
        G__16339.cljs$core$IFn$_invoke$arity$variadic = G__16339__delegate;
        return G__16339;
      }();
      G__16338 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__16338__1.call(this, a);
          case 2:
            return G__16338__2.call(this, a, b);
          case 3:
            return G__16338__3.call(this, a, b, c);
          default:
            return G__16338__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16338.cljs$lang$maxFixedArity = 3;
      G__16338.cljs$lang$applyTo = G__16338__4.cljs$lang$applyTo;
      return G__16338;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__16341 = null;
      var G__16341__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__16341__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__16341__4 = function() {
        var G__16342__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__16342 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16342__delegate.call(this, a, b, c, ds);
        };
        G__16342.cljs$lang$maxFixedArity = 3;
        G__16342.cljs$lang$applyTo = function(arglist__16343) {
          var a = cljs.core.first(arglist__16343);
          arglist__16343 = cljs.core.next(arglist__16343);
          var b = cljs.core.first(arglist__16343);
          arglist__16343 = cljs.core.next(arglist__16343);
          var c = cljs.core.first(arglist__16343);
          var ds = cljs.core.rest(arglist__16343);
          return G__16342__delegate(a, b, c, ds);
        };
        G__16342.cljs$core$IFn$_invoke$arity$variadic = G__16342__delegate;
        return G__16342;
      }();
      G__16341 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__16341__2.call(this, a, b);
          case 3:
            return G__16341__3.call(this, a, b, c);
          default:
            return G__16341__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16341.cljs$lang$maxFixedArity = 3;
      G__16341.cljs$lang$applyTo = G__16341__4.cljs$lang$applyTo;
      return G__16341;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__16344 = null;
      var G__16344__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__16344__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__16344__4 = function() {
        var G__16345__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__16345 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16345__delegate.call(this, a, b, c, ds);
        };
        G__16345.cljs$lang$maxFixedArity = 3;
        G__16345.cljs$lang$applyTo = function(arglist__16346) {
          var a = cljs.core.first(arglist__16346);
          arglist__16346 = cljs.core.next(arglist__16346);
          var b = cljs.core.first(arglist__16346);
          arglist__16346 = cljs.core.next(arglist__16346);
          var c = cljs.core.first(arglist__16346);
          var ds = cljs.core.rest(arglist__16346);
          return G__16345__delegate(a, b, c, ds);
        };
        G__16345.cljs$core$IFn$_invoke$arity$variadic = G__16345__delegate;
        return G__16345;
      }();
      G__16344 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__16344__2.call(this, a, b);
          case 3:
            return G__16344__3.call(this, a, b, c);
          default:
            return G__16344__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16344.cljs$lang$maxFixedArity = 3;
      G__16344.cljs$lang$applyTo = G__16344__4.cljs$lang$applyTo;
      return G__16344;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4397__auto___16347 = size;
          var i_16348 = 0;
          while (true) {
            if (i_16348 < n__4397__auto___16347) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_16348, cljs.core._nth.call(null, c, i_16348)));
              var G__16349 = i_16348 + 1;
              i_16348 = G__16349;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4397__auto___16350 = size;
        var i_16351 = 0;
        while (true) {
          if (i_16351 < n__4397__auto___16350) {
            var x_16352 = f.call(null, cljs.core._nth.call(null, c, i_16351));
            if (x_16352 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_16352);
            }
            var G__16353 = i_16351 + 1;
            i_16351 = G__16353;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4397__auto___16354 = size;
          var i_16355 = 0;
          while (true) {
            if (i_16355 < n__4397__auto___16354) {
              var x_16356 = f.call(null, idx + i_16355, cljs.core._nth.call(null, c, i_16355));
              if (x_16356 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_16356);
              }
              var G__16357 = i_16355 + 1;
              i_16355 = G__16357;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3529__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3529__auto__)) {
            return p.call(null, y);
          } else {
            return and__3529__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3529__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3529__auto__)) {
            var and__3529__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3529__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3529__auto____$1;
            }
          } else {
            return and__3529__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__16364__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__16364 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16364__delegate.call(this, x, y, z, args);
        };
        G__16364.cljs$lang$maxFixedArity = 3;
        G__16364.cljs$lang$applyTo = function(arglist__16365) {
          var x = cljs.core.first(arglist__16365);
          arglist__16365 = cljs.core.next(arglist__16365);
          var y = cljs.core.first(arglist__16365);
          arglist__16365 = cljs.core.next(arglist__16365);
          var z = cljs.core.first(arglist__16365);
          var args = cljs.core.rest(arglist__16365);
          return G__16364__delegate(x, y, z, args);
        };
        G__16364.cljs$core$IFn$_invoke$arity$variadic = G__16364__delegate;
        return G__16364;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3529__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3529__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3529__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3529__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3529__auto__)) {
            var and__3529__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3529__auto____$1)) {
              var and__3529__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3529__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3529__auto____$2;
              }
            } else {
              return and__3529__auto____$1;
            }
          } else {
            return and__3529__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3529__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3529__auto__)) {
            var and__3529__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3529__auto____$1)) {
              var and__3529__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3529__auto____$2)) {
                var and__3529__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3529__auto____$3)) {
                  var and__3529__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3529__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3529__auto____$4;
                  }
                } else {
                  return and__3529__auto____$3;
                }
              } else {
                return and__3529__auto____$2;
              }
            } else {
              return and__3529__auto____$1;
            }
          } else {
            return and__3529__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__16366__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__16358_SHARP_) {
            var and__3529__auto__ = p1.call(null, p1__16358_SHARP_);
            if (cljs.core.truth_(and__3529__auto__)) {
              return p2.call(null, p1__16358_SHARP_);
            } else {
              return and__3529__auto__;
            }
          }, args));
        };
        var G__16366 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16366__delegate.call(this, x, y, z, args);
        };
        G__16366.cljs$lang$maxFixedArity = 3;
        G__16366.cljs$lang$applyTo = function(arglist__16367) {
          var x = cljs.core.first(arglist__16367);
          arglist__16367 = cljs.core.next(arglist__16367);
          var y = cljs.core.first(arglist__16367);
          arglist__16367 = cljs.core.next(arglist__16367);
          var z = cljs.core.first(arglist__16367);
          var args = cljs.core.rest(arglist__16367);
          return G__16366__delegate(x, y, z, args);
        };
        G__16366.cljs$core$IFn$_invoke$arity$variadic = G__16366__delegate;
        return G__16366;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3529__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3529__auto__)) {
            var and__3529__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3529__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3529__auto____$1;
            }
          } else {
            return and__3529__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3529__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3529__auto__)) {
            var and__3529__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3529__auto____$1)) {
              var and__3529__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3529__auto____$2)) {
                var and__3529__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3529__auto____$3)) {
                  var and__3529__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3529__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3529__auto____$4;
                  }
                } else {
                  return and__3529__auto____$3;
                }
              } else {
                return and__3529__auto____$2;
              }
            } else {
              return and__3529__auto____$1;
            }
          } else {
            return and__3529__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3529__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3529__auto__)) {
            var and__3529__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3529__auto____$1)) {
              var and__3529__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3529__auto____$2)) {
                var and__3529__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3529__auto____$3)) {
                  var and__3529__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3529__auto____$4)) {
                    var and__3529__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3529__auto____$5)) {
                      var and__3529__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3529__auto____$6)) {
                        var and__3529__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3529__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3529__auto____$7;
                        }
                      } else {
                        return and__3529__auto____$6;
                      }
                    } else {
                      return and__3529__auto____$5;
                    }
                  } else {
                    return and__3529__auto____$4;
                  }
                } else {
                  return and__3529__auto____$3;
                }
              } else {
                return and__3529__auto____$2;
              }
            } else {
              return and__3529__auto____$1;
            }
          } else {
            return and__3529__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__16368__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__16359_SHARP_) {
            var and__3529__auto__ = p1.call(null, p1__16359_SHARP_);
            if (cljs.core.truth_(and__3529__auto__)) {
              var and__3529__auto____$1 = p2.call(null, p1__16359_SHARP_);
              if (cljs.core.truth_(and__3529__auto____$1)) {
                return p3.call(null, p1__16359_SHARP_);
              } else {
                return and__3529__auto____$1;
              }
            } else {
              return and__3529__auto__;
            }
          }, args));
        };
        var G__16368 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16368__delegate.call(this, x, y, z, args);
        };
        G__16368.cljs$lang$maxFixedArity = 3;
        G__16368.cljs$lang$applyTo = function(arglist__16369) {
          var x = cljs.core.first(arglist__16369);
          arglist__16369 = cljs.core.next(arglist__16369);
          var y = cljs.core.first(arglist__16369);
          arglist__16369 = cljs.core.next(arglist__16369);
          var z = cljs.core.first(arglist__16369);
          var args = cljs.core.rest(arglist__16369);
          return G__16368__delegate(x, y, z, args);
        };
        G__16368.cljs$core$IFn$_invoke$arity$variadic = G__16368__delegate;
        return G__16368;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__16370__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16360_SHARP_) {
                return p1__16360_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16361_SHARP_) {
                var and__3529__auto__ = p1__16361_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3529__auto__)) {
                  return p1__16361_SHARP_.call(null, y);
                } else {
                  return and__3529__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16362_SHARP_) {
                var and__3529__auto__ = p1__16362_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3529__auto__)) {
                  var and__3529__auto____$1 = p1__16362_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3529__auto____$1)) {
                    return p1__16362_SHARP_.call(null, z);
                  } else {
                    return and__3529__auto____$1;
                  }
                } else {
                  return and__3529__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__16371__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__16363_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__16363_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__16371 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16371__delegate.call(this, x, y, z, args);
            };
            G__16371.cljs$lang$maxFixedArity = 3;
            G__16371.cljs$lang$applyTo = function(arglist__16372) {
              var x = cljs.core.first(arglist__16372);
              arglist__16372 = cljs.core.next(arglist__16372);
              var y = cljs.core.first(arglist__16372);
              arglist__16372 = cljs.core.next(arglist__16372);
              var z = cljs.core.first(arglist__16372);
              var args = cljs.core.rest(arglist__16372);
              return G__16371__delegate(x, y, z, args);
            };
            G__16371.cljs$core$IFn$_invoke$arity$variadic = G__16371__delegate;
            return G__16371;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__16370 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16370__delegate.call(this, p1, p2, p3, ps);
    };
    G__16370.cljs$lang$maxFixedArity = 3;
    G__16370.cljs$lang$applyTo = function(arglist__16373) {
      var p1 = cljs.core.first(arglist__16373);
      arglist__16373 = cljs.core.next(arglist__16373);
      var p2 = cljs.core.first(arglist__16373);
      arglist__16373 = cljs.core.next(arglist__16373);
      var p3 = cljs.core.first(arglist__16373);
      var ps = cljs.core.rest(arglist__16373);
      return G__16370__delegate(p1, p2, p3, ps);
    };
    G__16370.cljs$core$IFn$_invoke$arity$variadic = G__16370__delegate;
    return G__16370;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3541__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3541__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3541__auto____$1)) {
            return or__3541__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__16380__delegate = function(x, y, z, args) {
          var or__3541__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3541__auto__)) {
            return or__3541__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__16380 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16380__delegate.call(this, x, y, z, args);
        };
        G__16380.cljs$lang$maxFixedArity = 3;
        G__16380.cljs$lang$applyTo = function(arglist__16381) {
          var x = cljs.core.first(arglist__16381);
          arglist__16381 = cljs.core.next(arglist__16381);
          var y = cljs.core.first(arglist__16381);
          arglist__16381 = cljs.core.next(arglist__16381);
          var z = cljs.core.first(arglist__16381);
          var args = cljs.core.rest(arglist__16381);
          return G__16380__delegate(x, y, z, args);
        };
        G__16380.cljs$core$IFn$_invoke$arity$variadic = G__16380__delegate;
        return G__16380;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3541__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3541__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3541__auto____$1)) {
            return or__3541__auto____$1;
          } else {
            var or__3541__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3541__auto____$2)) {
              return or__3541__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3541__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3541__auto____$1)) {
            return or__3541__auto____$1;
          } else {
            var or__3541__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3541__auto____$2)) {
              return or__3541__auto____$2;
            } else {
              var or__3541__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3541__auto____$3)) {
                return or__3541__auto____$3;
              } else {
                var or__3541__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3541__auto____$4)) {
                  return or__3541__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__16382__delegate = function(x, y, z, args) {
          var or__3541__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3541__auto__)) {
            return or__3541__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3541__auto__) {
              return function(p1__16374_SHARP_) {
                var or__3541__auto____$1 = p1.call(null, p1__16374_SHARP_);
                if (cljs.core.truth_(or__3541__auto____$1)) {
                  return or__3541__auto____$1;
                } else {
                  return p2.call(null, p1__16374_SHARP_);
                }
              };
            }(or__3541__auto__), args);
          }
        };
        var G__16382 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16382__delegate.call(this, x, y, z, args);
        };
        G__16382.cljs$lang$maxFixedArity = 3;
        G__16382.cljs$lang$applyTo = function(arglist__16383) {
          var x = cljs.core.first(arglist__16383);
          arglist__16383 = cljs.core.next(arglist__16383);
          var y = cljs.core.first(arglist__16383);
          arglist__16383 = cljs.core.next(arglist__16383);
          var z = cljs.core.first(arglist__16383);
          var args = cljs.core.rest(arglist__16383);
          return G__16382__delegate(x, y, z, args);
        };
        G__16382.cljs$core$IFn$_invoke$arity$variadic = G__16382__delegate;
        return G__16382;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3541__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3541__auto____$1)) {
            return or__3541__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3541__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3541__auto____$1)) {
            return or__3541__auto____$1;
          } else {
            var or__3541__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3541__auto____$2)) {
              return or__3541__auto____$2;
            } else {
              var or__3541__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3541__auto____$3)) {
                return or__3541__auto____$3;
              } else {
                var or__3541__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3541__auto____$4)) {
                  return or__3541__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3541__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3541__auto____$1)) {
            return or__3541__auto____$1;
          } else {
            var or__3541__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3541__auto____$2)) {
              return or__3541__auto____$2;
            } else {
              var or__3541__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3541__auto____$3)) {
                return or__3541__auto____$3;
              } else {
                var or__3541__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3541__auto____$4)) {
                  return or__3541__auto____$4;
                } else {
                  var or__3541__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3541__auto____$5)) {
                    return or__3541__auto____$5;
                  } else {
                    var or__3541__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3541__auto____$6)) {
                      return or__3541__auto____$6;
                    } else {
                      var or__3541__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3541__auto____$7)) {
                        return or__3541__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__16384__delegate = function(x, y, z, args) {
          var or__3541__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3541__auto__)) {
            return or__3541__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3541__auto__) {
              return function(p1__16375_SHARP_) {
                var or__3541__auto____$1 = p1.call(null, p1__16375_SHARP_);
                if (cljs.core.truth_(or__3541__auto____$1)) {
                  return or__3541__auto____$1;
                } else {
                  var or__3541__auto____$2 = p2.call(null, p1__16375_SHARP_);
                  if (cljs.core.truth_(or__3541__auto____$2)) {
                    return or__3541__auto____$2;
                  } else {
                    return p3.call(null, p1__16375_SHARP_);
                  }
                }
              };
            }(or__3541__auto__), args);
          }
        };
        var G__16384 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16384__delegate.call(this, x, y, z, args);
        };
        G__16384.cljs$lang$maxFixedArity = 3;
        G__16384.cljs$lang$applyTo = function(arglist__16385) {
          var x = cljs.core.first(arglist__16385);
          arglist__16385 = cljs.core.next(arglist__16385);
          var y = cljs.core.first(arglist__16385);
          arglist__16385 = cljs.core.next(arglist__16385);
          var z = cljs.core.first(arglist__16385);
          var args = cljs.core.rest(arglist__16385);
          return G__16384__delegate(x, y, z, args);
        };
        G__16384.cljs$core$IFn$_invoke$arity$variadic = G__16384__delegate;
        return G__16384;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__16386__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16376_SHARP_) {
                return p1__16376_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16377_SHARP_) {
                var or__3541__auto__ = p1__16377_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3541__auto__)) {
                  return or__3541__auto__;
                } else {
                  return p1__16377_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16378_SHARP_) {
                var or__3541__auto__ = p1__16378_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3541__auto__)) {
                  return or__3541__auto__;
                } else {
                  var or__3541__auto____$1 = p1__16378_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3541__auto____$1)) {
                    return or__3541__auto____$1;
                  } else {
                    return p1__16378_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__16387__delegate = function(x, y, z, args) {
              var or__3541__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3541__auto__)) {
                return or__3541__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3541__auto__, ps__$1) {
                  return function(p1__16379_SHARP_) {
                    return cljs.core.some.call(null, p1__16379_SHARP_, args);
                  };
                }(or__3541__auto__, ps__$1), ps__$1);
              }
            };
            var G__16387 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16387__delegate.call(this, x, y, z, args);
            };
            G__16387.cljs$lang$maxFixedArity = 3;
            G__16387.cljs$lang$applyTo = function(arglist__16388) {
              var x = cljs.core.first(arglist__16388);
              arglist__16388 = cljs.core.next(arglist__16388);
              var y = cljs.core.first(arglist__16388);
              arglist__16388 = cljs.core.next(arglist__16388);
              var z = cljs.core.first(arglist__16388);
              var args = cljs.core.rest(arglist__16388);
              return G__16387__delegate(x, y, z, args);
            };
            G__16387.cljs$core$IFn$_invoke$arity$variadic = G__16387__delegate;
            return G__16387;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__16386 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16386__delegate.call(this, p1, p2, p3, ps);
    };
    G__16386.cljs$lang$maxFixedArity = 3;
    G__16386.cljs$lang$applyTo = function(arglist__16389) {
      var p1 = cljs.core.first(arglist__16389);
      arglist__16389 = cljs.core.next(arglist__16389);
      var p2 = cljs.core.first(arglist__16389);
      arglist__16389 = cljs.core.next(arglist__16389);
      var p3 = cljs.core.first(arglist__16389);
      var ps = cljs.core.rest(arglist__16389);
      return G__16386__delegate(p1, p2, p3, ps);
    };
    G__16386.cljs$core$IFn$_invoke$arity$variadic = G__16386__delegate;
    return G__16386;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4397__auto___16391 = size;
          var i_16392 = 0;
          while (true) {
            if (i_16392 < n__4397__auto___16391) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_16392)));
              var G__16393 = i_16392 + 1;
              i_16392 = G__16393;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__16394__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__16390_SHARP_) {
          return cljs.core.apply.call(null, f, p1__16390_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__16394 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16394__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__16394.cljs$lang$maxFixedArity = 4;
    G__16394.cljs$lang$applyTo = function(arglist__16395) {
      var f = cljs.core.first(arglist__16395);
      arglist__16395 = cljs.core.next(arglist__16395);
      var c1 = cljs.core.first(arglist__16395);
      arglist__16395 = cljs.core.next(arglist__16395);
      var c2 = cljs.core.first(arglist__16395);
      arglist__16395 = cljs.core.next(arglist__16395);
      var c3 = cljs.core.first(arglist__16395);
      var colls = cljs.core.rest(arglist__16395);
      return G__16394__delegate(f, c1, c2, c3, colls);
    };
    G__16394.cljs$core$IFn$_invoke$arity$variadic = G__16394__delegate;
    return G__16394;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__16396 = n__$1 - 1;
        var G__16397 = cljs.core.rest.call(null, s);
        n__$1 = G__16396;
        coll__$1 = G__16397;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, n, coll);
    };
  }(step), null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__16398 = cljs.core.next.call(null, s);
      var G__16399 = cljs.core.next.call(null, lead);
      s = G__16398;
      lead = G__16399;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3529__auto__ = s;
        if (and__3529__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3529__auto__;
        }
      }())) {
        var G__16400 = pred__$1;
        var G__16401 = cljs.core.rest.call(null, s);
        pred__$1 = G__16400;
        coll__$1 = G__16401;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, pred, coll);
    };
  }(step), null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__16402__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__16402 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16402__delegate.call(this, c1, c2, colls);
    };
    G__16402.cljs$lang$maxFixedArity = 2;
    G__16402.cljs$lang$applyTo = function(arglist__16403) {
      var c1 = cljs.core.first(arglist__16403);
      arglist__16403 = cljs.core.next(arglist__16403);
      var c2 = cljs.core.first(arglist__16403);
      var colls = cljs.core.rest(arglist__16403);
      return G__16402__delegate(c1, c2, colls);
    };
    G__16402.cljs$core$IFn$_invoke$arity$variadic = G__16402__delegate;
    return G__16402;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__16404__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__16404 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16404__delegate.call(this, f, coll, colls);
    };
    G__16404.cljs$lang$maxFixedArity = 2;
    G__16404.cljs$lang$applyTo = function(arglist__16405) {
      var f = cljs.core.first(arglist__16405);
      arglist__16405 = cljs.core.next(arglist__16405);
      var coll = cljs.core.first(arglist__16405);
      var colls = cljs.core.rest(arglist__16405);
      return G__16404__delegate(f, coll, colls);
    };
    G__16404.cljs$core$IFn$_invoke$arity$variadic = G__16404__delegate;
    return G__16404;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4397__auto___16406 = size;
        var i_16407 = 0;
        while (true) {
          if (i_16407 < n__4397__auto___16406) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_16407)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_16407));
            } else {
            }
            var G__16408 = i_16407 + 1;
            i_16407 = G__16408;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__16409_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__16409_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__16411 = to;
      if (G__16411) {
        var bit__4184__auto__ = G__16411.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4184__auto__ || G__16411.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__16412__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__16412 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16412__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__16412.cljs$lang$maxFixedArity = 4;
    G__16412.cljs$lang$applyTo = function(arglist__16413) {
      var f = cljs.core.first(arglist__16413);
      arglist__16413 = cljs.core.next(arglist__16413);
      var c1 = cljs.core.first(arglist__16413);
      arglist__16413 = cljs.core.next(arglist__16413);
      var c2 = cljs.core.first(arglist__16413);
      arglist__16413 = cljs.core.next(arglist__16413);
      var c3 = cljs.core.first(arglist__16413);
      var colls = cljs.core.rest(arglist__16413);
      return G__16412__delegate(f, c1, c2, c3, colls);
    };
    G__16412.cljs$core$IFn$_invoke$arity$variadic = G__16412__delegate;
    return G__16412;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__16415 = m__$1;
          if (G__16415) {
            var bit__4191__auto__ = G__16415.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4191__auto__ || G__16415.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__16415.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__16415);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__16415);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__16416 = sentinel;
            var G__16417 = m__$2;
            var G__16418 = cljs.core.next.call(null, ks__$1);
            sentinel = G__16416;
            m__$1 = G__16417;
            ks__$1 = G__16418;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__16419, v) {
  var vec__16421 = p__16419;
  var k = cljs.core.nth.call(null, vec__16421, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__16421, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__16422, f) {
    var vec__16432 = p__16422;
    var k = cljs.core.nth.call(null, vec__16432, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16432, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__16423, f, a) {
    var vec__16433 = p__16423;
    var k = cljs.core.nth.call(null, vec__16433, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16433, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__16424, f, a, b) {
    var vec__16434 = p__16424;
    var k = cljs.core.nth.call(null, vec__16434, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16434, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__16425, f, a, b, c) {
    var vec__16435 = p__16425;
    var k = cljs.core.nth.call(null, vec__16435, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16435, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__16437__delegate = function(m, p__16426, f, a, b, c, args) {
      var vec__16436 = p__16426;
      var k = cljs.core.nth.call(null, vec__16436, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__16436, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__16437 = function(m, p__16426, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__16437__delegate.call(this, m, p__16426, f, a, b, c, args);
    };
    G__16437.cljs$lang$maxFixedArity = 6;
    G__16437.cljs$lang$applyTo = function(arglist__16438) {
      var m = cljs.core.first(arglist__16438);
      arglist__16438 = cljs.core.next(arglist__16438);
      var p__16426 = cljs.core.first(arglist__16438);
      arglist__16438 = cljs.core.next(arglist__16438);
      var f = cljs.core.first(arglist__16438);
      arglist__16438 = cljs.core.next(arglist__16438);
      var a = cljs.core.first(arglist__16438);
      arglist__16438 = cljs.core.next(arglist__16438);
      var b = cljs.core.first(arglist__16438);
      arglist__16438 = cljs.core.next(arglist__16438);
      var c = cljs.core.first(arglist__16438);
      var args = cljs.core.rest(arglist__16438);
      return G__16437__delegate(m, p__16426, f, a, b, c, args);
    };
    G__16437.cljs$core$IFn$_invoke$arity$variadic = G__16437__delegate;
    return G__16437;
  }();
  update_in = function(m, p__16426, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__16426, f);
      case 4:
        return update_in__4.call(this, m, p__16426, f, a);
      case 5:
        return update_in__5.call(this, m, p__16426, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__16426, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__16426, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4111__auto__, writer__4112__auto__, opts__4113__auto__) {
  return cljs.core._write.call(null, writer__4112__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__16439 = ll - 5;
      var G__16440 = r;
      ll = G__16439;
      ret = G__16440;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__16441 = cljs.core.pv_aget.call(null, node, 0);
      var G__16442 = level - 5;
      node = G__16441;
      level = G__16442;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__16443 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__16444 = level - 5;
        node = G__16443;
        level = G__16444;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__16446 = null;
  var G__16446__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16446__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16446 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16446__2.call(this, self__, k);
      case 3:
        return G__16446__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16446;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args16445) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16445)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__16447 = j + 1;
              var G__16448 = init__$2;
              j = G__16447;
              init__$1 = G__16448;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__16449 = i + step_init[0];
        i = G__16449;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4397__auto___16450 = len;
    var i_16451 = 0;
    while (true) {
      if (i_16451 < n__4397__auto___16450) {
        new_tail[i_16451] = self__.tail[i_16451];
        var G__16452 = i_16451 + 1;
        i_16451 = G__16452;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__16453 = i + 1;
        var G__16454 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__16453;
        out = G__16454;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__16455) {
    var args = cljs.core.seq(arglist__16455);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.call = function() {
  var G__16457 = null;
  var G__16457__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16457__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16457 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16457__2.call(this, self__, k);
      case 3:
        return G__16457__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16457;
}();
cljs.core.Subvec.prototype.apply = function(self__, args16456) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16456)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3848__auto__ = self__.end;
    var y__3849__auto__ = v_pos + 1;
    return x__3848__auto__ > y__3849__auto__ ? x__3848__auto__ : y__3849__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__16458 = meta;
      var G__16459 = v.v;
      var G__16460 = v.start + start;
      var G__16461 = v.start + end;
      var G__16462 = __hash;
      meta = G__16458;
      v = G__16459;
      start = G__16460;
      end = G__16461;
      __hash = G__16462;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj16466 = {};
    return obj16466;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__16467 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__16468 = level - 5;
        node = G__16467;
        level = G__16468;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__16470 = null;
  var G__16470__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16470__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16470 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16470__2.call(this, self__, k);
      case 3:
        return G__16470__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16470;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args16469) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16469)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3541__auto__ = self__.rear;
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3541__auto__ = self__.front;
    if (cljs.core.truth_(or__3541__auto__)) {
      return or__3541__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__16471 = i + incr;
        i = G__16471;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__16472 = i + 1;
      var G__16473 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__16472;
      out = G__16473;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj16477 = {};
    return obj16477;
  }();
  var l = ks.length;
  var i_16478 = 0;
  while (true) {
    if (i_16478 < l) {
      var k_16479 = ks[i_16478];
      new_obj[k_16479] = obj[k_16479];
      var G__16480 = i_16478 + 1;
      i_16478 = G__16480;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__16483 = null;
  var G__16483__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16483__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16483 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16483__2.call(this, self__, k);
      case 3:
        return G__16483__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16483;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args16482) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16482)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16484 = cljs.core.rest.call(null, keys__$1);
        var G__16485 = init__$2;
        keys__$1 = G__16484;
        init__$1 = G__16485;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__16481_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16481_SHARP_, self__.strobj[p1__16481_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj16487 = {};
  return obj16487;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__16488 = i + 2;
          i = G__16488;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__16489 = i + 2;
          i = G__16489;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__16490 = i + 2;
          i = G__16490;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__16491 = i + 2;
          i = G__16491;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__16492 = i + 2;
          i = G__16492;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_16493 = 0;
  while (true) {
    if (i_16493 < l) {
      narr[i_16493] = arr[i_16493];
      var G__16494 = i_16493 + 1;
      i_16493 = G__16494;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj16497 = {};
    return obj16497;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__16498 = cljs.core.aclone.call(null, self__.arr);
          G__16498[idx + 1] = v;
          return G__16498;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__16499 = null;
  var G__16499__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16499__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16499 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16499__2.call(this, self__, k);
      case 3:
        return G__16499__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16499;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args16495) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16495)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16500 = i + 2;
        var G__16501 = init__$2;
        i = G__16500;
        init__$1 = G__16501;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16502 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16503 = cljs.core.next.call(null, es);
          ret = G__16502;
          es = G__16503;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__16504 = s + 2;
            var G__16505 = d;
            s = G__16504;
            d = G__16505;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__16506 = s + 2;
              var G__16507 = d + 2;
              s = G__16506;
              d = G__16507;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16508 = i + 2;
        var G__16509 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__16508;
        ret = G__16509;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__16510_16512 = self__.arr;
      G__16510_16512.pop();
      G__16510_16512.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__16511 = o;
      if (G__16511) {
        var bit__4191__auto__ = G__16511.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4191__auto__ || G__16511.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16511.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16511);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16511);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__16513 = cljs.core.next.call(null, es);
          var G__16514 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__16513;
          tcoll__$2 = G__16514;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__16515 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__16516 = i + 2;
      out = G__16515;
      i = G__16516;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4111__auto__, writer__4112__auto__, opts__4113__auto__) {
  return cljs.core._write.call(null, writer__4112__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__16519 = cljs.core.aclone.call(null, arr);
    G__16519[i] = a;
    return G__16519;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__16520 = cljs.core.aclone.call(null, arr);
    G__16520[i] = a;
    G__16520[j] = b;
    return G__16520;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16521 = i + 2;
        var G__16522 = init__$2;
        i = G__16521;
        init__$1 = G__16522;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_16523 = 0;
        var j_16524 = 0;
        while (true) {
          if (i_16523 < 32) {
            if ((self__.bitmap >>> i_16523 & 1) === 0) {
              var G__16525 = i_16523 + 1;
              var G__16526 = j_16524;
              i_16523 = G__16525;
              j_16524 = G__16526;
              continue;
            } else {
              nodes[i_16523] = !(self__.arr[j_16524] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_16524]), self__.arr[j_16524], self__.arr[j_16524 + 1], added_leaf_QMARK_) : self__.arr[j_16524 + 1];
              var G__16527 = i_16523 + 1;
              var G__16528 = j_16524 + 2;
              i_16523 = G__16527;
              j_16524 = G__16528;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_16529 = 0;
      var j_16530 = 0;
      while (true) {
        if (i_16529 < 32) {
          if ((self__.bitmap >>> i_16529 & 1) === 0) {
            var G__16531 = i_16529 + 1;
            var G__16532 = j_16530;
            i_16529 = G__16531;
            j_16530 = G__16532;
            continue;
          } else {
            nodes[i_16529] = !(self__.arr[j_16530] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_16530]), self__.arr[j_16530], self__.arr[j_16530 + 1], added_leaf_QMARK_) : self__.arr[j_16530 + 1];
            var G__16533 = i_16529 + 1;
            var G__16534 = j_16530 + 2;
            i_16529 = G__16533;
            j_16530 = G__16534;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__16535 = i + 1;
        var G__16536 = j + 2;
        var G__16537 = bitmap | 1 << i;
        i = G__16535;
        j = G__16536;
        bitmap = G__16537;
        continue;
      } else {
        var G__16538 = i + 1;
        var G__16539 = j;
        var G__16540 = bitmap;
        i = G__16538;
        j = G__16539;
        bitmap = G__16540;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__16541 = i + 1;
          var G__16542 = init__$2;
          i = G__16541;
          init__$1 = G__16542;
          continue;
        }
      } else {
        var G__16543 = i + 1;
        var G__16544 = init__$1;
        i = G__16543;
        init__$1 = G__16544;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__16545 = i + 2;
        i = G__16545;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__16546 = j + 2;
                j = G__16546;
                continue;
              }
            } else {
              var G__16547 = j + 2;
              j = G__16547;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__16548 = j + 1;
              j = G__16548;
              continue;
            }
          } else {
            var G__16549 = j + 1;
            j = G__16549;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj16552 = {};
    return obj16552;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__16553 = null;
  var G__16553__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16553__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16553 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16553__2.call(this, self__, k);
      case 3:
        return G__16553__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16553;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args16550) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16550)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16554 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16555 = cljs.core.next.call(null, es);
          ret = G__16554;
          es = G__16555;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__16556 = i + 1;
      var G__16557 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__16556;
      out = G__16557;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__16558 = o;
      if (G__16558) {
        var bit__4191__auto__ = G__16558.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4191__auto__ || G__16558.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16558.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16558);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16558);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__16559 = cljs.core.next.call(null, es);
          var G__16560 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__16559;
          tcoll__$1 = G__16560;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__16561 = ascending_QMARK_ ? t.left : t.right;
      var G__16562 = cljs.core.conj.call(null, stack__$1, t);
      t = G__16561;
      stack__$1 = G__16562;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__16564 = null;
  var G__16564__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16564__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16564 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16564__2.call(this, self__, k);
      case 3:
        return G__16564__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16564;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args16563) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16563)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__16566 = null;
  var G__16566__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16566__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16566 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16566__2.call(this, self__, k);
      case 3:
        return G__16566__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16566;
}();
cljs.core.RedNode.prototype.apply = function(self__, args16565) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16565)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__16568 = null;
  var G__16568__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16568__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16568 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16568__2.call(this, self__, k);
      case 3:
        return G__16568__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16568;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args16567) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16567)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16569 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16570 = cljs.core.next.call(null, es);
          ret = G__16569;
          es = G__16570;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__16571 = t.left;
          t = G__16571;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__16572 = t.right;
            t = G__16572;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__16573 = cljs.core.conj.call(null, stack, t);
              var G__16574 = t.left;
              stack = G__16573;
              t = G__16574;
              continue;
            } else {
              var G__16575 = stack;
              var G__16576 = t.right;
              stack = G__16575;
              t = G__16576;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__16577 = cljs.core.conj.call(null, stack, t);
                var G__16578 = t.right;
                stack = G__16577;
                t = G__16578;
                continue;
              } else {
                var G__16579 = stack;
                var G__16580 = t.left;
                stack = G__16579;
                t = G__16580;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__16581 = cljs.core.nnext.call(null, in$);
        var G__16582 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16581;
        out = G__16582;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__16583) {
    var keyvals = cljs.core.seq(arglist__16583);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__16584) {
    var keyvals = cljs.core.seq(arglist__16584);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj16588 = {};
      return obj16588;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__16589 = cljs.core.nnext.call(null, kvs);
        kvs = G__16589;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__16590) {
    var keyvals = cljs.core.seq(arglist__16590);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__16591 = cljs.core.nnext.call(null, in$);
        var G__16592 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16591;
        out = G__16592;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__16593) {
    var keyvals = cljs.core.seq(arglist__16593);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__16594 = cljs.core.nnext.call(null, in$);
        var G__16595 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16594;
        out = G__16595;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__16596) {
    var comparator = cljs.core.first(arglist__16596);
    var keyvals = cljs.core.rest(arglist__16596);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16597 = self__.mseq;
    if (G__16597) {
      var bit__4191__auto__ = G__16597.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4191__auto__ || G__16597.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16597.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16597);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16597);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16598 = self__.mseq;
    if (G__16598) {
      var bit__4191__auto__ = G__16598.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4191__auto__ || G__16598.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16598.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16598);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16598);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16599 = self__.mseq;
    if (G__16599) {
      var bit__4191__auto__ = G__16599.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4191__auto__ || G__16599.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16599.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16599);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16599);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16600 = self__.mseq;
    if (G__16600) {
      var bit__4191__auto__ = G__16600.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4191__auto__ || G__16600.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16600.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16600);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16600);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__16601_SHARP_, p2__16602_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3541__auto__ = p1__16601_SHARP_;
          if (cljs.core.truth_(or__3541__auto__)) {
            return or__3541__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__16602_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__16603) {
    var maps = cljs.core.seq(arglist__16603);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3541__auto__ = m1;
            if (cljs.core.truth_(or__3541__auto__)) {
              return or__3541__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__16604) {
    var f = cljs.core.first(arglist__16604);
    var maps = cljs.core.rest(arglist__16604);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__16605 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__16606 = cljs.core.next.call(null, keys);
      ret = G__16605;
      keys = G__16606;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__16609 = null;
  var G__16609__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16609__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16609 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16609__2.call(this, self__, k);
      case 3:
        return G__16609__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16609;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args16608) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16608)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16607_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16607_SHARP_);
    };
  }(coll__$1), other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16610 = i + 1;
        var G__16611 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__16610;
        out = G__16611;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__16612 = i + 1;
        var G__16613 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__16612;
        out = G__16613;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__16615 = null;
  var G__16615__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__16615__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__16615 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16615__2.call(this, self__, k);
      case 3:
        return G__16615__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16615;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args16614) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16614)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__16618 = null;
  var G__16618__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16618__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16618 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16618__2.call(this, self__, k);
      case 3:
        return G__16618__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16618;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args16617) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16617)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16616_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16616_SHARP_);
    };
  }(coll__$1), other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4391__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4391__auto__.length) {
        var G__16619 = i + 1;
        var G__16620 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__16619;
        res = G__16620;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__16621 = cljs.core._next.call(null, in$__$1);
            var G__16622 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__16621;
            out = G__16622;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__16623__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__16623 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16623__delegate.call(this, keys);
    };
    G__16623.cljs$lang$maxFixedArity = 0;
    G__16623.cljs$lang$applyTo = function(arglist__16624) {
      var keys = cljs.core.seq(arglist__16624);
      return G__16623__delegate(keys);
    };
    G__16623.cljs$core$IFn$_invoke$arity$variadic = G__16623__delegate;
    return G__16623;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__16625) {
    var keys = cljs.core.seq(arglist__16625);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__16626) {
    var comparator = cljs.core.first(arglist__16626);
    var keys = cljs.core.rest(arglist__16626);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(n) {
      return function(v, i) {
        var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__16627_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__16627_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__16627_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__16634, seen__$1) {
        while (true) {
          var vec__16635 = p__16634;
          var f = cljs.core.nth.call(null, vec__16635, 0, null);
          var xs__$1 = vec__16635;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__16636 = cljs.core.rest.call(null, s);
              var G__16637 = seen__$1;
              p__16634 = G__16636;
              seen__$1 = G__16637;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__16638 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__16639 = cljs.core.next.call(null, s__$1);
      ret = G__16638;
      s__$1 = G__16639;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__16641 = x;
    if (G__16641) {
      var bit__4184__auto__ = G__16641.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4184__auto__ || G__16641.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__16642 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__16643 = cljs.core.next.call(null, ks);
      var G__16644 = cljs.core.next.call(null, vs);
      map = G__16642;
      ks = G__16643;
      vs = G__16644;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__16647__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16645_SHARP_, p2__16646_SHARP_) {
        return max_key.call(null, k, p1__16645_SHARP_, p2__16646_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__16647 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16647__delegate.call(this, k, x, y, more);
    };
    G__16647.cljs$lang$maxFixedArity = 3;
    G__16647.cljs$lang$applyTo = function(arglist__16648) {
      var k = cljs.core.first(arglist__16648);
      arglist__16648 = cljs.core.next(arglist__16648);
      var x = cljs.core.first(arglist__16648);
      arglist__16648 = cljs.core.next(arglist__16648);
      var y = cljs.core.first(arglist__16648);
      var more = cljs.core.rest(arglist__16648);
      return G__16647__delegate(k, x, y, more);
    };
    G__16647.cljs$core$IFn$_invoke$arity$variadic = G__16647__delegate;
    return G__16647;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__16651__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16649_SHARP_, p2__16650_SHARP_) {
        return min_key.call(null, k, p1__16649_SHARP_, p2__16650_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__16651 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16651__delegate.call(this, k, x, y, more);
    };
    G__16651.cljs$lang$maxFixedArity = 3;
    G__16651.cljs$lang$applyTo = function(arglist__16652) {
      var k = cljs.core.first(arglist__16652);
      arglist__16652 = cljs.core.next(arglist__16652);
      var x = cljs.core.first(arglist__16652);
      arglist__16652 = cljs.core.next(arglist__16652);
      var y = cljs.core.first(arglist__16652);
      var more = cljs.core.rest(arglist__16652);
      return G__16651__delegate(k, x, y, more);
    };
    G__16651.cljs$core$IFn$_invoke$arity$variadic = G__16651__delegate;
    return G__16651;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__16655 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__16655, 0, null);
        var s = vec__16655;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__16656 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__16656, 0, null);
      var s = vec__16656;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__16659 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__16659, 0, null);
        var s = vec__16659;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__16660 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__16660, 0, null);
      var s = vec__16660;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4092__auto__) {
        return function(p1__16661_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__16661_SHARP_));
        };
      }(fst, fv, s, temp__4092__auto__), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__16672 = null;
      var G__16672__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__16672__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__16672__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__16672__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__16672__4 = function() {
        var G__16673__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__16673 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16673__delegate.call(this, x, y, z, args);
        };
        G__16673.cljs$lang$maxFixedArity = 3;
        G__16673.cljs$lang$applyTo = function(arglist__16674) {
          var x = cljs.core.first(arglist__16674);
          arglist__16674 = cljs.core.next(arglist__16674);
          var y = cljs.core.first(arglist__16674);
          arglist__16674 = cljs.core.next(arglist__16674);
          var z = cljs.core.first(arglist__16674);
          var args = cljs.core.rest(arglist__16674);
          return G__16673__delegate(x, y, z, args);
        };
        G__16673.cljs$core$IFn$_invoke$arity$variadic = G__16673__delegate;
        return G__16673;
      }();
      G__16672 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16672__0.call(this);
          case 1:
            return G__16672__1.call(this, x);
          case 2:
            return G__16672__2.call(this, x, y);
          case 3:
            return G__16672__3.call(this, x, y, z);
          default:
            return G__16672__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16672.cljs$lang$maxFixedArity = 3;
      G__16672.cljs$lang$applyTo = G__16672__4.cljs$lang$applyTo;
      return G__16672;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__16675 = null;
      var G__16675__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__16675__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__16675__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__16675__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__16675__4 = function() {
        var G__16676__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__16676 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16676__delegate.call(this, x, y, z, args);
        };
        G__16676.cljs$lang$maxFixedArity = 3;
        G__16676.cljs$lang$applyTo = function(arglist__16677) {
          var x = cljs.core.first(arglist__16677);
          arglist__16677 = cljs.core.next(arglist__16677);
          var y = cljs.core.first(arglist__16677);
          arglist__16677 = cljs.core.next(arglist__16677);
          var z = cljs.core.first(arglist__16677);
          var args = cljs.core.rest(arglist__16677);
          return G__16676__delegate(x, y, z, args);
        };
        G__16676.cljs$core$IFn$_invoke$arity$variadic = G__16676__delegate;
        return G__16676;
      }();
      G__16675 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16675__0.call(this);
          case 1:
            return G__16675__1.call(this, x);
          case 2:
            return G__16675__2.call(this, x, y);
          case 3:
            return G__16675__3.call(this, x, y, z);
          default:
            return G__16675__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16675.cljs$lang$maxFixedArity = 3;
      G__16675.cljs$lang$applyTo = G__16675__4.cljs$lang$applyTo;
      return G__16675;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__16678 = null;
      var G__16678__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__16678__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__16678__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__16678__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__16678__4 = function() {
        var G__16679__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__16679 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16679__delegate.call(this, x, y, z, args);
        };
        G__16679.cljs$lang$maxFixedArity = 3;
        G__16679.cljs$lang$applyTo = function(arglist__16680) {
          var x = cljs.core.first(arglist__16680);
          arglist__16680 = cljs.core.next(arglist__16680);
          var y = cljs.core.first(arglist__16680);
          arglist__16680 = cljs.core.next(arglist__16680);
          var z = cljs.core.first(arglist__16680);
          var args = cljs.core.rest(arglist__16680);
          return G__16679__delegate(x, y, z, args);
        };
        G__16679.cljs$core$IFn$_invoke$arity$variadic = G__16679__delegate;
        return G__16679;
      }();
      G__16678 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16678__0.call(this);
          case 1:
            return G__16678__1.call(this, x);
          case 2:
            return G__16678__2.call(this, x, y);
          case 3:
            return G__16678__3.call(this, x, y, z);
          default:
            return G__16678__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16678.cljs$lang$maxFixedArity = 3;
      G__16678.cljs$lang$applyTo = G__16678__4.cljs$lang$applyTo;
      return G__16678;
    }();
  };
  var juxt__4 = function() {
    var G__16681__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__16682 = null;
          var G__16682__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16662_SHARP_, p2__16663_SHARP_) {
                return cljs.core.conj.call(null, p1__16662_SHARP_, p2__16663_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16682__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16664_SHARP_, p2__16665_SHARP_) {
                return cljs.core.conj.call(null, p1__16664_SHARP_, p2__16665_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16682__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16666_SHARP_, p2__16667_SHARP_) {
                return cljs.core.conj.call(null, p1__16666_SHARP_, p2__16667_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16682__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16668_SHARP_, p2__16669_SHARP_) {
                return cljs.core.conj.call(null, p1__16668_SHARP_, p2__16669_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16682__4 = function() {
            var G__16683__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__16670_SHARP_, p2__16671_SHARP_) {
                  return cljs.core.conj.call(null, p1__16670_SHARP_, cljs.core.apply.call(null, p2__16671_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__16683 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16683__delegate.call(this, x, y, z, args);
            };
            G__16683.cljs$lang$maxFixedArity = 3;
            G__16683.cljs$lang$applyTo = function(arglist__16684) {
              var x = cljs.core.first(arglist__16684);
              arglist__16684 = cljs.core.next(arglist__16684);
              var y = cljs.core.first(arglist__16684);
              arglist__16684 = cljs.core.next(arglist__16684);
              var z = cljs.core.first(arglist__16684);
              var args = cljs.core.rest(arglist__16684);
              return G__16683__delegate(x, y, z, args);
            };
            G__16683.cljs$core$IFn$_invoke$arity$variadic = G__16683__delegate;
            return G__16683;
          }();
          G__16682 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__16682__0.call(this);
              case 1:
                return G__16682__1.call(this, x);
              case 2:
                return G__16682__2.call(this, x, y);
              case 3:
                return G__16682__3.call(this, x, y, z);
              default:
                return G__16682__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16682.cljs$lang$maxFixedArity = 3;
          G__16682.cljs$lang$applyTo = G__16682__4.cljs$lang$applyTo;
          return G__16682;
        }();
      }(fs__$1);
    };
    var G__16681 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16681__delegate.call(this, f, g, h, fs);
    };
    G__16681.cljs$lang$maxFixedArity = 3;
    G__16681.cljs$lang$applyTo = function(arglist__16685) {
      var f = cljs.core.first(arglist__16685);
      arglist__16685 = cljs.core.next(arglist__16685);
      var g = cljs.core.first(arglist__16685);
      arglist__16685 = cljs.core.next(arglist__16685);
      var h = cljs.core.first(arglist__16685);
      var fs = cljs.core.rest(arglist__16685);
      return G__16681__delegate(f, g, h, fs);
    };
    G__16681.cljs$core$IFn$_invoke$arity$variadic = G__16681__delegate;
    return G__16681;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__16686 = cljs.core.next.call(null, coll);
        coll = G__16686;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__16687 = n - 1;
        var G__16688 = cljs.core.next.call(null, coll);
        n = G__16687;
        coll = G__16688;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__16690 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__16690, 0, null);
  var flags = cljs.core.nth.call(null, vec__16690, 1, null);
  var pattern = cljs.core.nth.call(null, vec__16690, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_16692 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_16693__$1 = cljs.core.next.call(null, coll);
      var n_16694 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_16693__$1 && (n_16694 == null || !(n_16694 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_16693__$1), writer, opts);
          var G__16695 = cljs.core.next.call(null, coll_16693__$1);
          var G__16696 = n_16694 - 1;
          coll_16693__$1 = G__16695;
          n_16694 = G__16696;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_16693__$1) && n_16694 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_16692;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__16701 = cljs.core.seq.call(null, ss);
    var chunk__16702 = null;
    var count__16703 = 0;
    var i__16704 = 0;
    while (true) {
      if (i__16704 < count__16703) {
        var s = cljs.core._nth.call(null, chunk__16702, i__16704);
        cljs.core._write.call(null, writer, s);
        var G__16705 = seq__16701;
        var G__16706 = chunk__16702;
        var G__16707 = count__16703;
        var G__16708 = i__16704 + 1;
        seq__16701 = G__16705;
        chunk__16702 = G__16706;
        count__16703 = G__16707;
        i__16704 = G__16708;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__16701);
        if (temp__4092__auto__) {
          var seq__16701__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__16701__$1)) {
            var c__4297__auto__ = cljs.core.chunk_first.call(null, seq__16701__$1);
            var G__16709 = cljs.core.chunk_rest.call(null, seq__16701__$1);
            var G__16710 = c__4297__auto__;
            var G__16711 = cljs.core.count.call(null, c__4297__auto__);
            var G__16712 = 0;
            seq__16701 = G__16709;
            chunk__16702 = G__16710;
            count__16703 = G__16711;
            i__16704 = G__16712;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__16701__$1);
            cljs.core._write.call(null, writer, s);
            var G__16713 = cljs.core.next.call(null, seq__16701__$1);
            var G__16714 = null;
            var G__16715 = 0;
            var G__16716 = 0;
            seq__16701 = G__16713;
            chunk__16702 = G__16714;
            count__16703 = G__16715;
            i__16704 = G__16716;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__16717) {
    var writer = cljs.core.first(arglist__16717);
    var ss = cljs.core.rest(arglist__16717);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj16719 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj16719;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3529__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3529__auto__)) {
            var and__3529__auto____$1 = function() {
              var G__16725 = obj;
              if (G__16725) {
                var bit__4191__auto__ = G__16725.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4191__auto__ || G__16725.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__16725.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16725);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16725);
              }
            }();
            if (and__3529__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3529__auto____$1;
            }
          } else {
            return and__3529__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__16726 = obj;
              if (G__16726) {
                var bit__4184__auto__ = G__16726.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4184__auto__ || G__16726.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__16728 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                                ns = G__16728;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__16727 = obj;
                              if (G__16727) {
                                var bit__4191__auto__ = G__16727.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4191__auto__ || G__16727.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__16727.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16727);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16727);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__16733 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__16734 = null;
  var count__16735 = 0;
  var i__16736 = 0;
  while (true) {
    if (i__16736 < count__16735) {
      var obj = cljs.core._nth.call(null, chunk__16734, i__16736);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__16737 = seq__16733;
      var G__16738 = chunk__16734;
      var G__16739 = count__16735;
      var G__16740 = i__16736 + 1;
      seq__16733 = G__16737;
      chunk__16734 = G__16738;
      count__16735 = G__16739;
      i__16736 = G__16740;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__16733);
      if (temp__4092__auto__) {
        var seq__16733__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16733__$1)) {
          var c__4297__auto__ = cljs.core.chunk_first.call(null, seq__16733__$1);
          var G__16741 = cljs.core.chunk_rest.call(null, seq__16733__$1);
          var G__16742 = c__4297__auto__;
          var G__16743 = cljs.core.count.call(null, c__4297__auto__);
          var G__16744 = 0;
          seq__16733 = G__16741;
          chunk__16734 = G__16742;
          count__16735 = G__16743;
          i__16736 = G__16744;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__16733__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__16745 = cljs.core.next.call(null, seq__16733__$1);
          var G__16746 = null;
          var G__16747 = 0;
          var G__16748 = 0;
          seq__16733 = G__16745;
          chunk__16734 = G__16746;
          count__16735 = G__16747;
          i__16736 = G__16748;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__16749) {
    var objs = cljs.core.seq(arglist__16749);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__16750) {
    var objs = cljs.core.seq(arglist__16750);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__16751) {
    var objs = cljs.core.seq(arglist__16751);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__16752) {
    var objs = cljs.core.seq(arglist__16752);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__16753) {
    var objs = cljs.core.seq(arglist__16753);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__16754) {
    var objs = cljs.core.seq(arglist__16754);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__16755) {
    var objs = cljs.core.seq(arglist__16755);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__16756) {
    var objs = cljs.core.seq(arglist__16756);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj16758 = {};
  return obj16758;
}();
cljs.core.IReset = function() {
  var obj16760 = {};
  return obj16760;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3529__auto__ = o;
    if (and__3529__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4168__auto__ = o == null ? null : o;
    return function() {
      var or__3541__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj16762 = {};
  return obj16762;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3529__auto__ = o;
      if (and__3529__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4168__auto__ = o == null ? null : o;
      return function() {
        var or__3541__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3529__auto__ = o;
      if (and__3529__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4168__auto__ = o == null ? null : o;
      return function() {
        var or__3541__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3529__auto__ = o;
      if (and__3529__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4168__auto__ = o == null ? null : o;
      return function() {
        var or__3541__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3529__auto__ = o;
      if (and__3529__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4168__auto__ = o == null ? null : o;
      return function() {
        var or__3541__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__16763 = cljs.core.seq.call(null, self__.watches);
  var chunk__16764 = null;
  var count__16765 = 0;
  var i__16766 = 0;
  while (true) {
    if (i__16766 < count__16765) {
      var vec__16767 = cljs.core._nth.call(null, chunk__16764, i__16766);
      var key = cljs.core.nth.call(null, vec__16767, 0, null);
      var f = cljs.core.nth.call(null, vec__16767, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__16769 = seq__16763;
      var G__16770 = chunk__16764;
      var G__16771 = count__16765;
      var G__16772 = i__16766 + 1;
      seq__16763 = G__16769;
      chunk__16764 = G__16770;
      count__16765 = G__16771;
      i__16766 = G__16772;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__16763);
      if (temp__4092__auto__) {
        var seq__16763__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16763__$1)) {
          var c__4297__auto__ = cljs.core.chunk_first.call(null, seq__16763__$1);
          var G__16773 = cljs.core.chunk_rest.call(null, seq__16763__$1);
          var G__16774 = c__4297__auto__;
          var G__16775 = cljs.core.count.call(null, c__4297__auto__);
          var G__16776 = 0;
          seq__16763 = G__16773;
          chunk__16764 = G__16774;
          count__16765 = G__16775;
          i__16766 = G__16776;
          continue;
        } else {
          var vec__16768 = cljs.core.first.call(null, seq__16763__$1);
          var key = cljs.core.nth.call(null, vec__16768, 0, null);
          var f = cljs.core.nth.call(null, vec__16768, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__16777 = cljs.core.next.call(null, seq__16763__$1);
          var G__16778 = null;
          var G__16779 = 0;
          var G__16780 = 0;
          seq__16763 = G__16777;
          chunk__16764 = G__16778;
          count__16765 = G__16779;
          i__16766 = G__16780;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__16784__delegate = function(x, p__16781) {
      var map__16783 = p__16781;
      var map__16783__$1 = cljs.core.seq_QMARK_.call(null, map__16783) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16783) : map__16783;
      var validator = cljs.core.get.call(null, map__16783__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__16783__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__16784 = function(x, var_args) {
      var p__16781 = null;
      if (arguments.length > 1) {
        p__16781 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16784__delegate.call(this, x, p__16781);
    };
    G__16784.cljs$lang$maxFixedArity = 1;
    G__16784.cljs$lang$applyTo = function(arglist__16785) {
      var x = cljs.core.first(arglist__16785);
      var p__16781 = cljs.core.rest(arglist__16785);
      return G__16784__delegate(x, p__16781);
    };
    G__16784.cljs$core$IFn$_invoke$arity$variadic = G__16784__delegate;
    return G__16784;
  }();
  atom = function(x, var_args) {
    var p__16781 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__16786__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__16786 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16786__delegate.call(this, a, f, x, y, more);
    };
    G__16786.cljs$lang$maxFixedArity = 4;
    G__16786.cljs$lang$applyTo = function(arglist__16787) {
      var a = cljs.core.first(arglist__16787);
      arglist__16787 = cljs.core.next(arglist__16787);
      var f = cljs.core.first(arglist__16787);
      arglist__16787 = cljs.core.next(arglist__16787);
      var x = cljs.core.first(arglist__16787);
      arglist__16787 = cljs.core.next(arglist__16787);
      var y = cljs.core.first(arglist__16787);
      var more = cljs.core.rest(arglist__16787);
      return G__16786__delegate(a, f, x, y, more);
    };
    G__16786.cljs$core$IFn$_invoke$arity$variadic = G__16786__delegate;
    return G__16786;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__16788) {
    var iref = cljs.core.first(arglist__16788);
    arglist__16788 = cljs.core.next(arglist__16788);
    var f = cljs.core.first(arglist__16788);
    var args = cljs.core.rest(arglist__16788);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(___$1) {
    return function(p__16789) {
      var map__16790 = p__16789;
      var map__16790__$1 = cljs.core.seq_QMARK_.call(null, map__16790) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16790) : map__16790;
      var curr_state = map__16790__$1;
      var done = cljs.core.get.call(null, map__16790__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
      if (cljs.core.truth_(done)) {
        return curr_state;
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
      }
    };
  }(___$1)));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj16792 = {};
  return obj16792;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3529__auto__ = x;
    if (and__3529__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4168__auto__ = x == null ? null : x;
    return function() {
      var or__3541__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3529__auto__ = x;
    if (and__3529__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4168__auto__ = x == null ? null : x;
    return function() {
      var or__3541__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__16794 = k;
    if (G__16794) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__16794.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__16794.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16794);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16794);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__16808 = x;
      if (G__16808) {
        var bit__4191__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3541__auto__ = bit__4191__auto__;
          if (cljs.core.truth_(or__3541__auto__)) {
            return or__3541__auto__;
          } else {
            return G__16808.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__16808.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16808);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16808);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj16810 = {};
              return obj16810;
            }();
            var seq__16811_16821 = cljs.core.seq.call(null, x);
            var chunk__16812_16822 = null;
            var count__16813_16823 = 0;
            var i__16814_16824 = 0;
            while (true) {
              if (i__16814_16824 < count__16813_16823) {
                var vec__16815_16825 = cljs.core._nth.call(null, chunk__16812_16822, i__16814_16824);
                var k_16826 = cljs.core.nth.call(null, vec__16815_16825, 0, null);
                var v_16827 = cljs.core.nth.call(null, vec__16815_16825, 1, null);
                m[cljs.core.key__GT_js.call(null, k_16826)] = clj__GT_js.call(null, v_16827);
                var G__16828 = seq__16811_16821;
                var G__16829 = chunk__16812_16822;
                var G__16830 = count__16813_16823;
                var G__16831 = i__16814_16824 + 1;
                seq__16811_16821 = G__16828;
                chunk__16812_16822 = G__16829;
                count__16813_16823 = G__16830;
                i__16814_16824 = G__16831;
                continue;
              } else {
                var temp__4092__auto___16832 = cljs.core.seq.call(null, seq__16811_16821);
                if (temp__4092__auto___16832) {
                  var seq__16811_16833__$1 = temp__4092__auto___16832;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__16811_16833__$1)) {
                    var c__4297__auto___16834 = cljs.core.chunk_first.call(null, seq__16811_16833__$1);
                    var G__16835 = cljs.core.chunk_rest.call(null, seq__16811_16833__$1);
                    var G__16836 = c__4297__auto___16834;
                    var G__16837 = cljs.core.count.call(null, c__4297__auto___16834);
                    var G__16838 = 0;
                    seq__16811_16821 = G__16835;
                    chunk__16812_16822 = G__16836;
                    count__16813_16823 = G__16837;
                    i__16814_16824 = G__16838;
                    continue;
                  } else {
                    var vec__16816_16839 = cljs.core.first.call(null, seq__16811_16833__$1);
                    var k_16840 = cljs.core.nth.call(null, vec__16816_16839, 0, null);
                    var v_16841 = cljs.core.nth.call(null, vec__16816_16839, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_16840)] = clj__GT_js.call(null, v_16841);
                    var G__16842 = cljs.core.next.call(null, seq__16811_16833__$1);
                    var G__16843 = null;
                    var G__16844 = 0;
                    var G__16845 = 0;
                    seq__16811_16821 = G__16842;
                    chunk__16812_16822 = G__16843;
                    count__16813_16823 = G__16844;
                    i__16814_16824 = G__16845;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__16817_16846 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__16818_16847 = null;
              var count__16819_16848 = 0;
              var i__16820_16849 = 0;
              while (true) {
                if (i__16820_16849 < count__16819_16848) {
                  var x_16850__$1 = cljs.core._nth.call(null, chunk__16818_16847, i__16820_16849);
                  arr.push(x_16850__$1);
                  var G__16851 = seq__16817_16846;
                  var G__16852 = chunk__16818_16847;
                  var G__16853 = count__16819_16848;
                  var G__16854 = i__16820_16849 + 1;
                  seq__16817_16846 = G__16851;
                  chunk__16818_16847 = G__16852;
                  count__16819_16848 = G__16853;
                  i__16820_16849 = G__16854;
                  continue;
                } else {
                  var temp__4092__auto___16855 = cljs.core.seq.call(null, seq__16817_16846);
                  if (temp__4092__auto___16855) {
                    var seq__16817_16856__$1 = temp__4092__auto___16855;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__16817_16856__$1)) {
                      var c__4297__auto___16857 = cljs.core.chunk_first.call(null, seq__16817_16856__$1);
                      var G__16858 = cljs.core.chunk_rest.call(null, seq__16817_16856__$1);
                      var G__16859 = c__4297__auto___16857;
                      var G__16860 = cljs.core.count.call(null, c__4297__auto___16857);
                      var G__16861 = 0;
                      seq__16817_16846 = G__16858;
                      chunk__16818_16847 = G__16859;
                      count__16819_16848 = G__16860;
                      i__16820_16849 = G__16861;
                      continue;
                    } else {
                      var x_16862__$1 = cljs.core.first.call(null, seq__16817_16856__$1);
                      arr.push(x_16862__$1);
                      var G__16863 = cljs.core.next.call(null, seq__16817_16856__$1);
                      var G__16864 = null;
                      var G__16865 = 0;
                      var G__16866 = 0;
                      seq__16817_16846 = G__16863;
                      chunk__16818_16847 = G__16864;
                      count__16819_16848 = G__16865;
                      i__16820_16849 = G__16866;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj16868 = {};
  return obj16868;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3529__auto__ = x;
    if (and__3529__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4168__auto__ = x == null ? null : x;
    return function() {
      var or__3541__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__16889__delegate = function(x, opts) {
      if (function() {
        var G__16879 = x;
        if (G__16879) {
          var bit__4191__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3541__auto__ = bit__4191__auto__;
            if (cljs.core.truth_(or__3541__auto__)) {
              return or__3541__auto__;
            } else {
              return G__16879.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__16879.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16879);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16879);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__16880 = opts;
          var map__16880__$1 = cljs.core.seq_QMARK_.call(null, map__16880) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16880) : map__16880;
          var keywordize_keys = cljs.core.get.call(null, map__16880__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__16880, map__16880__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4266__auto__ = function(map__16880, map__16880__$1, keywordize_keys, keyfn) {
                          return function iter__16885(s__16886) {
                            return new cljs.core.LazySeq(null, function(map__16880, map__16880__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__16886__$1 = s__16886;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__16886__$1);
                                  if (temp__4092__auto__) {
                                    var s__16886__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__16886__$2)) {
                                      var c__4264__auto__ = cljs.core.chunk_first.call(null, s__16886__$2);
                                      var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                                      var b__16888 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                                      if (function() {
                                        var i__16887 = 0;
                                        while (true) {
                                          if (i__16887 < size__4265__auto__) {
                                            var k = cljs.core._nth.call(null, c__4264__auto__, i__16887);
                                            cljs.core.chunk_append.call(null, b__16888, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__16890 = i__16887 + 1;
                                            i__16887 = G__16890;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16888), iter__16885.call(null, cljs.core.chunk_rest.call(null, s__16886__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16888), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__16886__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__16885.call(null, cljs.core.rest.call(null, s__16886__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__16880, map__16880__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__16880, map__16880__$1, keywordize_keys, keyfn);
                        return iter__4266__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__16880, map__16880__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__16889 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16889__delegate.call(this, x, opts);
    };
    G__16889.cljs$lang$maxFixedArity = 1;
    G__16889.cljs$lang$applyTo = function(arglist__16891) {
      var x = cljs.core.first(arglist__16891);
      var opts = cljs.core.rest(arglist__16891);
      return G__16889__delegate(x, opts);
    };
    G__16889.cljs$core$IFn$_invoke$arity$variadic = G__16889__delegate;
    return G__16889;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__16892__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__16892 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16892__delegate.call(this, args);
      };
      G__16892.cljs$lang$maxFixedArity = 0;
      G__16892.cljs$lang$applyTo = function(arglist__16893) {
        var args = cljs.core.seq(arglist__16893);
        return G__16892__delegate(args);
      };
      G__16892.cljs$core$IFn$_invoke$arity$variadic = G__16892__delegate;
      return G__16892;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__16894 = ret;
        f = G__16894;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__16895__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__16895 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16895__delegate.call(this, f, args);
    };
    G__16895.cljs$lang$maxFixedArity = 1;
    G__16895.cljs$lang$applyTo = function(arglist__16896) {
      var f = cljs.core.first(arglist__16896);
      var args = cljs.core.rest(arglist__16896);
      return G__16895__delegate(f, args);
    };
    G__16895.cljs$core$IFn$_invoke$arity$variadic = G__16895__delegate;
    return G__16895;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__16897) {
    var f = cljs.core.first(arglist__16897);
    var args = cljs.core.rest(arglist__16897);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3541__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3541__auto__) {
      return or__3541__auto__;
    } else {
      var or__3541__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3541__auto____$1) {
        return or__3541__auto____$1;
      } else {
        var and__3529__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3529__auto__) {
          var and__3529__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3529__auto____$1) {
            var and__3529__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3529__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__16898 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__16899 = i + 1;
                  ret = G__16898;
                  i = G__16899;
                  continue;
                }
                break;
              }
            } else {
              return and__3529__auto____$2;
            }
          } else {
            return and__3529__auto____$1;
          }
        } else {
          return and__3529__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3541__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3541__auto__)) {
      return or__3541__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__16900_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__16900_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__16900_SHARP_), cljs.core.second.call(null, p1__16900_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__16901_SHARP_, p2__16902_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__16901_SHARP_, p2__16902_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3541__auto__ = cljs.core.truth_(function() {
    var and__3529__auto__ = xprefs;
    if (cljs.core.truth_(and__3529__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3529__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3541__auto__)) {
    return or__3541__auto__;
  } else {
    var or__3541__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__16903 = cljs.core.rest.call(null, ps);
          ps = G__16903;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3541__auto____$1)) {
      return or__3541__auto____$1;
    } else {
      var or__3541__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__16904 = cljs.core.rest.call(null, ps);
            ps = G__16904;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3541__auto____$2)) {
        return or__3541__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3541__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3541__auto__)) {
    return or__3541__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__16907) {
    var vec__16908 = p__16907;
    var k = cljs.core.nth.call(null, vec__16908, 0, null);
    var _ = cljs.core.nth.call(null, vec__16908, 1, null);
    var e = vec__16908;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3541__auto__ = be == null;
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj16910 = {};
  return obj16910;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3529__auto__ = mf;
    if (and__3529__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4168__auto__ = mf == null ? null : mf;
    return function() {
      var or__3541__auto__ = cljs.core._reset[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._reset["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3529__auto__ = mf;
    if (and__3529__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4168__auto__ = mf == null ? null : mf;
    return function() {
      var or__3541__auto__ = cljs.core._add_method[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._add_method["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3529__auto__ = mf;
    if (and__3529__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4168__auto__ = mf == null ? null : mf;
    return function() {
      var or__3541__auto__ = cljs.core._remove_method[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._remove_method["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3529__auto__ = mf;
    if (and__3529__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4168__auto__ = mf == null ? null : mf;
    return function() {
      var or__3541__auto__ = cljs.core._prefer_method[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3529__auto__ = mf;
    if (and__3529__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4168__auto__ = mf == null ? null : mf;
    return function() {
      var or__3541__auto__ = cljs.core._get_method[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._get_method["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3529__auto__ = mf;
    if (and__3529__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4168__auto__ = mf == null ? null : mf;
    return function() {
      var or__3541__auto__ = cljs.core._methods[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._methods["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3529__auto__ = mf;
    if (and__3529__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4168__auto__ = mf == null ? null : mf;
    return function() {
      var or__3541__auto__ = cljs.core._prefers[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core._prefers["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__16912 = null;
  var G__16912__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__16912__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__16912__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__16912__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__16912__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__16912__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__16912__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__16912__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__16912__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__16912__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__16912__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__16912__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__16912__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__16912__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__16912__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__16912__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__16912__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__16912__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__16912__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__16912__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__16912__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__16912 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__16912__2.call(this, self__, a);
      case 3:
        return G__16912__3.call(this, self__, a, b);
      case 4:
        return G__16912__4.call(this, self__, a, b, c);
      case 5:
        return G__16912__5.call(this, self__, a, b, c, d);
      case 6:
        return G__16912__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__16912__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__16912__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__16912__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__16912__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__16912__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__16912__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__16912__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__16912__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__16912__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__16912__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__16912__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__16912__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__16912__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__16912__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__16912__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__16912__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16912;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args16911) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16911)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4111__auto__, writer__4112__auto__, opts__4113__auto__) {
  return cljs.core._write.call(null, writer__4112__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || (width == "" || replacement.length >= width)) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("schema.utils");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
goog.require("goog.string.format");
schema.utils.assoc_when = function() {
  var assoc_when__delegate = function(m, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null))))));
    }
    return cljs.core.into.call(null, function() {
      var or__3541__auto__ = m;
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var iter__4266__auto__ = function iter__15282(s__15283) {
        return new cljs.core.LazySeq(null, function() {
          var s__15283__$1 = s__15283;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__15283__$1);
            if (temp__4092__auto__) {
              var s__15283__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__15283__$2)) {
                var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15283__$2);
                var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                var b__15285 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                if (function() {
                  var i__15284 = 0;
                  while (true) {
                    if (i__15284 < size__4265__auto__) {
                      var vec__15288 = cljs.core._nth.call(null, c__4264__auto__, i__15284);
                      var k = cljs.core.nth.call(null, vec__15288, 0, null);
                      var v = cljs.core.nth.call(null, vec__15288, 1, null);
                      if (cljs.core.truth_(v)) {
                        cljs.core.chunk_append.call(null, b__15285, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                        var G__15290 = i__15284 + 1;
                        i__15284 = G__15290;
                        continue;
                      } else {
                        var G__15291 = i__15284 + 1;
                        i__15284 = G__15291;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15285), iter__15282.call(null, cljs.core.chunk_rest.call(null, s__15283__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15285), null);
                }
              } else {
                var vec__15289 = cljs.core.first.call(null, s__15283__$2);
                var k = cljs.core.nth.call(null, vec__15289, 0, null);
                var v = cljs.core.nth.call(null, vec__15289, 1, null);
                if (cljs.core.truth_(v)) {
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__15282.call(null, cljs.core.rest.call(null, s__15283__$2)));
                } else {
                  var G__15292 = cljs.core.rest.call(null, s__15283__$2);
                  s__15283__$1 = G__15292;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4266__auto__.call(null, cljs.core.partition.call(null, 2, kvs));
    }());
  };
  var assoc_when = function(m, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return assoc_when__delegate.call(this, m, kvs);
  };
  assoc_when.cljs$lang$maxFixedArity = 1;
  assoc_when.cljs$lang$applyTo = function(arglist__15293) {
    var m = cljs.core.first(arglist__15293);
    var kvs = cljs.core.rest(arglist__15293);
    return assoc_when__delegate(m, kvs);
  };
  assoc_when.cljs$core$IFn$_invoke$arity$variadic = assoc_when__delegate;
  return assoc_when;
}();
schema.utils.type_of = function type_of(x) {
  return typeof x;
};
schema.utils.fn_schema_bearer = function fn_schema_bearer(f) {
  return f;
};
schema.utils.format_STAR_ = function() {
  var format_STAR___delegate = function(fmt, args) {
    return cljs.core.apply.call(null, goog.string.format, fmt, args);
  };
  var format_STAR_ = function(fmt, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return format_STAR___delegate.call(this, fmt, args);
  };
  format_STAR_.cljs$lang$maxFixedArity = 1;
  format_STAR_.cljs$lang$applyTo = function(arglist__15294) {
    var fmt = cljs.core.first(arglist__15294);
    var args = cljs.core.rest(arglist__15294);
    return format_STAR___delegate(fmt, args);
  };
  format_STAR_.cljs$core$IFn$_invoke$arity$variadic = format_STAR___delegate;
  return format_STAR_;
}();
schema.utils.value_name = function value_name(value) {
  var t = schema.utils.type_of.call(null, value);
  if (cljs.core.count.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(value)) < 20) {
    return value;
  } else {
    return cljs.core.symbol.call(null, "a-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(t));
  }
};
schema.utils.ValidationError = function(schema, value, expectation_delay, fail_explanation) {
  this.schema = schema;
  this.value = value;
  this.expectation_delay = expectation_delay;
  this.fail_explanation = fail_explanation;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2147483648;
};
schema.utils.ValidationError.cljs$lang$type = true;
schema.utils.ValidationError.cljs$lang$ctorStr = "schema.utils/ValidationError";
schema.utils.ValidationError.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "schema.utils/ValidationError");
};
schema.utils.ValidationError.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._pr_writer.call(null, schema.utils.validation_error_explain.call(null, this$__$1), writer, opts);
};
schema.utils.__GT_ValidationError = function __GT_ValidationError(schema__$1, value, expectation_delay, fail_explanation) {
  return new schema.utils.ValidationError(schema__$1, value, expectation_delay, fail_explanation);
};
schema.utils.validation_error_explain = function validation_error_explain(err) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.deref.call(null, err.expectation_delay)), function() {
    var or__3541__auto__ = err.fail_explanation;
    if (cljs.core.truth_(or__3541__auto__)) {
      return or__3541__auto__;
    } else {
      return new cljs.core.Symbol(null, "not", "not", -1640422260, null);
    }
  }());
};
schema.utils.__GT_ValidationError = function __GT_ValidationError(schema__$1, value, expectation_delay, fail_explanation) {
  return new schema.utils.ValidationError(schema__$1, value, expectation_delay, fail_explanation);
};
schema.utils.NamedError = function(name, error) {
  this.name = name;
  this.error = error;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2147483648;
};
schema.utils.NamedError.cljs$lang$type = true;
schema.utils.NamedError.cljs$lang$ctorStr = "schema.utils/NamedError";
schema.utils.NamedError.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "schema.utils/NamedError");
};
schema.utils.NamedError.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._pr_writer.call(null, schema.utils.named_error_explain.call(null, this$__$1), writer, opts);
};
schema.utils.__GT_NamedError = function __GT_NamedError(name, error) {
  return new schema.utils.NamedError(name, error);
};
schema.utils.named_error_explain = function named_error_explain(err) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, err.name), err.error), new cljs.core.Symbol(null, "named", "named", -1535946510, null));
};
schema.utils.__GT_NamedError = function __GT_NamedError(name, error) {
  return new schema.utils.NamedError(name, error);
};
schema.utils.ErrorContainer = function(error, __meta, __extmap) {
  this.error = error;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.utils.ErrorContainer.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15296, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15298 = k15296 instanceof cljs.core.Keyword ? k15296.fqn : null;
  var caseval__15302;
  switch(G__15298) {
    case "error":
      caseval__15302 = self__.error;
      break;
    default:
      caseval__15302 = cljs.core.get.call(null, self__.__extmap, k15296, else__4130__auto__);
  }
  return caseval__15302;
};
schema.utils.ErrorContainer.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15295) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15299 = cljs.core.keyword_identical_QMARK_;
  var expr__15300 = k__4135__auto__;
  if (cljs.core.truth_(pred__15299.call(null, new cljs.core.Keyword(null, "error", "error", 1110689146), expr__15300))) {
    return new schema.utils.ErrorContainer(G__15295, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.utils.ErrorContainer(self__.error, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15295), null);
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.utils.ErrorContainer{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", 1110689146), self__.error], null)], null), self__.__extmap));
};
schema.utils.ErrorContainer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", 1110689146), self__.error], null)], null), self__.__extmap));
};
schema.utils.ErrorContainer.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.utils.ErrorContainer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15295) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.utils.ErrorContainer(self__.error, G__15295, self__.__extmap, self__.__hash);
};
schema.utils.ErrorContainer.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.utils.ErrorContainer(self__.error, self__.__meta, self__.__extmap, self__.__hash);
};
schema.utils.ErrorContainer.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.utils.ErrorContainer.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "error", "error", 1110689146), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.utils.ErrorContainer(self__.error, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.utils.ErrorContainer.cljs$lang$type = true;
schema.utils.ErrorContainer.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.utils/ErrorContainer");
};
schema.utils.ErrorContainer.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.utils/ErrorContainer");
};
schema.utils.__GT_ErrorContainer = function __GT_ErrorContainer(error) {
  return new schema.utils.ErrorContainer(error);
};
schema.utils.map__GT_ErrorContainer = function map__GT_ErrorContainer(G__15297) {
  return new schema.utils.ErrorContainer((new cljs.core.Keyword(null, "error", "error", 1110689146)).cljs$core$IFn$_invoke$arity$1(G__15297), null, cljs.core.dissoc.call(null, G__15297, new cljs.core.Keyword(null, "error", "error", 1110689146)));
};
schema.utils.error = function error(x) {
  if (cljs.core.truth_(x)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "x", "x", -1640531407, null))));
  }
  return schema.utils.__GT_ErrorContainer.call(null, x);
};
schema.utils.error_QMARK_ = function error_QMARK_(x) {
  return x instanceof schema.utils.ErrorContainer;
};
schema.utils.error_val = function error_val(x) {
  if (schema.utils.error_QMARK_.call(null, x)) {
    return x.error;
  } else {
    return null;
  }
};
schema.utils.wrap_error_name = function wrap_error_name(name, maybe_error) {
  var temp__4090__auto__ = schema.utils.error_val.call(null, maybe_error);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var e = temp__4090__auto__;
    return schema.utils.error.call(null, schema.utils.__GT_NamedError.call(null, name, e));
  } else {
    return maybe_error;
  }
};
schema.utils.result_builder = function result_builder(lift_to_error) {
  return function conjer(m, e) {
    var temp__4090__auto__ = schema.utils.error_val.call(null, e);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var err = temp__4090__auto__;
      return schema.utils.error.call(null, cljs.core.conj.call(null, function() {
        var or__3541__auto__ = schema.utils.error_val.call(null, m);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return lift_to_error.call(null, m);
        }
      }(), err));
    } else {
      var temp__4090__auto____$1 = schema.utils.error_val.call(null, m);
      if (cljs.core.truth_(temp__4090__auto____$1)) {
        var merr = temp__4090__auto____$1;
        return schema.utils.error.call(null, cljs.core.conj.call(null, merr, null));
      } else {
        return cljs.core.conj.call(null, m, e);
      }
    }
  };
};
schema.utils.declare_class_schema_BANG_ = function declare_class_schema_BANG_(klass, schema__$1) {
  return klass["schema$utils$schema"] = schema__$1;
};
schema.utils.class_schema = function class_schema(klass) {
  return klass["schema$utils$schema"];
};
schema.utils.PSimpleCell = function() {
  var obj15304 = {};
  return obj15304;
}();
schema.utils.get_cell = function get_cell(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.schema$utils$PSimpleCell$get_cell$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.schema$utils$PSimpleCell$get_cell$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = schema.utils.get_cell[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = schema.utils.get_cell["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PSimpleCell.get_cell", this$);
        }
      }
    }().call(null, this$);
  }
};
schema.utils.set_cell = function set_cell(this$, x) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.schema$utils$PSimpleCell$set_cell$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.schema$utils$PSimpleCell$set_cell$arity$2(this$, x);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = schema.utils.set_cell[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = schema.utils.set_cell["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PSimpleCell.set_cell", this$);
        }
      }
    }().call(null, this$, x);
  }
};
schema.utils.SimpleVCell = function(q) {
  this.q = q;
};
schema.utils.SimpleVCell.cljs$lang$type = true;
schema.utils.SimpleVCell.cljs$lang$ctorStr = "schema.utils/SimpleVCell";
schema.utils.SimpleVCell.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "schema.utils/SimpleVCell");
};
schema.utils.SimpleVCell.prototype.schema$utils$PSimpleCell$ = true;
schema.utils.SimpleVCell.prototype.schema$utils$PSimpleCell$get_cell$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.q;
};
schema.utils.SimpleVCell.prototype.schema$utils$PSimpleCell$set_cell$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return self__.q = x;
};
schema.utils.__GT_SimpleVCell = function __GT_SimpleVCell(q) {
  return new schema.utils.SimpleVCell(q);
};
schema.utils.use_fn_validation = new schema.utils.SimpleVCell(false);
schema.utils.use_fn_validation.get_cell = cljs.core.partial.call(null, schema.utils.get_cell, schema.utils.use_fn_validation);
schema.utils.use_fn_validation.set_cell = cljs.core.partial.call(null, schema.utils.set_cell, schema.utils.use_fn_validation);
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__15846 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__15846;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__15850 = cljs.core._EQ_;
    var expr__15851 = limit;
    if (cljs.core.truth_(pred__15850.call(null, 1, expr__15851))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__15850.call(null, 2, expr__15851))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__15853 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__15854 = limit__$1 - 1;
            var G__15855 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__15853;
            limit__$1 = G__15854;
            parts = G__15855;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__15856 = index - 1;
        index = G__15856;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___15857 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___15857)) {
        var replacement_15858 = temp__4090__auto___15857;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_15858));
      } else {
        buffer.append(ch);
      }
      var G__15859 = index + 1;
      index = G__15859;
      continue;
    }
    break;
  }
};
goog.provide("schema.core");
goog.require("cljs.core");
goog.require("schema.utils");
goog.require("schema.utils");
goog.require("clojure.string");
goog.require("clojure.string");
schema.core.Schema = function() {
  var obj15601 = {};
  return obj15601;
}();
schema.core.walker = function walker(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.schema$core$Schema$walker$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.schema$core$Schema$walker$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = schema.core.walker[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = schema.core.walker["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Schema.walker", this$);
        }
      }
    }().call(null, this$);
  }
};
schema.core.explain = function explain(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.schema$core$Schema$explain$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.schema$core$Schema$explain$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = schema.core.explain[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = schema.core.explain["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Schema.explain", this$);
        }
      }
    }().call(null, this$);
  }
};
schema.core.subschema_walker = function subschema_walker(s) {
  throw new Error("Walking is unsupported outside of start-walker; all composite schemas must eagerly bind subschema-walkers outside the returned walker.");
};
schema.core.start_walker = function start_walker(sub_walker, schema__$1) {
  var subschema_walker15603 = schema.core.subschema_walker;
  try {
    schema.core.subschema_walker = sub_walker;
    return schema.core.subschema_walker.call(null, schema__$1);
  } finally {
    schema.core.subschema_walker = subschema_walker15603;
  }
};
schema.core.checker = function checker(schema__$1) {
  return cljs.core.comp.call(null, schema.utils.error_val, schema.core.start_walker.call(null, schema.core.walker, schema__$1));
};
schema.core.check = function check(schema__$1, x) {
  return schema.core.checker.call(null, schema__$1).call(null, x);
};
schema.core.validate = function validate(schema__$1, value) {
  var temp__4092__auto___15604 = schema.core.check.call(null, schema__$1, value);
  if (cljs.core.truth_(temp__4092__auto___15604)) {
    var error_15605 = temp__4092__auto___15604;
    throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Value does not match schema: %s", cljs.core.pr_str.call(null, error_15605)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), schema__$1, new cljs.core.Keyword(null, "value", "value", 1125876963), value, new cljs.core.Keyword(null, "error", "error", 1110689146), error_15605], null));
  } else {
  }
  return value;
};
schema.core.Schema["function"] = true;
schema.core.walker["function"] = function(this$) {
  var class_walker = function() {
    var temp__4090__auto__ = schema.utils.class_schema.call(null, this$);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var more_schema = temp__4090__auto__;
      return schema.core.subschema_walker.call(null, more_schema);
    } else {
      return cljs.core.identity;
    }
  }();
  return function(class_walker) {
    return function(x) {
      var or__3541__auto__ = x == null || cljs.core.not.call(null, function() {
        var or__3541__auto__ = this$ === x.constructor;
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          return x instanceof this$;
        }
      }()) ? schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(class_walker) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), this$), new cljs.core.Symbol(null, "instance?", "instance?", -1611433981, null));
        };
      }(class_walker)), null)) : null;
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return class_walker.call(null, x);
      }
    };
  }(class_walker);
};
schema.core.explain["function"] = function(this$) {
  var temp__4090__auto__ = schema.utils.class_schema.call(null, this$);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var more_schema = temp__4090__auto__;
    return schema.core.explain.call(null, more_schema);
  } else {
    return this$;
  }
};
schema.core.AnythingSchema = function(_, __meta, __extmap) {
  this._ = _;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.AnythingSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.AnythingSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.AnythingSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15607, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15609 = k15607 instanceof cljs.core.Keyword ? k15607.fqn : null;
  var caseval__15613;
  switch(G__15609) {
    case "_":
      caseval__15613 = self__._;
      break;
    default:
      caseval__15613 = cljs.core.get.call(null, self__.__extmap, k15607, else__4130__auto__);
  }
  return caseval__15613;
};
schema.core.AnythingSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15606) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15610 = cljs.core.keyword_identical_QMARK_;
  var expr__15611 = k__4135__auto__;
  if (cljs.core.truth_(pred__15610.call(null, new cljs.core.Keyword(null, "_", "_", 1013904337), expr__15611))) {
    return new schema.core.AnythingSchema(G__15606, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.AnythingSchema(self__._, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15606), null);
  }
};
schema.core.AnythingSchema.prototype.schema$core$Schema$ = true;
schema.core.AnythingSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.identity;
};
schema.core.AnythingSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.Symbol(null, "Any", "Any", -1640465531, null);
};
schema.core.AnythingSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.AnythingSchema{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "_", "_", 1013904337), self__._], null)], null), self__.__extmap));
};
schema.core.AnythingSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.AnythingSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "_", "_", 1013904337), self__._], null)], null), self__.__extmap));
};
schema.core.AnythingSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.AnythingSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.AnythingSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15606) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.AnythingSchema(self__._, G__15606, self__.__extmap, self__.__hash);
};
schema.core.AnythingSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.AnythingSchema(self__._, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.AnythingSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.AnythingSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "_", "_", 1013904337), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.AnythingSchema(self__._, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.AnythingSchema.cljs$lang$type = true;
schema.core.AnythingSchema.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/AnythingSchema");
};
schema.core.AnythingSchema.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/AnythingSchema");
};
schema.core.__GT_AnythingSchema = function __GT_AnythingSchema(_) {
  return new schema.core.AnythingSchema(_);
};
schema.core.map__GT_AnythingSchema = function map__GT_AnythingSchema(G__15608) {
  return new schema.core.AnythingSchema((new cljs.core.Keyword(null, "_", "_", 1013904337)).cljs$core$IFn$_invoke$arity$1(G__15608), null, cljs.core.dissoc.call(null, G__15608, new cljs.core.Keyword(null, "_", "_", 1013904337)));
};
schema.core.Any = new schema.core.AnythingSchema(null);
schema.core.EqSchema = function(v, __meta, __extmap) {
  this.v = v;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.EqSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.EqSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.EqSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15615, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15617 = k15615 instanceof cljs.core.Keyword ? k15615.fqn : null;
  var caseval__15621;
  switch(G__15617) {
    case "v":
      caseval__15621 = self__.v;
      break;
    default:
      caseval__15621 = cljs.core.get.call(null, self__.__extmap, k15615, else__4130__auto__);
  }
  return caseval__15621;
};
schema.core.EqSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15614) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15618 = cljs.core.keyword_identical_QMARK_;
  var expr__15619 = k__4135__auto__;
  if (cljs.core.truth_(pred__15618.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), expr__15619))) {
    return new schema.core.EqSchema(G__15614, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.EqSchema(self__.v, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15614), null);
  }
};
schema.core.EqSchema.prototype.schema$core$Schema$ = true;
schema.core.EqSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core._EQ_.call(null, self__.v, x)) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), self__.v), new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null));
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.EqSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.v), new cljs.core.Symbol(null, "eq", "eq", -1640528283, null));
};
schema.core.EqSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.EqSchema{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null)], null), self__.__extmap));
};
schema.core.EqSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.EqSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null)], null), self__.__extmap));
};
schema.core.EqSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.EqSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.EqSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15614) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.EqSchema(self__.v, G__15614, self__.__extmap, self__.__hash);
};
schema.core.EqSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.EqSchema(self__.v, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.EqSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.EqSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "v", "v", 1013904360), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.EqSchema(self__.v, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.EqSchema.cljs$lang$type = true;
schema.core.EqSchema.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/EqSchema");
};
schema.core.EqSchema.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/EqSchema");
};
schema.core.__GT_EqSchema = function __GT_EqSchema(v) {
  return new schema.core.EqSchema(v);
};
schema.core.map__GT_EqSchema = function map__GT_EqSchema(G__15616) {
  return new schema.core.EqSchema((new cljs.core.Keyword(null, "v", "v", 1013904360)).cljs$core$IFn$_invoke$arity$1(G__15616), null, cljs.core.dissoc.call(null, G__15616, new cljs.core.Keyword(null, "v", "v", 1013904360)));
};
schema.core.eq = function eq(v) {
  return new schema.core.EqSchema(v);
};
schema.core.EnumSchema = function(vs, __meta, __extmap) {
  this.vs = vs;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.EnumSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.EnumSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.EnumSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15623, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15625 = k15623 instanceof cljs.core.Keyword ? k15623.fqn : null;
  var caseval__15629;
  switch(G__15625) {
    case "vs":
      caseval__15629 = self__.vs;
      break;
    default:
      caseval__15629 = cljs.core.get.call(null, self__.__extmap, k15623, else__4130__auto__);
  }
  return caseval__15629;
};
schema.core.EnumSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15622) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15626 = cljs.core.keyword_identical_QMARK_;
  var expr__15627 = k__4135__auto__;
  if (cljs.core.truth_(pred__15626.call(null, new cljs.core.Keyword(null, "vs", "vs", 1013908015), expr__15627))) {
    return new schema.core.EnumSchema(G__15622, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.EnumSchema(self__.vs, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15622), null);
  }
};
schema.core.EnumSchema.prototype.schema$core$Schema$ = true;
schema.core.EnumSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core.contains_QMARK_.call(null, self__.vs, x)) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), self__.vs);
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.EnumSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "enum", "enum", -1637413190, null), self__.vs);
};
schema.core.EnumSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.EnumSchema{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "vs", "vs", 1013908015), self__.vs], null)], null), self__.__extmap));
};
schema.core.EnumSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.EnumSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "vs", "vs", 1013908015), self__.vs], null)], null), self__.__extmap));
};
schema.core.EnumSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.EnumSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.EnumSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15622) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.EnumSchema(self__.vs, G__15622, self__.__extmap, self__.__hash);
};
schema.core.EnumSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.EnumSchema(self__.vs, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.EnumSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.EnumSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "vs", "vs", 1013908015), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.EnumSchema(self__.vs, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.EnumSchema.cljs$lang$type = true;
schema.core.EnumSchema.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/EnumSchema");
};
schema.core.EnumSchema.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/EnumSchema");
};
schema.core.__GT_EnumSchema = function __GT_EnumSchema(vs) {
  return new schema.core.EnumSchema(vs);
};
schema.core.map__GT_EnumSchema = function map__GT_EnumSchema(G__15624) {
  return new schema.core.EnumSchema((new cljs.core.Keyword(null, "vs", "vs", 1013908015)).cljs$core$IFn$_invoke$arity$1(G__15624), null, cljs.core.dissoc.call(null, G__15624, new cljs.core.Keyword(null, "vs", "vs", 1013908015)));
};
schema.core.enum$ = function() {
  var enum$__delegate = function(vs) {
    return new schema.core.EnumSchema(cljs.core.set.call(null, vs));
  };
  var enum$ = function(var_args) {
    var vs = null;
    if (arguments.length > 0) {
      vs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return enum$__delegate.call(this, vs);
  };
  enum$.cljs$lang$maxFixedArity = 0;
  enum$.cljs$lang$applyTo = function(arglist__15630) {
    var vs = cljs.core.seq(arglist__15630);
    return enum$__delegate(vs);
  };
  enum$.cljs$core$IFn$_invoke$arity$variadic = enum$__delegate;
  return enum$;
}();
schema.core.Predicate = function(p_QMARK_, pred_name, __meta, __extmap) {
  this.p_QMARK_ = p_QMARK_;
  this.pred_name = pred_name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Predicate.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.Predicate.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.Predicate.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15632, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15634 = k15632 instanceof cljs.core.Keyword ? k15632.fqn : null;
  var caseval__15639;
  switch(G__15634) {
    case "pred-name":
      caseval__15639 = self__.pred_name;
      break;
    case "p?":
      caseval__15639 = self__.p_QMARK_;
      break;
    default:
      caseval__15639 = cljs.core.get.call(null, self__.__extmap, k15632, else__4130__auto__);
  }
  return caseval__15639;
};
schema.core.Predicate.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15631) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15635 = cljs.core.keyword_identical_QMARK_;
  var expr__15636 = k__4135__auto__;
  if (cljs.core.truth_(pred__15635.call(null, new cljs.core.Keyword(null, "p?", "p?", 1013907777), expr__15636))) {
    return new schema.core.Predicate(G__15631, self__.pred_name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15635.call(null, new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), expr__15636))) {
      return new schema.core.Predicate(self__.p_QMARK_, G__15631, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15631), null);
    }
  }
};
schema.core.Predicate.prototype.schema$core$Schema$ = true;
schema.core.Predicate.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      var temp__4090__auto__ = function() {
        try {
          if (cljs.core.truth_(self__.p_QMARK_.call(null, x))) {
            return null;
          } else {
            return new cljs.core.Symbol(null, "not", "not", -1640422260, null);
          }
        } catch (e15638) {
          if (e15638 instanceof Object) {
            var e = e15638;
            return new cljs.core.Symbol(null, "throws?", "throws?", 1316818251, null);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw e15638;
            } else {
              return null;
            }
          }
        }
      }();
      if (cljs.core.truth_(temp__4090__auto__)) {
        var reason = temp__4090__auto__;
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(reason, temp__4090__auto__, this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), self__.pred_name);
          };
        }(reason, temp__4090__auto__, this$__$1)), reason));
      } else {
        return x;
      }
    };
  }(this$__$1);
};
schema.core.Predicate.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core._EQ_.call(null, self__.p_QMARK_, cljs.core.integer_QMARK_)) {
    return new cljs.core.Symbol(null, "Int", "Int", -1640457848, null);
  } else {
    if (cljs.core._EQ_.call(null, self__.p_QMARK_, cljs.core.keyword_QMARK_)) {
      return new cljs.core.Symbol(null, "Keyword", "Keyword", -790286462, null);
    } else {
      if (cljs.core._EQ_.call(null, self__.p_QMARK_, cljs.core.symbol_QMARK_)) {
        return new cljs.core.Symbol(null, "Symbol", "Symbol", 850778993, null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.pred_name), new cljs.core.Symbol(null, "pred", "pred", -1637082150, null));
        } else {
          return null;
        }
      }
    }
  }
};
schema.core.Predicate.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.Predicate{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p?", "p?", 1013907777), self__.p_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), self__.pred_name], null)], null), self__.__extmap));
};
schema.core.Predicate.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.Predicate.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p?", "p?", 1013907777), self__.p_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), self__.pred_name], null)], null), self__.__extmap));
};
schema.core.Predicate.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Predicate.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Predicate.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15631) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, G__15631, self__.__extmap, self__.__hash);
};
schema.core.Predicate.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Predicate.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.Predicate.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), null, new cljs.core.Keyword(null, "p?", "p?", 1013907777), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.Predicate.cljs$lang$type = true;
schema.core.Predicate.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Predicate");
};
schema.core.Predicate.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/Predicate");
};
schema.core.__GT_Predicate = function __GT_Predicate(p_QMARK_, pred_name) {
  return new schema.core.Predicate(p_QMARK_, pred_name);
};
schema.core.map__GT_Predicate = function map__GT_Predicate(G__15633) {
  return new schema.core.Predicate((new cljs.core.Keyword(null, "p?", "p?", 1013907777)).cljs$core$IFn$_invoke$arity$1(G__15633), (new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689)).cljs$core$IFn$_invoke$arity$1(G__15633), null, cljs.core.dissoc.call(null, G__15633, new cljs.core.Keyword(null, "p?", "p?", 1013907777), new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689)));
};
schema.core.pred = function() {
  var pred = null;
  var pred__1 = function(p_QMARK_) {
    return pred.call(null, p_QMARK_, p_QMARK_);
  };
  var pred__2 = function(p_QMARK_, pred_name) {
    if (cljs.core.ifn_QMARK_.call(null, p_QMARK_)) {
    } else {
      throw new Error(schema.utils.format_STAR_.call(null, "Not a function: %s", p_QMARK_));
    }
    return new schema.core.Predicate(p_QMARK_, pred_name);
  };
  pred = function(p_QMARK_, pred_name) {
    switch(arguments.length) {
      case 1:
        return pred__1.call(this, p_QMARK_);
      case 2:
        return pred__2.call(this, p_QMARK_, pred_name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pred.cljs$core$IFn$_invoke$arity$1 = pred__1;
  pred.cljs$core$IFn$_invoke$arity$2 = pred__2;
  return pred;
}();
schema.core.protocol_name = function protocol_name(protocol) {
  return(new cljs.core.Keyword(null, "proto-sym", "proto-sym", 4707957972)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, protocol));
};
schema.core.Protocol = function(p, __meta, __extmap) {
  this.p = p;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Protocol.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.Protocol.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.Protocol.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15641, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15643 = k15641 instanceof cljs.core.Keyword ? k15641.fqn : null;
  var caseval__15647;
  switch(G__15643) {
    case "p":
      caseval__15647 = self__.p;
      break;
    default:
      caseval__15647 = cljs.core.get.call(null, self__.__extmap, k15641, else__4130__auto__);
  }
  return caseval__15647;
};
schema.core.Protocol.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15640) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15644 = cljs.core.keyword_identical_QMARK_;
  var expr__15645 = k__4135__auto__;
  if (cljs.core.truth_(pred__15644.call(null, new cljs.core.Keyword(null, "p", "p", 1013904354), expr__15645))) {
    return new schema.core.Protocol(G__15640, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Protocol(self__.p, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15640), null);
  }
};
schema.core.Protocol.prototype.schema$core$Schema$ = true;
schema.core.Protocol.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "proto-pred", "proto-pred", 3860323928)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, this$__$1)).call(null, x))) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), schema.core.protocol_name.call(null, this$__$1)), new cljs.core.Symbol(null, "satisfies?", "satisfies?", 396750295, null));
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.Protocol.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.protocol_name.call(null, this$__$1)), new cljs.core.Symbol(null, "protocol", "protocol", 1665271889, null));
};
schema.core.Protocol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.Protocol{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 1013904354), self__.p], null)], null), self__.__extmap));
};
schema.core.Protocol.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.Protocol.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 1013904354), self__.p], null)], null), self__.__extmap));
};
schema.core.Protocol.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Protocol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Protocol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15640) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.Protocol(self__.p, G__15640, self__.__extmap, self__.__hash);
};
schema.core.Protocol.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.Protocol(self__.p, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Protocol.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.Protocol.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "p", "p", 1013904354), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.Protocol(self__.p, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.Protocol.cljs$lang$type = true;
schema.core.Protocol.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Protocol");
};
schema.core.Protocol.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/Protocol");
};
schema.core.__GT_Protocol = function __GT_Protocol(p) {
  return new schema.core.Protocol(p);
};
schema.core.map__GT_Protocol = function map__GT_Protocol(G__15642) {
  return new schema.core.Protocol((new cljs.core.Keyword(null, "p", "p", 1013904354)).cljs$core$IFn$_invoke$arity$1(G__15642), null, cljs.core.dissoc.call(null, G__15642, new cljs.core.Keyword(null, "p", "p", 1013904354)));
};
RegExp.prototype.schema$core$Schema$ = true;
RegExp.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (!(typeof x === "string")) {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "string?", "string?", 772676615, null));
          };
        }(this$__$1)), null));
      } else {
        if (cljs.core.not.call(null, cljs.core.re_find.call(null, this$__$1, x))) {
          return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
            return function() {
              return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), schema.core.explain.call(null, this$__$1)), new cljs.core.Symbol(null, "re-find", "re-find", -608081204, null));
            };
          }(this$__$1)), null));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return x;
          } else {
            return null;
          }
        }
      }
    };
  }(this$__$1);
};
RegExp.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.symbol.call(null, '#"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1)).slice(1, -1)) + '"');
};
schema.core.Str = schema.core.pred.call(null, cljs.core.string_QMARK_);
schema.core.Bool = Boolean;
schema.core.Num = Number;
schema.core.Int = schema.core.pred.call(null, cljs.core.integer_QMARK_, new cljs.core.Symbol(null, "integer?", "integer?", -1070456710, null));
schema.core.Keyword = schema.core.pred.call(null, cljs.core.keyword_QMARK_, new cljs.core.Symbol(null, "keyword?", "keyword?", -1117382353, null));
schema.core.Symbol = schema.core.pred.call(null, cljs.core.symbol_QMARK_, new cljs.core.Symbol(null, "symbol?", "symbol?", 910997344, null));
schema.core.Regex = RegExp;
schema.core.Inst = Date;
schema.core.Uuid = cljs.core.UUID;
schema.core.Maybe = function(schema, __meta, __extmap) {
  this.schema = schema;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Maybe.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.Maybe.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.Maybe.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15649, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15651 = k15649 instanceof cljs.core.Keyword ? k15649.fqn : null;
  var caseval__15655;
  switch(G__15651) {
    case "schema":
      caseval__15655 = self__.schema;
      break;
    default:
      caseval__15655 = cljs.core.get.call(null, self__.__extmap, k15649, else__4130__auto__);
  }
  return caseval__15655;
};
schema.core.Maybe.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15648) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15652 = cljs.core.keyword_identical_QMARK_;
  var expr__15653 = k__4135__auto__;
  if (cljs.core.truth_(pred__15652.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__15653))) {
    return new schema.core.Maybe(G__15648, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Maybe(self__.schema, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15648), null);
  }
};
schema.core.Maybe.prototype.schema$core$Schema$ = true;
schema.core.Maybe.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walker = schema.core.subschema_walker.call(null, self__.schema);
  return function(sub_walker, this$__$1) {
    return function(x) {
      if (x == null) {
        return null;
      } else {
        return sub_walker.call(null, x);
      }
    };
  }(sub_walker, this$__$1);
};
schema.core.Maybe.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, self__.schema)), new cljs.core.Symbol(null, "maybe", "maybe", -1536858591, null));
};
schema.core.Maybe.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.Maybe{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Maybe.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.Maybe.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Maybe.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Maybe.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Maybe.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15648) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.Maybe(self__.schema, G__15648, self__.__extmap, self__.__hash);
};
schema.core.Maybe.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.Maybe(self__.schema, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Maybe.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.Maybe.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.Maybe(self__.schema, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.Maybe.cljs$lang$type = true;
schema.core.Maybe.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Maybe");
};
schema.core.Maybe.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/Maybe");
};
schema.core.__GT_Maybe = function __GT_Maybe(schema__$1) {
  return new schema.core.Maybe(schema__$1);
};
schema.core.map__GT_Maybe = function map__GT_Maybe(G__15650) {
  return new schema.core.Maybe((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__15650), null, cljs.core.dissoc.call(null, G__15650, new cljs.core.Keyword(null, "schema", "schema", 4400883987)));
};
schema.core.maybe = function maybe(schema__$1) {
  return new schema.core.Maybe(schema__$1);
};
schema.core.NamedSchema = function(schema, name, __meta, __extmap) {
  this.schema = schema;
  this.name = name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.NamedSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.NamedSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.NamedSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15657, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15659 = k15657 instanceof cljs.core.Keyword ? k15657.fqn : null;
  var caseval__15663;
  switch(G__15659) {
    case "name":
      caseval__15663 = self__.name;
      break;
    case "schema":
      caseval__15663 = self__.schema;
      break;
    default:
      caseval__15663 = cljs.core.get.call(null, self__.__extmap, k15657, else__4130__auto__);
  }
  return caseval__15663;
};
schema.core.NamedSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15656) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15660 = cljs.core.keyword_identical_QMARK_;
  var expr__15661 = k__4135__auto__;
  if (cljs.core.truth_(pred__15660.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__15661))) {
    return new schema.core.NamedSchema(G__15656, self__.name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15660.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), expr__15661))) {
      return new schema.core.NamedSchema(self__.schema, G__15656, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.NamedSchema(self__.schema, self__.name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15656), null);
    }
  }
};
schema.core.NamedSchema.prototype.schema$core$Schema$ = true;
schema.core.NamedSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walker = schema.core.subschema_walker.call(null, self__.schema);
  return function(sub_walker, this$__$1) {
    return function(x) {
      return schema.utils.wrap_error_name.call(null, self__.name, sub_walker.call(null, x));
    };
  }(sub_walker, this$__$1);
};
schema.core.NamedSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.name), schema.core.explain.call(null, self__.schema)), new cljs.core.Symbol(null, "named", "named", -1535946510, null));
};
schema.core.NamedSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.NamedSchema{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.NamedSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.NamedSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.NamedSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.NamedSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.NamedSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15656) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.NamedSchema(self__.schema, self__.name, G__15656, self__.__extmap, self__.__hash);
};
schema.core.NamedSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.NamedSchema(self__.schema, self__.name, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.NamedSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.NamedSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.NamedSchema(self__.schema, self__.name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.NamedSchema.cljs$lang$type = true;
schema.core.NamedSchema.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/NamedSchema");
};
schema.core.NamedSchema.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/NamedSchema");
};
schema.core.__GT_NamedSchema = function __GT_NamedSchema(schema__$1, name) {
  return new schema.core.NamedSchema(schema__$1, name);
};
schema.core.map__GT_NamedSchema = function map__GT_NamedSchema(G__15658) {
  return new schema.core.NamedSchema((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__15658), (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(G__15658), null, cljs.core.dissoc.call(null, G__15658, new cljs.core.Keyword(null, "schema", "schema", 4400883987), new cljs.core.Keyword(null, "name", "name", 1017277949)));
};
schema.core.named = function named(schema__$1, name) {
  return new schema.core.NamedSchema(schema__$1, name);
};
schema.core.Either = function(schemas, __meta, __extmap) {
  this.schemas = schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Either.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.Either.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.Either.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15665, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15667 = k15665 instanceof cljs.core.Keyword ? k15665.fqn : null;
  var caseval__15671;
  switch(G__15667) {
    case "schemas":
      caseval__15671 = self__.schemas;
      break;
    default:
      caseval__15671 = cljs.core.get.call(null, self__.__extmap, k15665, else__4130__auto__);
  }
  return caseval__15671;
};
schema.core.Either.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15664) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15668 = cljs.core.keyword_identical_QMARK_;
  var expr__15669 = k__4135__auto__;
  if (cljs.core.truth_(pred__15668.call(null, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), expr__15669))) {
    return new schema.core.Either(G__15664, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Either(self__.schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15664), null);
  }
};
schema.core.Either.prototype.schema$core$Schema$ = true;
schema.core.Either.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walkers = cljs.core.mapv.call(null, schema.core.subschema_walker, self__.schemas);
  return function(sub_walkers, this$__$1) {
    return function(x) {
      var sub_walkers__$1 = cljs.core.seq.call(null, sub_walkers);
      while (true) {
        if (cljs.core.not.call(null, sub_walkers__$1)) {
          return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(sub_walkers__$1, sub_walkers, this$__$1) {
            return function() {
              return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "schemas", "schemas", 276625579, null)), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "%", "%", -1640531490, null)), new cljs.core.Symbol(null, "check", "check", -1545904447, null))), new cljs.core.Symbol(null, "some", "some", 
              -1636995411, null));
            };
          }(sub_walkers__$1, sub_walkers, this$__$1)), null));
        } else {
          var res = cljs.core.first.call(null, sub_walkers__$1).call(null, x);
          if (!schema.utils.error_QMARK_.call(null, res)) {
            return res;
          } else {
            var G__15672 = cljs.core.next.call(null, sub_walkers__$1);
            sub_walkers__$1 = G__15672;
            continue;
          }
        }
        break;
      }
    };
  }(sub_walkers, this$__$1);
};
schema.core.Either.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "either", "either", 1351541374, null), cljs.core.map.call(null, schema.core.explain, self__.schemas));
};
schema.core.Either.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.Either{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Either.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.Either.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Either.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Either.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Either.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15664) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.Either(self__.schemas, G__15664, self__.__extmap, self__.__hash);
};
schema.core.Either.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.Either(self__.schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Either.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.Either.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.Either(self__.schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.Either.cljs$lang$type = true;
schema.core.Either.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Either");
};
schema.core.Either.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/Either");
};
schema.core.__GT_Either = function __GT_Either(schemas) {
  return new schema.core.Either(schemas);
};
schema.core.map__GT_Either = function map__GT_Either(G__15666) {
  return new schema.core.Either((new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)).cljs$core$IFn$_invoke$arity$1(G__15666), null, cljs.core.dissoc.call(null, G__15666, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)));
};
schema.core.either = function() {
  var either__delegate = function(schemas) {
    return new schema.core.Either(schemas);
  };
  var either = function(var_args) {
    var schemas = null;
    if (arguments.length > 0) {
      schemas = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return either__delegate.call(this, schemas);
  };
  either.cljs$lang$maxFixedArity = 0;
  either.cljs$lang$applyTo = function(arglist__15673) {
    var schemas = cljs.core.seq(arglist__15673);
    return either__delegate(schemas);
  };
  either.cljs$core$IFn$_invoke$arity$variadic = either__delegate;
  return either;
}();
schema.core.Both = function(schemas, __meta, __extmap) {
  this.schemas = schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Both.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.Both.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.Both.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15675, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15677 = k15675 instanceof cljs.core.Keyword ? k15675.fqn : null;
  var caseval__15681;
  switch(G__15677) {
    case "schemas":
      caseval__15681 = self__.schemas;
      break;
    default:
      caseval__15681 = cljs.core.get.call(null, self__.__extmap, k15675, else__4130__auto__);
  }
  return caseval__15681;
};
schema.core.Both.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15674) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15678 = cljs.core.keyword_identical_QMARK_;
  var expr__15679 = k__4135__auto__;
  if (cljs.core.truth_(pred__15678.call(null, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), expr__15679))) {
    return new schema.core.Both(G__15674, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Both(self__.schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15674), null);
  }
};
schema.core.Both.prototype.schema$core$Schema$ = true;
schema.core.Both.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walkers = cljs.core.mapv.call(null, schema.core.subschema_walker, self__.schemas);
  return function(sub_walkers, this$__$1) {
    return function(x) {
      return cljs.core.reduce.call(null, function(sub_walkers, this$__$1) {
        return function(x__$1, sub_walker) {
          if (schema.utils.error_QMARK_.call(null, x__$1)) {
            return x__$1;
          } else {
            return sub_walker.call(null, x__$1);
          }
        };
      }(sub_walkers, this$__$1), x, sub_walkers);
    };
  }(sub_walkers, this$__$1);
};
schema.core.Both.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "both", "both", -1637501638, null), cljs.core.map.call(null, schema.core.explain, self__.schemas));
};
schema.core.Both.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.Both{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Both.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.Both.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Both.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Both.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Both.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15674) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.Both(self__.schemas, G__15674, self__.__extmap, self__.__hash);
};
schema.core.Both.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.Both(self__.schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Both.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.Both.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.Both(self__.schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.Both.cljs$lang$type = true;
schema.core.Both.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Both");
};
schema.core.Both.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/Both");
};
schema.core.__GT_Both = function __GT_Both(schemas) {
  return new schema.core.Both(schemas);
};
schema.core.map__GT_Both = function map__GT_Both(G__15676) {
  return new schema.core.Both((new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)).cljs$core$IFn$_invoke$arity$1(G__15676), null, cljs.core.dissoc.call(null, G__15676, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)));
};
schema.core.both = function() {
  var both__delegate = function(schemas) {
    return new schema.core.Both(schemas);
  };
  var both = function(var_args) {
    var schemas = null;
    if (arguments.length > 0) {
      schemas = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return both__delegate.call(this, schemas);
  };
  both.cljs$lang$maxFixedArity = 0;
  both.cljs$lang$applyTo = function(arglist__15682) {
    var schemas = cljs.core.seq(arglist__15682);
    return both__delegate(schemas);
  };
  both.cljs$core$IFn$_invoke$arity$variadic = both__delegate;
  return both;
}();
schema.core.ConditionalSchema = function(preds_and_schemas, __meta, __extmap) {
  this.preds_and_schemas = preds_and_schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.ConditionalSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15684, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15686 = k15684 instanceof cljs.core.Keyword ? k15684.fqn : null;
  var caseval__15697;
  switch(G__15686) {
    case "preds-and-schemas":
      caseval__15697 = self__.preds_and_schemas;
      break;
    default:
      caseval__15697 = cljs.core.get.call(null, self__.__extmap, k15684, else__4130__auto__);
  }
  return caseval__15697;
};
schema.core.ConditionalSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15683) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15687 = cljs.core.keyword_identical_QMARK_;
  var expr__15688 = k__4135__auto__;
  if (cljs.core.truth_(pred__15687.call(null, new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), expr__15688))) {
    return new schema.core.ConditionalSchema(G__15683, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.ConditionalSchema(self__.preds_and_schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15683), null);
  }
};
schema.core.ConditionalSchema.prototype.schema$core$Schema$ = true;
schema.core.ConditionalSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var preds_and_walkers = cljs.core.mapv.call(null, function(this$__$1) {
    return function(p__15690) {
      var vec__15691 = p__15690;
      var pred = cljs.core.nth.call(null, vec__15691, 0, null);
      var schema__$1 = cljs.core.nth.call(null, vec__15691, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pred, schema.core.subschema_walker.call(null, schema__$1)], null);
    };
  }(this$__$1), self__.preds_and_schemas);
  return function(preds_and_walkers, this$__$1) {
    return function(x) {
      var temp__4090__auto__ = cljs.core.first.call(null, cljs.core.filter.call(null, function(preds_and_walkers, this$__$1) {
        return function(p__15692) {
          var vec__15693 = p__15692;
          var pred = cljs.core.nth.call(null, vec__15693, 0, null);
          return pred.call(null, x);
        };
      }(preds_and_walkers, this$__$1), preds_and_walkers));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var vec__15694 = temp__4090__auto__;
        var _ = cljs.core.nth.call(null, vec__15694, 0, null);
        var match = cljs.core.nth.call(null, vec__15694, 1, null);
        return match.call(null, x);
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(temp__4090__auto__, preds_and_walkers, this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "matches-some-condition?", "matches-some-condition?", 1290930716, null));
          };
        }(temp__4090__auto__, preds_and_walkers, this$__$1)), null));
      }
    };
  }(preds_and_walkers, this$__$1);
};
schema.core.ConditionalSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "conditional", "conditional", -432400321, null), cljs.core.mapcat.call(null, function(this$__$1) {
    return function(p__15695) {
      var vec__15696 = p__15695;
      var pred = cljs.core.nth.call(null, vec__15696, 0, null);
      var schema__$1 = cljs.core.nth.call(null, vec__15696, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pred, schema.core.explain.call(null, schema__$1)], null);
    };
  }(this$__$1), self__.preds_and_schemas));
};
schema.core.ConditionalSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.ConditionalSchema{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), self__.preds_and_schemas], null)], null), self__.__extmap));
};
schema.core.ConditionalSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), self__.preds_and_schemas], null)], null), self__.__extmap));
};
schema.core.ConditionalSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.ConditionalSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15683) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.ConditionalSchema(self__.preds_and_schemas, G__15683, self__.__extmap, self__.__hash);
};
schema.core.ConditionalSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.ConditionalSchema(self__.preds_and_schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.ConditionalSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.ConditionalSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.ConditionalSchema(self__.preds_and_schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.ConditionalSchema.cljs$lang$type = true;
schema.core.ConditionalSchema.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/ConditionalSchema");
};
schema.core.ConditionalSchema.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/ConditionalSchema");
};
schema.core.__GT_ConditionalSchema = function __GT_ConditionalSchema(preds_and_schemas) {
  return new schema.core.ConditionalSchema(preds_and_schemas);
};
schema.core.map__GT_ConditionalSchema = function map__GT_ConditionalSchema(G__15685) {
  return new schema.core.ConditionalSchema((new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275)).cljs$core$IFn$_invoke$arity$1(G__15685), null, cljs.core.dissoc.call(null, G__15685, new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275)));
};
schema.core.conditional = function() {
  var conditional__delegate = function(preds_and_schemas) {
    if (cljs.core.seq.call(null, preds_and_schemas) && cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, preds_and_schemas))) {
    } else {
      throw new Error(schema.utils.format_STAR_.call(null, "Expected even, nonzero number of args; got %s", cljs.core.count.call(null, preds_and_schemas)));
    }
    return new schema.core.ConditionalSchema(function() {
      var iter__4266__auto__ = function iter__15706(s__15707) {
        return new cljs.core.LazySeq(null, function() {
          var s__15707__$1 = s__15707;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__15707__$1);
            if (temp__4092__auto__) {
              var s__15707__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__15707__$2)) {
                var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15707__$2);
                var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                var b__15709 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                if (function() {
                  var i__15708 = 0;
                  while (true) {
                    if (i__15708 < size__4265__auto__) {
                      var vec__15712 = cljs.core._nth.call(null, c__4264__auto__, i__15708);
                      var pred = cljs.core.nth.call(null, vec__15712, 0, null);
                      var schema__$1 = cljs.core.nth.call(null, vec__15712, 1, null);
                      cljs.core.chunk_append.call(null, b__15709, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, pred, new cljs.core.Keyword(null, "else", "else", 1017020587)) ? cljs.core.constantly.call(null, true) : pred, schema__$1], null));
                      var G__15714 = i__15708 + 1;
                      i__15708 = G__15714;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15709), iter__15706.call(null, cljs.core.chunk_rest.call(null, s__15707__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15709), null);
                }
              } else {
                var vec__15713 = cljs.core.first.call(null, s__15707__$2);
                var pred = cljs.core.nth.call(null, vec__15713, 0, null);
                var schema__$1 = cljs.core.nth.call(null, vec__15713, 1, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, pred, new cljs.core.Keyword(null, "else", "else", 1017020587)) ? cljs.core.constantly.call(null, true) : pred, schema__$1], null), iter__15706.call(null, cljs.core.rest.call(null, s__15707__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4266__auto__.call(null, cljs.core.partition.call(null, 2, preds_and_schemas));
    }());
  };
  var conditional = function(var_args) {
    var preds_and_schemas = null;
    if (arguments.length > 0) {
      preds_and_schemas = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return conditional__delegate.call(this, preds_and_schemas);
  };
  conditional.cljs$lang$maxFixedArity = 0;
  conditional.cljs$lang$applyTo = function(arglist__15715) {
    var preds_and_schemas = cljs.core.seq(arglist__15715);
    return conditional__delegate(preds_and_schemas);
  };
  conditional.cljs$core$IFn$_invoke$arity$variadic = conditional__delegate;
  return conditional;
}();
schema.core.if$ = function if$(pred, if_schema, else_schema) {
  return schema.core.conditional.call(null, pred, if_schema, cljs.core.constantly.call(null, true), else_schema);
};
schema.core._PLUS_missing_PLUS_ = new cljs.core.Keyword("schema.core", "missing", "schema.core/missing", 1882142615);
schema.core.RequiredKey = function(k, __meta, __extmap) {
  this.k = k;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.RequiredKey.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.RequiredKey.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.RequiredKey.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15717, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15719 = k15717 instanceof cljs.core.Keyword ? k15717.fqn : null;
  var caseval__15723;
  switch(G__15719) {
    case "k":
      caseval__15723 = self__.k;
      break;
    default:
      caseval__15723 = cljs.core.get.call(null, self__.__extmap, k15717, else__4130__auto__);
  }
  return caseval__15723;
};
schema.core.RequiredKey.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15716) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15720 = cljs.core.keyword_identical_QMARK_;
  var expr__15721 = k__4135__auto__;
  if (cljs.core.truth_(pred__15720.call(null, new cljs.core.Keyword(null, "k", "k", 1013904349), expr__15721))) {
    return new schema.core.RequiredKey(G__15716, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.RequiredKey(self__.k, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15716), null);
  }
};
schema.core.RequiredKey.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.RequiredKey{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.RequiredKey.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.RequiredKey.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.RequiredKey.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.RequiredKey.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.RequiredKey.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15716) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.RequiredKey(self__.k, G__15716, self__.__extmap, self__.__hash);
};
schema.core.RequiredKey.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.RequiredKey(self__.k, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.RequiredKey.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.RequiredKey.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "k", "k", 1013904349), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.RequiredKey(self__.k, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.RequiredKey.cljs$lang$type = true;
schema.core.RequiredKey.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/RequiredKey");
};
schema.core.RequiredKey.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/RequiredKey");
};
schema.core.__GT_RequiredKey = function __GT_RequiredKey(k) {
  return new schema.core.RequiredKey(k);
};
schema.core.map__GT_RequiredKey = function map__GT_RequiredKey(G__15718) {
  return new schema.core.RequiredKey((new cljs.core.Keyword(null, "k", "k", 1013904349)).cljs$core$IFn$_invoke$arity$1(G__15718), null, cljs.core.dissoc.call(null, G__15718, new cljs.core.Keyword(null, "k", "k", 1013904349)));
};
schema.core.required_key = function required_key(k) {
  if (k instanceof cljs.core.Keyword) {
    return k;
  } else {
    return new schema.core.RequiredKey(k);
  }
};
schema.core.required_key_QMARK_ = function required_key_QMARK_(ks) {
  return ks instanceof cljs.core.Keyword || ks instanceof schema.core.RequiredKey;
};
schema.core.OptionalKey = function(k, __meta, __extmap) {
  this.k = k;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.OptionalKey.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.OptionalKey.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.OptionalKey.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15725, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15727 = k15725 instanceof cljs.core.Keyword ? k15725.fqn : null;
  var caseval__15731;
  switch(G__15727) {
    case "k":
      caseval__15731 = self__.k;
      break;
    default:
      caseval__15731 = cljs.core.get.call(null, self__.__extmap, k15725, else__4130__auto__);
  }
  return caseval__15731;
};
schema.core.OptionalKey.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15724) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15728 = cljs.core.keyword_identical_QMARK_;
  var expr__15729 = k__4135__auto__;
  if (cljs.core.truth_(pred__15728.call(null, new cljs.core.Keyword(null, "k", "k", 1013904349), expr__15729))) {
    return new schema.core.OptionalKey(G__15724, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.OptionalKey(self__.k, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15724), null);
  }
};
schema.core.OptionalKey.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.OptionalKey{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.OptionalKey.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.OptionalKey.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.OptionalKey.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.OptionalKey.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.OptionalKey.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15724) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.OptionalKey(self__.k, G__15724, self__.__extmap, self__.__hash);
};
schema.core.OptionalKey.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.OptionalKey(self__.k, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.OptionalKey.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.OptionalKey.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "k", "k", 1013904349), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.OptionalKey(self__.k, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.OptionalKey.cljs$lang$type = true;
schema.core.OptionalKey.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/OptionalKey");
};
schema.core.OptionalKey.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/OptionalKey");
};
schema.core.__GT_OptionalKey = function __GT_OptionalKey(k) {
  return new schema.core.OptionalKey(k);
};
schema.core.map__GT_OptionalKey = function map__GT_OptionalKey(G__15726) {
  return new schema.core.OptionalKey((new cljs.core.Keyword(null, "k", "k", 1013904349)).cljs$core$IFn$_invoke$arity$1(G__15726), null, cljs.core.dissoc.call(null, G__15726, new cljs.core.Keyword(null, "k", "k", 1013904349)));
};
schema.core.optional_key = function optional_key(k) {
  return new schema.core.OptionalKey(k);
};
schema.core.optional_key_QMARK_ = function optional_key_QMARK_(ks) {
  return ks instanceof schema.core.OptionalKey;
};
schema.core.explicit_schema_key = function explicit_schema_key(ks) {
  if (ks instanceof cljs.core.Keyword) {
    return ks;
  } else {
    if (ks instanceof schema.core.RequiredKey) {
      return ks.k;
    } else {
      if (schema.core.optional_key_QMARK_.call(null, ks)) {
        return ks.k;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error(schema.utils.format_STAR_.call(null, "Bad explicit key: %s", ks));
        } else {
          return null;
        }
      }
    }
  }
};
schema.core.specific_key_QMARK_ = function specific_key_QMARK_(ks) {
  return schema.core.required_key_QMARK_.call(null, ks) || schema.core.optional_key_QMARK_.call(null, ks);
};
schema.core.explain_kspec = function explain_kspec(kspec) {
  if (schema.core.specific_key_QMARK_.call(null, kspec)) {
    if (kspec instanceof cljs.core.Keyword) {
      return kspec;
    } else {
      return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explicit_schema_key.call(null, kspec)), schema.core.required_key_QMARK_.call(null, kspec) ? new cljs.core.Symbol(null, "required-key", "required-key", 1024577770, null) : schema.core.optional_key_QMARK_.call(null, kspec) ? new cljs.core.Symbol(null, "optional-key", "optional-key", 180561963, null) : null);
    }
  } else {
    return schema.core.explain.call(null, kspec);
  }
};
schema.core.MapEntry = function(kspec, val_schema, __meta, __extmap) {
  this.kspec = kspec;
  this.val_schema = val_schema;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.MapEntry.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15733, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15735 = k15733 instanceof cljs.core.Keyword ? k15733.fqn : null;
  var caseval__15740;
  switch(G__15735) {
    case "val-schema":
      caseval__15740 = self__.val_schema;
      break;
    case "kspec":
      caseval__15740 = self__.kspec;
      break;
    default:
      caseval__15740 = cljs.core.get.call(null, self__.__extmap, k15733, else__4130__auto__);
  }
  return caseval__15740;
};
schema.core.MapEntry.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15732) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15736 = cljs.core.keyword_identical_QMARK_;
  var expr__15737 = k__4135__auto__;
  if (cljs.core.truth_(pred__15736.call(null, new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), expr__15737))) {
    return new schema.core.MapEntry(G__15732, self__.val_schema, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15736.call(null, new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), expr__15737))) {
      return new schema.core.MapEntry(self__.kspec, G__15732, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.MapEntry(self__.kspec, self__.val_schema, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15732), null);
    }
  }
};
schema.core.MapEntry.prototype.schema$core$Schema$ = true;
schema.core.MapEntry.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var val_walker = schema.core.subschema_walker.call(null, self__.val_schema);
  if (schema.core.specific_key_QMARK_.call(null, self__.kspec)) {
    var optional_QMARK_ = schema.core.optional_key_QMARK_.call(null, self__.kspec);
    var k = schema.core.explicit_schema_key.call(null, self__.kspec);
    return function(optional_QMARK_, k, val_walker, this$__$1) {
      return function(x) {
        if (schema.core._PLUS_missing_PLUS_ === x) {
          if (optional_QMARK_) {
            return null;
          } else {
            return schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, new cljs.core.Symbol(null, "missing-required-key", "missing-required-key", -1340904975, null)], null));
          }
        } else {
          if (!cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, x))) {
            return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(optional_QMARK_, k, val_walker, this$__$1) {
              return function() {
                return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "count", "count", -1545680184, null))), 2), cljs.core._EQ_);
              };
            }(optional_QMARK_, k, val_walker, this$__$1)), null));
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              var vec__15739 = x;
              var xk = cljs.core.nth.call(null, vec__15739, 0, null);
              var xv = cljs.core.nth.call(null, vec__15739, 1, null);
              if (cljs.core._EQ_.call(null, xk, k)) {
              } else {
                throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null), new cljs.core.Symbol(null, "xk", "xk", -1640527700, null), new cljs.core.Symbol(null, "k", "k", -1640531420, null)))));
              }
              var vres = val_walker.call(null, xv);
              var temp__4090__auto__ = schema.utils.error_val.call(null, vres);
              if (cljs.core.truth_(temp__4090__auto__)) {
                var ve = temp__4090__auto__;
                return schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xk, ve], null));
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xk, vres], null);
              }
            } else {
              return null;
            }
          }
        }
      };
    }(optional_QMARK_, k, val_walker, this$__$1);
  } else {
    var key_walker = schema.core.subschema_walker.call(null, self__.kspec);
    return function(key_walker, val_walker, this$__$1) {
      return function(x) {
        if (!cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, x))) {
          return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(key_walker, val_walker, this$__$1) {
            return function() {
              return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "count", "count", -1545680184, null))), 2), cljs.core._EQ_);
            };
          }(key_walker, val_walker, this$__$1)), null));
        } else {
          var out_k = key_walker.call(null, cljs.core.key.call(null, x));
          var out_ke = schema.utils.error_val.call(null, out_k);
          var out_v = val_walker.call(null, cljs.core.val.call(null, x));
          var out_ve = schema.utils.error_val.call(null, out_v);
          if (cljs.core.truth_(function() {
            var or__3541__auto__ = out_ke;
            if (cljs.core.truth_(or__3541__auto__)) {
              return or__3541__auto__;
            } else {
              return out_ve;
            }
          }())) {
            return schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
              var or__3541__auto__ = out_ke;
              if (cljs.core.truth_(or__3541__auto__)) {
                return or__3541__auto__;
              } else {
                return cljs.core.key.call(null, x);
              }
            }(), function() {
              var or__3541__auto__ = out_ve;
              if (cljs.core.truth_(or__3541__auto__)) {
                return or__3541__auto__;
              } else {
                return new cljs.core.Symbol(null, "invalid-key", "invalid-key", 1700113218, null);
              }
            }()], null));
          } else {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [out_k, out_v], null);
          }
        }
      };
    }(key_walker, val_walker, this$__$1);
  }
};
schema.core.MapEntry.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, self__.val_schema)), schema.core.explain_kspec.call(null, self__.kspec)), new cljs.core.Symbol(null, "map-entry", "map-entry", -1829517702, null));
};
schema.core.MapEntry.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.MapEntry{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), self__.kspec], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), self__.val_schema], null)], null), self__.__extmap));
};
schema.core.MapEntry.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.MapEntry.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), self__.kspec], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), self__.val_schema], null)], null), self__.__extmap));
};
schema.core.MapEntry.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.MapEntry.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.MapEntry.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15732) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.MapEntry(self__.kspec, self__.val_schema, G__15732, self__.__extmap, self__.__hash);
};
schema.core.MapEntry.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.MapEntry(self__.kspec, self__.val_schema, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.MapEntry.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.MapEntry.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), null, new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.MapEntry(self__.kspec, self__.val_schema, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.MapEntry.cljs$lang$type = true;
schema.core.MapEntry.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/MapEntry");
};
schema.core.MapEntry.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/MapEntry");
};
schema.core.__GT_MapEntry = function __GT_MapEntry(kspec, val_schema) {
  return new schema.core.MapEntry(kspec, val_schema);
};
schema.core.map__GT_MapEntry = function map__GT_MapEntry(G__15734) {
  return new schema.core.MapEntry((new cljs.core.Keyword(null, "kspec", "kspec", 1116257816)).cljs$core$IFn$_invoke$arity$1(G__15734), (new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239)).cljs$core$IFn$_invoke$arity$1(G__15734), null, cljs.core.dissoc.call(null, G__15734, new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239)));
};
schema.core.map_entry = function map_entry(kspec, val_schema) {
  return new schema.core.MapEntry(kspec, val_schema);
};
schema.core.find_extra_keys_schema = function find_extra_keys_schema(map_schema) {
  var key_schemata = cljs.core.remove.call(null, schema.core.specific_key_QMARK_, cljs.core.keys.call(null, map_schema));
  if (cljs.core.count.call(null, key_schemata) < 2) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "More than one non-optional/required key schemata: %s", cljs.core.vec.call(null, key_schemata)));
  }
  return cljs.core.first.call(null, key_schemata);
};
schema.core.map_walker = function map_walker(map_schema) {
  var extra_keys_schema = schema.core.find_extra_keys_schema.call(null, map_schema);
  var extra_walker = cljs.core.truth_(extra_keys_schema) ? schema.core.subschema_walker.call(null, cljs.core.apply.call(null, schema.core.map_entry, cljs.core.find.call(null, map_schema, extra_keys_schema))) : null;
  var explicit_schema = cljs.core.dissoc.call(null, map_schema, extra_keys_schema);
  var explicit_walkers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4266__auto__ = function(extra_keys_schema, extra_walker, explicit_schema) {
      return function iter__15753(s__15754) {
        return new cljs.core.LazySeq(null, function(extra_keys_schema, extra_walker, explicit_schema) {
          return function() {
            var s__15754__$1 = s__15754;
            while (true) {
              var temp__4092__auto__ = cljs.core.seq.call(null, s__15754__$1);
              if (temp__4092__auto__) {
                var s__15754__$2 = temp__4092__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__15754__$2)) {
                  var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15754__$2);
                  var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                  var b__15756 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                  if (function() {
                    var i__15755 = 0;
                    while (true) {
                      if (i__15755 < size__4265__auto__) {
                        var vec__15759 = cljs.core._nth.call(null, c__4264__auto__, i__15755);
                        var k = cljs.core.nth.call(null, vec__15759, 0, null);
                        var v = cljs.core.nth.call(null, vec__15759, 1, null);
                        cljs.core.chunk_append.call(null, b__15756, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explicit_schema_key.call(null, k), schema.core.subschema_walker.call(null, schema.core.map_entry.call(null, k, v))], null));
                        var G__15764 = i__15755 + 1;
                        i__15755 = G__15764;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15756), iter__15753.call(null, cljs.core.chunk_rest.call(null, s__15754__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15756), null);
                  }
                } else {
                  var vec__15760 = cljs.core.first.call(null, s__15754__$2);
                  var k = cljs.core.nth.call(null, vec__15760, 0, null);
                  var v = cljs.core.nth.call(null, vec__15760, 1, null);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explicit_schema_key.call(null, k), schema.core.subschema_walker.call(null, schema.core.map_entry.call(null, k, v))], null), iter__15753.call(null, cljs.core.rest.call(null, s__15754__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(extra_keys_schema, extra_walker, explicit_schema), null, null);
      };
    }(extra_keys_schema, extra_walker, explicit_schema);
    return iter__4266__auto__.call(null, explicit_schema);
  }());
  var err_conj = schema.utils.result_builder.call(null, cljs.core.constantly.call(null, cljs.core.PersistentArrayMap.EMPTY));
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, explicit_schema), cljs.core.count.call(null, explicit_walkers))) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Schema has multiple variants of the same explicit key: %s", cljs.core.mapv.call(null, schema.core.explain_kspec, cljs.core.apply.call(null, cljs.core.concat, cljs.core.filter.call(null, function(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
      return function(p1__15741_SHARP_) {
        return cljs.core.count.call(null, p1__15741_SHARP_) > 1;
      };
    }(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj), cljs.core.vals.call(null, cljs.core.group_by.call(null, schema.core.explicit_schema_key, cljs.core.keys.call(null, explicit_schema))))))));
  }
  return function(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
    return function(x) {
      if (!cljs.core.map_QMARK_.call(null, x)) {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, map_schema, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "map?", "map?", -1637187556, null));
          };
        }(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj)), null));
      } else {
        var x__$1 = x;
        var explicit_walkers__$1 = cljs.core.seq.call(null, explicit_walkers);
        var out = cljs.core.PersistentArrayMap.EMPTY;
        while (true) {
          if (cljs.core.not.call(null, explicit_walkers__$1)) {
            return cljs.core.reduce.call(null, cljs.core.truth_(extra_walker) ? function(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
              return function(out__$1, e) {
                return err_conj.call(null, out__$1, extra_walker.call(null, e));
              };
            }(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) : function(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
              return function(out__$1, p__15761) {
                var vec__15762 = p__15761;
                var k = cljs.core.nth.call(null, vec__15762, 0, null);
                var _ = cljs.core.nth.call(null, vec__15762, 1, null);
                return err_conj.call(null, out__$1, schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, new cljs.core.Symbol(null, "disallowed-key", "disallowed-key", 2071998757, null)], null)));
              };
            }(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj), out, x__$1);
          } else {
            var vec__15763 = cljs.core.first.call(null, explicit_walkers__$1);
            var wk = cljs.core.nth.call(null, vec__15763, 0, null);
            var wv = cljs.core.nth.call(null, vec__15763, 1, null);
            var G__15765 = cljs.core.dissoc.call(null, x__$1, wk);
            var G__15766 = cljs.core.next.call(null, explicit_walkers__$1);
            var G__15767 = err_conj.call(null, out, wv.call(null, function() {
              var or__3541__auto__ = cljs.core.find.call(null, x__$1, wk);
              if (cljs.core.truth_(or__3541__auto__)) {
                return or__3541__auto__;
              } else {
                return schema.core._PLUS_missing_PLUS_;
              }
            }()));
            x__$1 = G__15765;
            explicit_walkers__$1 = G__15766;
            out = G__15767;
            continue;
          }
          break;
        }
      }
    };
  }(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj);
};
schema.core.map_explain = function map_explain(this$) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4266__auto__ = function iter__15776(s__15777) {
      return new cljs.core.LazySeq(null, function() {
        var s__15777__$1 = s__15777;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__15777__$1);
          if (temp__4092__auto__) {
            var s__15777__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__15777__$2)) {
              var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15777__$2);
              var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
              var b__15779 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
              if (function() {
                var i__15778 = 0;
                while (true) {
                  if (i__15778 < size__4265__auto__) {
                    var vec__15782 = cljs.core._nth.call(null, c__4264__auto__, i__15778);
                    var k = cljs.core.nth.call(null, vec__15782, 0, null);
                    var v = cljs.core.nth.call(null, vec__15782, 1, null);
                    cljs.core.chunk_append.call(null, b__15779, cljs.core.vec.call(null, cljs.core.next.call(null, schema.core.explain.call(null, schema.core.map_entry.call(null, k, v)))));
                    var G__15784 = i__15778 + 1;
                    i__15778 = G__15784;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15779), iter__15776.call(null, cljs.core.chunk_rest.call(null, s__15777__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15779), null);
              }
            } else {
              var vec__15783 = cljs.core.first.call(null, s__15777__$2);
              var k = cljs.core.nth.call(null, vec__15783, 0, null);
              var v = cljs.core.nth.call(null, vec__15783, 1, null);
              return cljs.core.cons.call(null, cljs.core.vec.call(null, cljs.core.next.call(null, schema.core.explain.call(null, schema.core.map_entry.call(null, k, v)))), iter__15776.call(null, cljs.core.rest.call(null, s__15777__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4266__auto__.call(null, this$);
  }());
};
cljs.core.PersistentHashMap.prototype.schema$core$Schema$ = true;
cljs.core.PersistentHashMap.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_walker.call(null, this$__$1);
};
cljs.core.PersistentHashMap.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_explain.call(null, this$__$1);
};
cljs.core.PersistentArrayMap.prototype.schema$core$Schema$ = true;
cljs.core.PersistentArrayMap.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_walker.call(null, this$__$1);
};
cljs.core.PersistentArrayMap.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_explain.call(null, this$__$1);
};
cljs.core.PersistentHashSet.prototype.schema$core$Schema$ = true;
cljs.core.PersistentHashSet.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, this$__$1), 1)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Set schema must have exactly one element"));
  }
  var sub_walker = schema.core.subschema_walker.call(null, cljs.core.first.call(null, this$__$1));
  return function(sub_walker, this$__$1) {
    return function(x) {
      var or__3541__auto__ = cljs.core.set_QMARK_.call(null, x) ? null : schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(sub_walker, this$__$1) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "set?", "set?", -1637004842, null));
        };
      }(sub_walker, this$__$1)), null));
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        var vec__15785 = cljs.core.juxt.call(null, cljs.core.remove, cljs.core.keep).call(null, schema.utils.error_val, cljs.core.map.call(null, sub_walker, x));
        var good = cljs.core.nth.call(null, vec__15785, 0, null);
        var bad = cljs.core.nth.call(null, vec__15785, 1, null);
        if (cljs.core.seq.call(null, bad)) {
          return schema.utils.error.call(null, cljs.core.set.call(null, bad));
        } else {
          return cljs.core.set.call(null, good);
        }
      }
    };
  }(sub_walker, this$__$1);
};
cljs.core.PersistentHashSet.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.set.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explain.call(null, cljs.core.first.call(null, this$__$1))], null));
};
schema.core.One = function(schema, optional_QMARK_, name, __meta, __extmap) {
  this.schema = schema;
  this.optional_QMARK_ = optional_QMARK_;
  this.name = name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 3) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.One.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.One.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.One.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15787, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15789 = k15787 instanceof cljs.core.Keyword ? k15787.fqn : null;
  var caseval__15793;
  switch(G__15789) {
    case "name":
      caseval__15793 = self__.name;
      break;
    case "optional?":
      caseval__15793 = self__.optional_QMARK_;
      break;
    case "schema":
      caseval__15793 = self__.schema;
      break;
    default:
      caseval__15793 = cljs.core.get.call(null, self__.__extmap, k15787, else__4130__auto__);
  }
  return caseval__15793;
};
schema.core.One.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15786) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15790 = cljs.core.keyword_identical_QMARK_;
  var expr__15791 = k__4135__auto__;
  if (cljs.core.truth_(pred__15790.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__15791))) {
    return new schema.core.One(G__15786, self__.optional_QMARK_, self__.name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15790.call(null, new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), expr__15791))) {
      return new schema.core.One(self__.schema, G__15786, self__.name, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__15790.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), expr__15791))) {
        return new schema.core.One(self__.schema, self__.optional_QMARK_, G__15786, self__.__meta, self__.__extmap, null);
      } else {
        return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15786), null);
      }
    }
  }
};
schema.core.One.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.One{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), self__.optional_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.One.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.One.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), self__.optional_QMARK_], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.One.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.One.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.One.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15786) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, G__15786, self__.__extmap, self__.__hash);
};
schema.core.One.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.One.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.One.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), null, new cljs.core.Keyword(null, "name", "name", 1017277949), null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.One.cljs$lang$type = true;
schema.core.One.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/One");
};
schema.core.One.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/One");
};
schema.core.__GT_One = function __GT_One(schema__$1, optional_QMARK_, name) {
  return new schema.core.One(schema__$1, optional_QMARK_, name);
};
schema.core.map__GT_One = function map__GT_One(G__15788) {
  return new schema.core.One((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__15788), (new cljs.core.Keyword(null, "optional?", "optional?", 2859340881)).cljs$core$IFn$_invoke$arity$1(G__15788), (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(G__15788), null, cljs.core.dissoc.call(null, G__15788, new cljs.core.Keyword(null, "schema", "schema", 4400883987), new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), 
  new cljs.core.Keyword(null, "name", "name", 1017277949)));
};
schema.core.one = function one(schema__$1, name) {
  return new schema.core.One(schema__$1, false, name);
};
schema.core.optional = function optional(schema__$1, name) {
  return new schema.core.One(schema__$1, true, name);
};
schema.core.parse_sequence_schema = function parse_sequence_schema(s) {
  var vec__15799 = cljs.core.split_with.call(null, function(p1__15794_SHARP_) {
    return p1__15794_SHARP_ instanceof schema.core.One && cljs.core.not.call(null, (new cljs.core.Keyword(null, "optional?", "optional?", 2859340881)).cljs$core$IFn$_invoke$arity$1(p1__15794_SHARP_));
  }, s);
  var required = cljs.core.nth.call(null, vec__15799, 0, null);
  var more = cljs.core.nth.call(null, vec__15799, 1, null);
  var vec__15800 = cljs.core.split_with.call(null, function(vec__15799, required, more) {
    return function(p1__15795_SHARP_) {
      var and__3529__auto__ = p1__15795_SHARP_ instanceof schema.core.One;
      if (and__3529__auto__) {
        return(new cljs.core.Keyword(null, "optional?", "optional?", 2859340881)).cljs$core$IFn$_invoke$arity$1(p1__15795_SHARP_);
      } else {
        return and__3529__auto__;
      }
    };
  }(vec__15799, required, more), more);
  var optional = cljs.core.nth.call(null, vec__15800, 0, null);
  var more__$1 = cljs.core.nth.call(null, vec__15800, 1, null);
  if (cljs.core.count.call(null, more__$1) <= 1 && cljs.core.every_QMARK_.call(null, function(vec__15799, required, more, vec__15800, optional, more__$1) {
    return function(p1__15796_SHARP_) {
      return!(p1__15796_SHARP_ instanceof schema.core.One);
    };
  }(vec__15799, required, more, vec__15800, optional, more__$1), more__$1)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Sequence schema %s does not match [one* optional* rest-schema?]", s));
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, required, optional), cljs.core.first.call(null, more__$1)], null);
};
cljs.core.PersistentVector.prototype.schema$core$Schema$ = true;
cljs.core.PersistentVector.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  var vec__15801 = schema.core.parse_sequence_schema.call(null, this$__$1);
  var singles = cljs.core.nth.call(null, vec__15801, 0, null);
  var multi = cljs.core.nth.call(null, vec__15801, 1, null);
  var single_walkers = cljs.core.vec.call(null, function() {
    var iter__4266__auto__ = function(vec__15801, singles, multi, this$__$1) {
      return function iter__15802(s__15803) {
        return new cljs.core.LazySeq(null, function(vec__15801, singles, multi, this$__$1) {
          return function() {
            var s__15803__$1 = s__15803;
            while (true) {
              var temp__4092__auto__ = cljs.core.seq.call(null, s__15803__$1);
              if (temp__4092__auto__) {
                var s__15803__$2 = temp__4092__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__15803__$2)) {
                  var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15803__$2);
                  var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                  var b__15805 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                  if (function() {
                    var i__15804 = 0;
                    while (true) {
                      if (i__15804 < size__4265__auto__) {
                        var s = cljs.core._nth.call(null, c__4264__auto__, i__15804);
                        cljs.core.chunk_append.call(null, b__15805, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, schema.core.subschema_walker.call(null, s.schema)], null));
                        var G__15820 = i__15804 + 1;
                        i__15804 = G__15820;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15805), iter__15802.call(null, cljs.core.chunk_rest.call(null, s__15803__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15805), null);
                  }
                } else {
                  var s = cljs.core.first.call(null, s__15803__$2);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, schema.core.subschema_walker.call(null, s.schema)], null), iter__15802.call(null, cljs.core.rest.call(null, s__15803__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(vec__15801, singles, multi, this$__$1), null, null);
      };
    }(vec__15801, singles, multi, this$__$1);
    return iter__4266__auto__.call(null, singles);
  }());
  var multi_walker = cljs.core.truth_(multi) ? schema.core.subschema_walker.call(null, multi) : null;
  var err_conj = schema.utils.result_builder.call(null, function(vec__15801, singles, multi, single_walkers, multi_walker, this$__$1) {
    return function(m) {
      return cljs.core.vec.call(null, cljs.core.repeat.call(null, cljs.core.count.call(null, m), null));
    };
  }(vec__15801, singles, multi, single_walkers, multi_walker, this$__$1));
  return function(vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
    return function(x) {
      var or__3541__auto__ = x == null || cljs.core.sequential_QMARK_.call(null, x) ? null : schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "sequential?", "sequential?", 1865038041, null));
        };
      }(vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1)), null));
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        var single_walkers__$1 = single_walkers;
        var x__$1 = x;
        var out = cljs.core.PersistentVector.EMPTY;
        while (true) {
          var temp__4090__auto__ = cljs.core.first.call(null, single_walkers__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var vec__15806 = temp__4090__auto__;
            var first_single = cljs.core.nth.call(null, vec__15806, 0, null);
            var single_walker = cljs.core.nth.call(null, vec__15806, 1, null);
            if (cljs.core.empty_QMARK_.call(null, x__$1)) {
              if (cljs.core.truth_(first_single.optional_QMARK_)) {
                return out;
              } else {
                return err_conj.call(null, out, schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.first, single_walkers__$1)), null, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(single_walkers__$1, x__$1, out, vec__15806, first_single, 
                single_walker, temp__4090__auto__, or__3541__auto__, vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
                  return function() {
                    return cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "present?", "present?", 1377769629, null), function() {
                      var iter__4266__auto__ = function(single_walkers__$1, x__$1, out, vec__15806, first_single, single_walker, temp__4090__auto__, or__3541__auto__, vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
                        return function iter__15807(s__15808) {
                          return new cljs.core.LazySeq(null, function(single_walkers__$1, x__$1, out, vec__15806, first_single, single_walker, temp__4090__auto__, or__3541__auto__, vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
                            return function() {
                              var s__15808__$1 = s__15808;
                              while (true) {
                                var temp__4092__auto__ = cljs.core.seq.call(null, s__15808__$1);
                                if (temp__4092__auto__) {
                                  var s__15808__$2 = temp__4092__auto__;
                                  if (cljs.core.chunked_seq_QMARK_.call(null, s__15808__$2)) {
                                    var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15808__$2);
                                    var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                                    var b__15810 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                                    if (function() {
                                      var i__15809 = 0;
                                      while (true) {
                                        if (i__15809 < size__4265__auto__) {
                                          var vec__15813 = cljs.core._nth.call(null, c__4264__auto__, i__15809);
                                          var single = cljs.core.nth.call(null, vec__15813, 0, null);
                                          if (cljs.core.not.call(null, single.optional_QMARK_)) {
                                            cljs.core.chunk_append.call(null, b__15810, single.name);
                                            var G__15821 = i__15809 + 1;
                                            i__15809 = G__15821;
                                            continue;
                                          } else {
                                            return null;
                                          }
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15810), iter__15807.call(null, cljs.core.chunk_rest.call(null, s__15808__$2)));
                                    } else {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15810), null);
                                    }
                                  } else {
                                    var vec__15814 = cljs.core.first.call(null, s__15808__$2);
                                    var single = cljs.core.nth.call(null, vec__15814, 0, null);
                                    if (cljs.core.not.call(null, single.optional_QMARK_)) {
                                      return cljs.core.cons.call(null, single.name, iter__15807.call(null, cljs.core.rest.call(null, s__15808__$2)));
                                    } else {
                                      return null;
                                    }
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(single_walkers__$1, x__$1, out, vec__15806, first_single, single_walker, temp__4090__auto__, or__3541__auto__, vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1), null, null);
                        };
                      }(single_walkers__$1, x__$1, out, vec__15806, first_single, single_walker, temp__4090__auto__, or__3541__auto__, vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1);
                      return iter__4266__auto__.call(null, single_walkers__$1);
                    }());
                  };
                }(single_walkers__$1, x__$1, out, vec__15806, first_single, single_walker, temp__4090__auto__, or__3541__auto__, vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1)), null)));
              }
            } else {
              var G__15822 = cljs.core.next.call(null, single_walkers__$1);
              var G__15823 = cljs.core.rest.call(null, x__$1);
              var G__15824 = err_conj.call(null, out, schema.utils.wrap_error_name.call(null, first_single.name, single_walker.call(null, cljs.core.first.call(null, x__$1))));
              single_walkers__$1 = G__15822;
              x__$1 = G__15823;
              out = G__15824;
              continue;
            }
          } else {
            if (cljs.core.truth_(multi)) {
              return cljs.core.reduce.call(null, err_conj, out, cljs.core.map.call(null, multi_walker, x__$1));
            } else {
              if (cljs.core.seq.call(null, x__$1)) {
                return err_conj.call(null, out, schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, null, x__$1, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(single_walkers__$1, x__$1, out, temp__4090__auto__, or__3541__auto__, vec__15801, singles, multi, single_walkers, multi_walker, err_conj, 
                this$__$1) {
                  return function() {
                    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.count.call(null, x__$1)), new cljs.core.Symbol(null, "has-extra-elts?", "has-extra-elts?", 1127383714, null));
                  };
                }(single_walkers__$1, x__$1, out, temp__4090__auto__, or__3541__auto__, vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1)), null)));
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return out;
                } else {
                  return null;
                }
              }
            }
          }
          break;
        }
      }
    };
  }(vec__15801, singles, multi, single_walkers, multi_walker, err_conj, this$__$1);
};
cljs.core.PersistentVector.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  var vec__15815 = schema.core.parse_sequence_schema.call(null, this$__$1);
  var singles = cljs.core.nth.call(null, vec__15815, 0, null);
  var multi = cljs.core.nth.call(null, vec__15815, 1, null);
  return cljs.core.vec.call(null, cljs.core.concat.call(null, function() {
    var iter__4266__auto__ = function(vec__15815, singles, multi, this$__$1) {
      return function iter__15816(s__15817) {
        return new cljs.core.LazySeq(null, function(vec__15815, singles, multi, this$__$1) {
          return function() {
            var s__15817__$1 = s__15817;
            while (true) {
              var temp__4092__auto__ = cljs.core.seq.call(null, s__15817__$1);
              if (temp__4092__auto__) {
                var s__15817__$2 = temp__4092__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__15817__$2)) {
                  var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15817__$2);
                  var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                  var b__15819 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                  if (function() {
                    var i__15818 = 0;
                    while (true) {
                      if (i__15818 < size__4265__auto__) {
                        var s = cljs.core._nth.call(null, c__4264__auto__, i__15818);
                        cljs.core.chunk_append.call(null, b__15819, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(s)), schema.core.explain.call(null, (new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(s))), cljs.core.truth_(s.optional_QMARK_) ? new cljs.core.Symbol(null, "optional", "optional", -1719548647, null) : 
                        new cljs.core.Symbol(null, "one", "one", -1640421345, null)));
                        var G__15825 = i__15818 + 1;
                        i__15818 = G__15825;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15819), iter__15816.call(null, cljs.core.chunk_rest.call(null, s__15817__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15819), null);
                  }
                } else {
                  var s = cljs.core.first.call(null, s__15817__$2);
                  return cljs.core.cons.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(s)), schema.core.explain.call(null, (new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(s))), cljs.core.truth_(s.optional_QMARK_) ? new cljs.core.Symbol(null, "optional", "optional", -1719548647, null) : new cljs.core.Symbol(null, 
                  "one", "one", -1640421345, null)), iter__15816.call(null, cljs.core.rest.call(null, s__15817__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(vec__15815, singles, multi, this$__$1), null, null);
      };
    }(vec__15815, singles, multi, this$__$1);
    return iter__4266__auto__.call(null, singles);
  }(), cljs.core.truth_(multi) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explain.call(null, multi)], null) : null));
};
schema.core.pair = function pair(first_schema, first_name, second_schema, second_name) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, first_schema, first_name), schema.core.one.call(null, second_schema, second_name)], null);
};
schema.core.Record = function(klass, schema, __meta, __extmap) {
  this.klass = klass;
  this.schema = schema;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Record.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.Record.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.Record.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15827, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15829 = k15827 instanceof cljs.core.Keyword ? k15827.fqn : null;
  var caseval__15833;
  switch(G__15829) {
    case "schema":
      caseval__15833 = self__.schema;
      break;
    case "klass":
      caseval__15833 = self__.klass;
      break;
    default:
      caseval__15833 = cljs.core.get.call(null, self__.__extmap, k15827, else__4130__auto__);
  }
  return caseval__15833;
};
schema.core.Record.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15826) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15830 = cljs.core.keyword_identical_QMARK_;
  var expr__15831 = k__4135__auto__;
  if (cljs.core.truth_(pred__15830.call(null, new cljs.core.Keyword(null, "klass", "klass", 1116035314), expr__15831))) {
    return new schema.core.Record(G__15826, self__.schema, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15830.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__15831))) {
      return new schema.core.Record(self__.klass, G__15826, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.Record(self__.klass, self__.schema, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15826), null);
    }
  }
};
schema.core.Record.prototype.schema$core$Schema$ = true;
schema.core.Record.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var map_checker = schema.core.subschema_walker.call(null, self__.schema);
  var pred_checker = function() {
    var temp__4092__auto__ = (new cljs.core.Keyword(null, "extra-validator-fn", "extra-validator-fn", 2525540146)).cljs$core$IFn$_invoke$arity$1(this$__$1);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var evf = temp__4092__auto__;
      return schema.core.subschema_walker.call(null, schema.core.pred.call(null, evf));
    } else {
      return null;
    }
  }();
  return function(map_checker, pred_checker, this$__$1) {
    return function(r) {
      var or__3541__auto__ = r instanceof self__.klass ? null : schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, r, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(map_checker, pred_checker, this$__$1) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, r)), self__.klass), new cljs.core.Symbol(null, "instance?", "instance?", -1611433981, null));
        };
      }(map_checker, pred_checker, this$__$1)), null));
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        var res = map_checker.call(null, r);
        if (schema.utils.error_QMARK_.call(null, res)) {
          return res;
        } else {
          var pred_res = cljs.core.truth_(pred_checker) ? pred_checker.call(null, r) : null;
          if (schema.utils.error_QMARK_.call(null, pred_res)) {
            return pred_res;
          } else {
            return cljs.core.merge.call(null, r, res);
          }
        }
      }
    };
  }(map_checker, pred_checker, this$__$1);
};
schema.core.Record.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, self__.schema)), cljs.core.symbol.call(null, cljs.core.pr_str.call(null, self__.klass))), new cljs.core.Symbol(null, "record", "record", 1719526922, null));
};
schema.core.Record.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.Record{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "klass", "klass", 1116035314), self__.klass], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Record.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.Record.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "klass", "klass", 1116035314), self__.klass], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Record.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Record.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Record.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15826) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.Record(self__.klass, self__.schema, G__15826, self__.__extmap, self__.__hash);
};
schema.core.Record.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.Record(self__.klass, self__.schema, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Record.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.Record.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "klass", "klass", 1116035314), null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.Record(self__.klass, self__.schema, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.Record.cljs$lang$type = true;
schema.core.Record.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Record");
};
schema.core.Record.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/Record");
};
schema.core.__GT_Record = function __GT_Record(klass, schema__$1) {
  return new schema.core.Record(klass, schema__$1);
};
schema.core.map__GT_Record = function map__GT_Record(G__15828) {
  return new schema.core.Record((new cljs.core.Keyword(null, "klass", "klass", 1116035314)).cljs$core$IFn$_invoke$arity$1(G__15828), (new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__15828), null, cljs.core.dissoc.call(null, G__15828, new cljs.core.Keyword(null, "klass", "klass", 1116035314), new cljs.core.Keyword(null, "schema", "schema", 4400883987)));
};
schema.core.record = function record(klass, schema__$1) {
  if (cljs.core.map_QMARK_.call(null, schema__$1)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Expected map, got %s", schema.utils.type_of.call(null, schema__$1)));
  }
  return new schema.core.Record(klass, schema__$1);
};
schema.core.explain_input_schema = function explain_input_schema(input_schema) {
  var vec__15837 = cljs.core.split_with.call(null, function(p1__15834_SHARP_) {
    return p1__15834_SHARP_ instanceof schema.core.One;
  }, input_schema);
  var required = cljs.core.nth.call(null, vec__15837, 0, null);
  var more = cljs.core.nth.call(null, vec__15837, 1, null);
  return cljs.core.concat.call(null, cljs.core.map.call(null, function(vec__15837, required, more) {
    return function(p1__15835_SHARP_) {
      return schema.core.explain.call(null, p1__15835_SHARP_.schema);
    };
  }(vec__15837, required, more), required), cljs.core.seq.call(null, more) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), cljs.core.mapv.call(null, schema.core.explain, more)], null) : null);
};
schema.core.FnSchema = function(output_schema, input_schemas, __meta, __extmap) {
  this.output_schema = output_schema;
  this.input_schemas = input_schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.FnSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
schema.core.FnSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
schema.core.FnSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k15839, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__15841 = k15839 instanceof cljs.core.Keyword ? k15839.fqn : null;
  var caseval__15845;
  switch(G__15841) {
    case "input-schemas":
      caseval__15845 = self__.input_schemas;
      break;
    case "output-schema":
      caseval__15845 = self__.output_schema;
      break;
    default:
      caseval__15845 = cljs.core.get.call(null, self__.__extmap, k15839, else__4130__auto__);
  }
  return caseval__15845;
};
schema.core.FnSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__15838) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__15842 = cljs.core.keyword_identical_QMARK_;
  var expr__15843 = k__4135__auto__;
  if (cljs.core.truth_(pred__15842.call(null, new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), expr__15843))) {
    return new schema.core.FnSchema(G__15838, self__.input_schemas, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15842.call(null, new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), expr__15843))) {
      return new schema.core.FnSchema(self__.output_schema, G__15838, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__15838), null);
    }
  }
};
schema.core.FnSchema.prototype.schema$core$Schema$ = true;
schema.core.FnSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core.fn_QMARK_.call(null, x)) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "fn?", "fn?", -1640430032, null));
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.FnSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.input_schemas) > 1) {
    return cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "\x3d\x3e*", "\x3d\x3e*", -1640470942, null), schema.core.explain.call(null, self__.output_schema), cljs.core.map.call(null, schema.core.explain_input_schema, self__.input_schemas));
  } else {
    return cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "\x3d\x3e", "\x3d\x3e", -1640529574, null), schema.core.explain.call(null, self__.output_schema), schema.core.explain_input_schema.call(null, cljs.core.first.call(null, self__.input_schemas)));
  }
};
schema.core.FnSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#schema.core.FnSchema{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), self__.output_schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), self__.input_schemas], null)], null), self__.__extmap));
};
schema.core.FnSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
schema.core.FnSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), self__.output_schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), self__.input_schemas], 
  null)], null), self__.__extmap));
};
schema.core.FnSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.FnSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.FnSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__15838) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, G__15838, self__.__extmap, self__.__hash);
};
schema.core.FnSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.FnSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
schema.core.FnSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), null, new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
schema.core.FnSchema.cljs$lang$type = true;
schema.core.FnSchema.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/FnSchema");
};
schema.core.FnSchema.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "schema.core/FnSchema");
};
schema.core.__GT_FnSchema = function __GT_FnSchema(output_schema, input_schemas) {
  return new schema.core.FnSchema(output_schema, input_schemas);
};
schema.core.map__GT_FnSchema = function map__GT_FnSchema(G__15840) {
  return new schema.core.FnSchema((new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263)).cljs$core$IFn$_invoke$arity$1(G__15840), (new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529)).cljs$core$IFn$_invoke$arity$1(G__15840), null, cljs.core.dissoc.call(null, G__15840, new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529)));
};
schema.core.arity = function arity(input_schema) {
  if (cljs.core.seq.call(null, input_schema)) {
    if (cljs.core.last.call(null, input_schema) instanceof schema.core.One) {
      return cljs.core.count.call(null, input_schema);
    } else {
      return Number.MAX_VALUE;
    }
  } else {
    return 0;
  }
};
schema.core.make_fn_schema = function make_fn_schema(output_schema, input_schemas) {
  if (cljs.core.seq.call(null, input_schemas)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Function must have at least one input schema"));
  }
  if (cljs.core.every_QMARK_.call(null, cljs.core.vector_QMARK_, input_schemas)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Each arity must be a vector."));
  }
  if (cljs.core.truth_(cljs.core.apply.call(null, cljs.core.distinct_QMARK_, cljs.core.map.call(null, schema.core.arity, input_schemas)))) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Arities must be distinct"));
  }
  return new schema.core.FnSchema(output_schema, cljs.core.sort_by.call(null, schema.core.arity, input_schemas));
};
schema.core.fn_validation_QMARK_ = function fn_validation_QMARK_() {
  return schema.utils.use_fn_validation.get_cell();
};
schema.core.set_fn_validation_BANG_ = function set_fn_validation_BANG_(on_QMARK_) {
  return schema.utils.use_fn_validation.set_cell(on_QMARK_);
};
schema.core.schematize_fn = function schematize_fn(f, schema__$1) {
  return cljs.core.vary_meta.call(null, f, cljs.core.assoc, new cljs.core.Keyword(null, "schema", "schema", 4400883987), schema__$1);
};
schema.core.fn_schema = function fn_schema(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Non-function %s", schema.utils.type_of.call(null, f)));
  }
  var or__3541__auto__ = schema.utils.class_schema.call(null, schema.utils.fn_schema_bearer.call(null, f));
  if (cljs.core.truth_(or__3541__auto__)) {
    return or__3541__auto__;
  } else {
    var m__7169__auto__ = cljs.core.meta.call(null, f);
    var k__7170__auto__ = new cljs.core.Keyword(null, "schema", "schema", 4400883987);
    var temp__4090__auto__ = cljs.core.find.call(null, m__7169__auto__, k__7170__auto__);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var pair__7171__auto__ = temp__4090__auto__;
      return cljs.core.val.call(null, pair__7171__auto__);
    } else {
      throw new Error(schema.utils.format_STAR_.call(null, "Key %s not found in %s", k__7170__auto__, m__7169__auto__));
    }
  }
};
schema.core.schema_with_name = function schema_with_name(schema__$1, name) {
  return cljs.core.with_meta.call(null, schema__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1017277949), name], null));
};
schema.core.schema_name = function schema_name(schema__$1) {
  return(new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, schema__$1));
};
goog.provide("plumbing.fnk.schema");
goog.require("cljs.core");
goog.require("schema.utils");
goog.require("schema.utils");
goog.require("schema.core");
goog.require("schema.core");
plumbing.fnk.schema.Schema = cljs.core.with_meta.call(null, schema.core.__GT_Protocol.call(null, schema.core.Schema), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "proto-sym", "proto-sym", 4707957972), new cljs.core.Symbol("s", "Schema", "s/Schema", 830322725, null), new cljs.core.Keyword(null, "proto-pred", "proto-pred", 3860323928), function(p1__7277__7278__auto__) {
  var G__15305 = p1__7277__7278__auto__;
  if (G__15305) {
    var bit__4191__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3541__auto__ = bit__4191__auto__;
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return G__15305.schema$core$Schema$;
      }
    }())) {
      return true;
    } else {
      if (!G__15305.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, schema.core.Schema, G__15305);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, schema.core.Schema, G__15305);
  }
}], null));
plumbing.fnk.schema.InputSchema = new cljs.core.PersistentArrayMap.fromArray([schema.core.either.call(null, schema.core.eq.call(null, schema.core.Keyword), schema.core.OptionalKey, schema.core.Keyword), plumbing.fnk.schema.Schema], true, false);
plumbing.fnk.schema.OutputSchema = plumbing.fnk.schema.Schema;
plumbing.fnk.schema.IOSchemata = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "input", "input", -1540173437, null)), schema.core.one.call(null, plumbing.fnk.schema.OutputSchema, new cljs.core.Symbol(null, "output", "output", 1648923322, null))], null);
plumbing.fnk.schema.GraphInputSchema = new cljs.core.PersistentArrayMap.fromArray([schema.core.either.call(null, schema.core.OptionalKey, schema.core.Keyword), plumbing.fnk.schema.Schema], true, false);
plumbing.fnk.schema.MapOutputSchema = new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, plumbing.fnk.schema.Schema], true, false);
plumbing.fnk.schema.GraphIOSchemata = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.GraphInputSchema, new cljs.core.Symbol(null, "input", "input", -1540173437, null)), schema.core.one.call(null, plumbing.fnk.schema.MapOutputSchema, new cljs.core.Symbol(null, "output", "output", 1648923322, null))], null);
plumbing.fnk.schema.assert_distinct = function assert_distinct(things) {
  var repeated_things = cljs.core.seq.call(null, cljs.core.filter.call(null, function(p1__15306_SHARP_) {
    return cljs.core.val.call(null, p1__15306_SHARP_) > 1;
  }, cljs.core.frequencies.call(null, things)));
  if (cljs.core.empty_QMARK_.call(null, repeated_things)) {
    return null;
  } else {
    throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Got repeated items (expected distinct): %s", repeated_things));
  }
};
plumbing.fnk.schema.safe_get = function safe_get(m, k, key_path) {
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Expected a map at key-path %s, got type %s", key_path, schema.utils.type_of.call(null, m)));
  }
  var vec__15308 = cljs.core.find.call(null, m, k);
  var _ = cljs.core.nth.call(null, vec__15308, 0, null);
  var v = cljs.core.nth.call(null, vec__15308, 1, null);
  var p = vec__15308;
  if (cljs.core.truth_(p)) {
  } else {
    throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Key %s not found in %s", k, cljs.core.keys.call(null, m)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.Keyword(null, "missing-key", "missing-key", 2360894698), new cljs.core.Keyword(null, "key", "key", 1014010321), k, new cljs.core.Keyword(null, "map", "map", 1014012110), m], null));
  }
  return v;
};
plumbing.fnk.schema.non_map_union = function non_map_union(s1, s2) {
  if (cljs.core._EQ_.call(null, s1, s2)) {
    return s1;
  } else {
    if (cljs.core._EQ_.call(null, s1, schema.core.Any)) {
      return s2;
    } else {
      if (cljs.core._EQ_.call(null, s2, schema.core.Any)) {
        return s1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return schema.core.both.call(null, s1, s2);
        } else {
          return null;
        }
      }
    }
  }
};
plumbing.fnk.schema.non_map_diff = function non_map_diff(s1, s2) {
  return null;
};
plumbing.fnk.schema.map_schema_QMARK_ = function map_schema_QMARK_(m) {
  return m instanceof cljs.core.PersistentArrayMap || m instanceof cljs.core.PersistentHashMap;
};
var ufv___15314 = schema.utils.use_fn_validation;
var output_schema15309_15315 = schema.core.maybe.call(null, schema.core.pair.call(null, schema.core.Keyword, "k", schema.core.Bool, "optional?"));
var input_schema15310_15316 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "k", "k", -1640531420, null))], null);
var input_checker15311_15317 = schema.core.checker.call(null, input_schema15310_15316);
var output_checker15312_15318 = schema.core.checker.call(null, output_schema15309_15315);
plumbing.fnk.schema.unwrap_schema_form_key = function(ufv___15314, output_schema15309_15315, input_schema15310_15316, input_checker15311_15317, output_checker15312_15318) {
  return function unwrap_schema_form_key(G__15313) {
    var validate__7247__auto__ = ufv___15314.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___15319 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__15313], null);
      var temp__4092__auto___15320 = input_checker15311_15317.call(null, args__7248__auto___15319);
      if (cljs.core.truth_(temp__4092__auto___15320)) {
        var error__7249__auto___15321 = temp__4092__auto___15320;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "unwrap-schema-form-key", "unwrap-schema-form-key", -143561007, null), cljs.core.pr_str.call(null, error__7249__auto___15321)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15321, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema15310_15316, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__7248__auto___15319], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var k = G__15313;
      while (true) {
        if (schema.core.specific_key_QMARK_.call(null, k)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explicit_schema_key.call(null, k), schema.core.required_key_QMARK_.call(null, k)], null);
        } else {
          if (cljs.core.sequential_QMARK_.call(null, k) && (!cljs.core.vector_QMARK_.call(null, k) && (cljs.core._EQ_.call(null, cljs.core.count.call(null, k), 2) && cljs.core._EQ_.call(null, cljs.core.first.call(null, k), new cljs.core.Symbol("schema.core", "optional-key", "schema.core/optional-key", -54341422, null))))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.second.call(null, k), false], null);
          } else {
            return null;
          }
        }
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___15322 = output_checker15312_15318.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___15322)) {
        var error__7249__auto___15323 = temp__4092__auto___15322;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "unwrap-schema-form-key", "unwrap-schema-form-key", -143561007, null), cljs.core.pr_str.call(null, error__7249__auto___15323)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15323, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema15309_15315, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___15314, output_schema15309_15315, input_schema15310_15316, input_checker15311_15317, output_checker15312_15318);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.unwrap_schema_form_key), schema.core.make_fn_schema.call(null, output_schema15309_15315, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema15310_15316], null)));
var ufv___15329 = schema.utils.use_fn_validation;
var output_schema15324_15330 = schema.core.Any;
var input_schema15325_15331 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "s", "s", -1640531412, null))], null);
var input_checker15326_15332 = schema.core.checker.call(null, input_schema15325_15331);
var output_checker15327_15333 = schema.core.checker.call(null, output_schema15324_15330);
plumbing.fnk.schema.explicit_schema_key_map = function(ufv___15329, output_schema15324_15330, input_schema15325_15331, input_checker15326_15332, output_checker15327_15333) {
  return function explicit_schema_key_map(G__15328) {
    var validate__7247__auto__ = ufv___15329.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___15334 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__15328], null);
      var temp__4092__auto___15335 = input_checker15326_15332.call(null, args__7248__auto___15334);
      if (cljs.core.truth_(temp__4092__auto___15335)) {
        var error__7249__auto___15336 = temp__4092__auto___15335;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "explicit-schema-key-map", "explicit-schema-key-map", 2031840052, null), cljs.core.pr_str.call(null, error__7249__auto___15336)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15336, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema15325_15331, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__7248__auto___15334], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var s = G__15328;
      while (true) {
        new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Bool], true, false);
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.keep.call(null, plumbing.fnk.schema.unwrap_schema_form_key, cljs.core.keys.call(null, s)));
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___15337 = output_checker15327_15333.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___15337)) {
        var error__7249__auto___15338 = temp__4092__auto___15337;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "explicit-schema-key-map", "explicit-schema-key-map", 2031840052, null), cljs.core.pr_str.call(null, error__7249__auto___15338)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15338, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema15324_15330, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___15329, output_schema15324_15330, input_schema15325_15331, input_checker15326_15332, output_checker15327_15333);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.explicit_schema_key_map), schema.core.make_fn_schema.call(null, output_schema15324_15330, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema15325_15331], null)));
var ufv___15344 = schema.utils.use_fn_validation;
var output_schema15339_15345 = schema.core.Any;
var input_schema15340_15346 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Bool], true, false), new cljs.core.Symbol(null, "s", "s", -1640531412, null))], null);
var input_checker15341_15347 = schema.core.checker.call(null, input_schema15340_15346);
var output_checker15342_15348 = schema.core.checker.call(null, output_schema15339_15345);
plumbing.fnk.schema.split_schema_keys = function(ufv___15344, output_schema15339_15345, input_schema15340_15346, input_checker15341_15347, output_checker15342_15348) {
  return function split_schema_keys(G__15343) {
    var validate__7247__auto__ = ufv___15344.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___15349 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__15343], null);
      var temp__4092__auto___15350 = input_checker15341_15347.call(null, args__7248__auto___15349);
      if (cljs.core.truth_(temp__4092__auto___15350)) {
        var error__7249__auto___15351 = temp__4092__auto___15350;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema-keys", "split-schema-keys", 1165575718, null), cljs.core.pr_str.call(null, error__7249__auto___15351)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15351, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema15340_15346, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__7248__auto___15349], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var s = G__15343;
      while (true) {
        new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null), new cljs.core.Symbol(null, "required", "required", -2033670824, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null), new cljs.core.Symbol(null, "optional", "optional", -1719548647, 
        null))], null);
        return cljs.core.mapv.call(null, cljs.core.partial.call(null, cljs.core.mapv, cljs.core.key), cljs.core.juxt.call(null, cljs.core.filter, cljs.core.remove).call(null, cljs.core.val, s));
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___15352 = output_checker15342_15348.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___15352)) {
        var error__7249__auto___15353 = temp__4092__auto___15352;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema-keys", "split-schema-keys", 1165575718, null), cljs.core.pr_str.call(null, error__7249__auto___15353)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15353, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema15339_15345, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___15344, output_schema15339_15345, input_schema15340_15346, input_checker15341_15347, output_checker15342_15348);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.split_schema_keys), schema.core.make_fn_schema.call(null, output_schema15339_15345, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema15340_15346], null)));
plumbing.fnk.schema.merge_on_with = function() {
  var merge_on_with__delegate = function(key_project, key_combine, val_combine, maps) {
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.vals.call(null, cljs.core.reduce.call(null, function(m, p__15357) {
      var vec__15358 = p__15357;
      var k = cljs.core.nth.call(null, vec__15358, 0, null);
      var v = cljs.core.nth.call(null, vec__15358, 1, null);
      var pk = key_project.call(null, k);
      var temp__4090__auto__ = cljs.core.get.call(null, m, pk);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var vec__15359 = temp__4090__auto__;
        var ok = cljs.core.nth.call(null, vec__15359, 0, null);
        var ov = cljs.core.nth.call(null, vec__15359, 1, null);
        return cljs.core.assoc.call(null, m, pk, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_combine.call(null, ok, k), val_combine.call(null, ov, v)], null));
      } else {
        return cljs.core.assoc.call(null, m, pk, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
      }
    }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.apply.call(null, cljs.core.concat, maps))));
  };
  var merge_on_with = function(key_project, key_combine, val_combine, var_args) {
    var maps = null;
    if (arguments.length > 3) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return merge_on_with__delegate.call(this, key_project, key_combine, val_combine, maps);
  };
  merge_on_with.cljs$lang$maxFixedArity = 3;
  merge_on_with.cljs$lang$applyTo = function(arglist__15360) {
    var key_project = cljs.core.first(arglist__15360);
    arglist__15360 = cljs.core.next(arglist__15360);
    var key_combine = cljs.core.first(arglist__15360);
    arglist__15360 = cljs.core.next(arglist__15360);
    var val_combine = cljs.core.first(arglist__15360);
    var maps = cljs.core.rest(arglist__15360);
    return merge_on_with__delegate(key_project, key_combine, val_combine, maps);
  };
  merge_on_with.cljs$core$IFn$_invoke$arity$variadic = merge_on_with__delegate;
  return merge_on_with;
}();
var ufv___15368 = schema.utils.use_fn_validation;
var output_schema15362_15369 = plumbing.fnk.schema.InputSchema;
var input_schema15363_15370 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "i1", "i1", -1640528223, null)), schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "i2", "i2", -1640528222, null))], null);
var input_checker15364_15371 = schema.core.checker.call(null, input_schema15363_15370);
var output_checker15365_15372 = schema.core.checker.call(null, output_schema15362_15369);
plumbing.fnk.schema.union_input_schemata = function(ufv___15368, output_schema15362_15369, input_schema15363_15370, input_checker15364_15371, output_checker15365_15372) {
  return function union_input_schemata(G__15366, G__15367) {
    var validate__7247__auto__ = ufv___15368.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___15373 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__15366, G__15367], null);
      var temp__4092__auto___15374 = input_checker15364_15371.call(null, args__7248__auto___15373);
      if (cljs.core.truth_(temp__4092__auto___15374)) {
        var error__7249__auto___15375 = temp__4092__auto___15374;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "union-input-schemata", "union-input-schemata", 1314662120, null), cljs.core.pr_str.call(null, error__7249__auto___15375)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15375, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema15363_15370, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__7248__auto___15373], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var i1 = G__15366;
      var i2 = G__15367;
      while (true) {
        return plumbing.fnk.schema.merge_on_with.call(null, function(validate__7247__auto__, ufv___15368, output_schema15362_15369, input_schema15363_15370, input_checker15364_15371, output_checker15365_15372) {
          return function(p1__15361_SHARP_) {
            if (schema.core.specific_key_QMARK_.call(null, p1__15361_SHARP_)) {
              return schema.core.explicit_schema_key.call(null, p1__15361_SHARP_);
            } else {
              return new cljs.core.Keyword(null, "extra", "extra", 1110869890);
            }
          };
        }(validate__7247__auto__, ufv___15368, output_schema15362_15369, input_schema15363_15370, input_checker15364_15371, output_checker15365_15372), function(validate__7247__auto__, ufv___15368, output_schema15362_15369, input_schema15363_15370, input_checker15364_15371, output_checker15365_15372) {
          return function(k1, k2) {
            if (schema.core.required_key_QMARK_.call(null, k1)) {
              return k1;
            } else {
              if (schema.core.required_key_QMARK_.call(null, k2)) {
                return k2;
              } else {
                if (schema.core.optional_key_QMARK_.call(null, k1)) {
                  if (cljs.core._EQ_.call(null, k1, k2)) {
                  } else {
                    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null), new cljs.core.Symbol(null, "k1", "k1", -1640528161, null), new cljs.core.Symbol(null, "k2", "k2", -1640528160, null)))));
                  }
                  return k1;
                } else {
                  if (cljs.core._EQ_.call(null, k1, k2)) {
                    return k1;
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      if (false) {
                        return null;
                      } else {
                        throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Only one extra schema allowed"));
                      }
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(validate__7247__auto__, ufv___15368, output_schema15362_15369, input_schema15363_15370, input_checker15364_15371, output_checker15365_15372), function(validate__7247__auto__, ufv___15368, output_schema15362_15369, input_schema15363_15370, input_checker15364_15371, output_checker15365_15372) {
          return function(s1, s2) {
            if (plumbing.fnk.schema.map_schema_QMARK_.call(null, s1) && plumbing.fnk.schema.map_schema_QMARK_.call(null, s2)) {
              return union_input_schemata.call(null, s1, s2);
            } else {
              return plumbing.fnk.schema.non_map_union.call(null, s1, s2);
            }
          };
        }(validate__7247__auto__, ufv___15368, output_schema15362_15369, input_schema15363_15370, input_checker15364_15371, output_checker15365_15372), i1, i2);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___15376 = output_checker15365_15372.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___15376)) {
        var error__7249__auto___15377 = temp__4092__auto___15376;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "union-input-schemata", "union-input-schemata", 1314662120, null), cljs.core.pr_str.call(null, error__7249__auto___15377)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15377, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema15362_15369, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___15368, output_schema15362_15369, input_schema15363_15370, input_checker15364_15371, output_checker15365_15372);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.union_input_schemata), schema.core.make_fn_schema.call(null, output_schema15362_15369, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema15363_15370], null)));
var ufv___15383 = schema.utils.use_fn_validation;
var output_schema15378_15384 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null);
var input_schema15379_15385 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "input-schema", "input-schema", -1943844163, null))], null);
var input_checker15380_15386 = schema.core.checker.call(null, input_schema15379_15385);
var output_checker15381_15387 = schema.core.checker.call(null, output_schema15378_15384);
plumbing.fnk.schema.required_toplevel_keys = function(ufv___15383, output_schema15378_15384, input_schema15379_15385, input_checker15380_15386, output_checker15381_15387) {
  return function required_toplevel_keys(G__15382) {
    var validate__7247__auto__ = ufv___15383.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___15388 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__15382], null);
      var temp__4092__auto___15389 = input_checker15380_15386.call(null, args__7248__auto___15388);
      if (cljs.core.truth_(temp__4092__auto___15389)) {
        var error__7249__auto___15390 = temp__4092__auto___15389;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "required-toplevel-keys", "required-toplevel-keys", -1439959619, null), cljs.core.pr_str.call(null, error__7249__auto___15390)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15390, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema15379_15385, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__7248__auto___15388], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var input_schema = G__15382;
      while (true) {
        return cljs.core.keep.call(null, function(validate__7247__auto__, ufv___15383, output_schema15378_15384, input_schema15379_15385, input_checker15380_15386, output_checker15381_15387) {
          return function(k) {
            if (schema.core.required_key_QMARK_.call(null, k)) {
              return schema.core.explicit_schema_key.call(null, k);
            } else {
              return null;
            }
          };
        }(validate__7247__auto__, ufv___15383, output_schema15378_15384, input_schema15379_15385, input_checker15380_15386, output_checker15381_15387), cljs.core.keys.call(null, input_schema));
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___15391 = output_checker15381_15387.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___15391)) {
        var error__7249__auto___15392 = temp__4092__auto___15391;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "required-toplevel-keys", "required-toplevel-keys", -1439959619, null), cljs.core.pr_str.call(null, error__7249__auto___15392)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15392, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema15378_15384, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___15383, output_schema15378_15384, input_schema15379_15385, input_checker15380_15386, output_checker15381_15387);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.required_toplevel_keys), schema.core.make_fn_schema.call(null, output_schema15378_15384, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema15379_15385], null)));
plumbing.fnk.schema.guess_expr_output_schema = function guess_expr_output_schema(expr) {
  if (cljs.core.map_QMARK_.call(null, expr) && cljs.core.every_QMARK_.call(null, cljs.core.keyword_QMARK_, cljs.core.keys.call(null, expr))) {
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4266__auto__ = function iter__15401(s__15402) {
        return new cljs.core.LazySeq(null, function() {
          var s__15402__$1 = s__15402;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__15402__$1);
            if (temp__4092__auto__) {
              var s__15402__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__15402__$2)) {
                var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15402__$2);
                var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                var b__15404 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                if (function() {
                  var i__15403 = 0;
                  while (true) {
                    if (i__15403 < size__4265__auto__) {
                      var vec__15407 = cljs.core._nth.call(null, c__4264__auto__, i__15403);
                      var k = cljs.core.nth.call(null, vec__15407, 0, null);
                      var v = cljs.core.nth.call(null, vec__15407, 1, null);
                      cljs.core.chunk_append.call(null, b__15404, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, guess_expr_output_schema.call(null, v)], null));
                      var G__15409 = i__15403 + 1;
                      i__15403 = G__15409;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15404), iter__15401.call(null, cljs.core.chunk_rest.call(null, s__15402__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15404), null);
                }
              } else {
                var vec__15408 = cljs.core.first.call(null, s__15402__$2);
                var k = cljs.core.nth.call(null, vec__15408, 0, null);
                var v = cljs.core.nth.call(null, vec__15408, 1, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, guess_expr_output_schema.call(null, v)], null), iter__15401.call(null, cljs.core.rest.call(null, s__15402__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4266__auto__.call(null, expr);
    }());
  } else {
    return new cljs.core.Symbol("schema.core", "Any", "schema.core/Any", 271859124, null);
  }
};
plumbing.fnk.schema.schema_diff = function schema_diff(input_schema, output_schema) {
  if (!plumbing.fnk.schema.map_schema_QMARK_.call(null, input_schema)) {
    return plumbing.fnk.schema.non_map_diff.call(null, input_schema, output_schema);
  } else {
    if (!plumbing.fnk.schema.map_schema_QMARK_.call(null, output_schema)) {
      return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, input_schema, output_schema, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function() {
        return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, output_schema)), new cljs.core.Symbol(null, "map?", "map?", -1637187556, null));
      }), null));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.not_empty.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
          var iter__4266__auto__ = function iter__15418(s__15419) {
            return new cljs.core.LazySeq(null, function() {
              var s__15419__$1 = s__15419;
              while (true) {
                var temp__4092__auto__ = cljs.core.seq.call(null, s__15419__$1);
                if (temp__4092__auto__) {
                  var s__15419__$2 = temp__4092__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__15419__$2)) {
                    var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15419__$2);
                    var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                    var b__15421 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                    if (function() {
                      var i__15420 = 0;
                      while (true) {
                        if (i__15420 < size__4265__auto__) {
                          var vec__15424 = cljs.core._nth.call(null, c__4264__auto__, i__15420);
                          var k = cljs.core.nth.call(null, vec__15424, 0, null);
                          var v = cljs.core.nth.call(null, vec__15424, 1, null);
                          if (schema.core.specific_key_QMARK_.call(null, k)) {
                            var required_QMARK_ = schema.core.required_key_QMARK_.call(null, k);
                            var raw_k = schema.core.explicit_schema_key.call(null, k);
                            var present_QMARK_ = cljs.core.contains_QMARK_.call(null, output_schema, raw_k);
                            if (required_QMARK_ || present_QMARK_) {
                              var fail = !present_QMARK_ ? new cljs.core.Symbol(null, "missing-required-key", "missing-required-key", -1340904975, null) : schema_diff.call(null, v, cljs.core.get.call(null, output_schema, raw_k));
                              if (cljs.core.truth_(fail)) {
                                cljs.core.chunk_append.call(null, b__15421, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, fail], null));
                                var G__15426 = i__15420 + 1;
                                i__15420 = G__15426;
                                continue;
                              } else {
                                var G__15427 = i__15420 + 1;
                                i__15420 = G__15427;
                                continue;
                              }
                            } else {
                              var G__15428 = i__15420 + 1;
                              i__15420 = G__15428;
                              continue;
                            }
                          } else {
                            var G__15429 = i__15420 + 1;
                            i__15420 = G__15429;
                            continue;
                          }
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15421), iter__15418.call(null, cljs.core.chunk_rest.call(null, s__15419__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15421), null);
                    }
                  } else {
                    var vec__15425 = cljs.core.first.call(null, s__15419__$2);
                    var k = cljs.core.nth.call(null, vec__15425, 0, null);
                    var v = cljs.core.nth.call(null, vec__15425, 1, null);
                    if (schema.core.specific_key_QMARK_.call(null, k)) {
                      var required_QMARK_ = schema.core.required_key_QMARK_.call(null, k);
                      var raw_k = schema.core.explicit_schema_key.call(null, k);
                      var present_QMARK_ = cljs.core.contains_QMARK_.call(null, output_schema, raw_k);
                      if (required_QMARK_ || present_QMARK_) {
                        var fail = !present_QMARK_ ? new cljs.core.Symbol(null, "missing-required-key", "missing-required-key", -1340904975, null) : schema_diff.call(null, v, cljs.core.get.call(null, output_schema, raw_k));
                        if (cljs.core.truth_(fail)) {
                          return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, fail], null), iter__15418.call(null, cljs.core.rest.call(null, s__15419__$2)));
                        } else {
                          var G__15430 = cljs.core.rest.call(null, s__15419__$2);
                          s__15419__$1 = G__15430;
                          continue;
                        }
                      } else {
                        var G__15431 = cljs.core.rest.call(null, s__15419__$2);
                        s__15419__$1 = G__15431;
                        continue;
                      }
                    } else {
                      var G__15432 = cljs.core.rest.call(null, s__15419__$2);
                      s__15419__$1 = G__15432;
                      continue;
                    }
                  }
                } else {
                  return null;
                }
                break;
              }
            }, null, null);
          };
          return iter__4266__auto__.call(null, input_schema);
        }()));
      } else {
        return null;
      }
    }
  }
};
plumbing.fnk.schema.assert_satisfies_schema = function assert_satisfies_schema(input_schema, output_schema) {
  var fails = plumbing.fnk.schema.schema_diff.call(null, input_schema, output_schema);
  if (cljs.core.truth_(fails)) {
    throw cljs.core.ex_info.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(fails), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.Keyword(null, "does-not-satisfy-schema", "does-not-satisfy-schema", 2405949387), new cljs.core.Keyword(null, "failures", "failures", 1689842587), fails], null));
  } else {
    return null;
  }
};
var ufv___15455 = schema.utils.use_fn_validation;
var output_schema15433_15456 = schema.core.Any;
var input_schema15434_15457 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.IOSchemata, new cljs.core.Symbol(null, "arg0", "arg0", -1637529005, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "input", "input", -1540173437, null)), schema.core.one.call(null, plumbing.fnk.schema.MapOutputSchema, 
new cljs.core.Symbol(null, "output", "output", 1648923322, null))], null), new cljs.core.Symbol(null, "arg1", "arg1", -1637529004, null))], null);
var input_checker15435_15458 = schema.core.checker.call(null, input_schema15434_15457);
var output_checker15436_15459 = schema.core.checker.call(null, output_schema15433_15456);
plumbing.fnk.schema.compose_schemata = function(ufv___15455, output_schema15433_15456, input_schema15434_15457, input_checker15435_15458, output_checker15436_15459) {
  return function compose_schemata(G__15437, G__15438) {
    var validate__7247__auto__ = true;
    if (validate__7247__auto__) {
      var args__7248__auto___15460 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__15437, G__15438], null);
      var temp__4092__auto___15461 = input_checker15435_15458.call(null, args__7248__auto___15460);
      if (cljs.core.truth_(temp__4092__auto___15461)) {
        var error__7249__auto___15462 = temp__4092__auto___15461;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "compose-schemata", "compose-schemata", -726429854, null), cljs.core.pr_str.call(null, error__7249__auto___15462)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15462, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema15434_15457, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__7248__auto___15460], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var G__15449 = G__15437;
      var vec__15451 = G__15449;
      var i2 = cljs.core.nth.call(null, vec__15451, 0, null);
      var o2 = cljs.core.nth.call(null, vec__15451, 1, null);
      var G__15450 = G__15438;
      var vec__15452 = G__15450;
      var i1 = cljs.core.nth.call(null, vec__15452, 0, null);
      var o1 = cljs.core.nth.call(null, vec__15452, 1, null);
      var G__15449__$1 = G__15449;
      var G__15450__$1 = G__15450;
      while (true) {
        var vec__15453 = G__15449__$1;
        var i2__$1 = cljs.core.nth.call(null, vec__15453, 0, null);
        var o2__$1 = cljs.core.nth.call(null, vec__15453, 1, null);
        var vec__15454 = G__15450__$1;
        var i1__$1 = cljs.core.nth.call(null, vec__15454, 0, null);
        var o1__$1 = cljs.core.nth.call(null, vec__15454, 1, null);
        plumbing.fnk.schema.assert_satisfies_schema.call(null, cljs.core.select_keys.call(null, i2__$1, cljs.core.keys.call(null, o1__$1)), o1__$1);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [plumbing.fnk.schema.union_input_schemata.call(null, cljs.core.apply.call(null, cljs.core.dissoc, i2__$1, cljs.core.concat.call(null, cljs.core.keys.call(null, o1__$1), cljs.core.map.call(null, schema.core.optional_key, cljs.core.keys.call(null, o1__$1)))), i1__$1), o2__$1], null);
        break;
      }
    }();
    if (validate__7247__auto__) {
      var temp__4092__auto___15463 = output_checker15436_15459.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___15463)) {
        var error__7249__auto___15464 = temp__4092__auto___15463;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "compose-schemata", "compose-schemata", -726429854, null), cljs.core.pr_str.call(null, error__7249__auto___15464)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15464, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema15433_15456, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___15455, output_schema15433_15456, input_schema15434_15457, input_checker15435_15458, output_checker15436_15459);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.compose_schemata), schema.core.make_fn_schema.call(null, output_schema15433_15456, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema15434_15457], null)));
plumbing.fnk.schema.schema_key = function schema_key(m, k) {
  if (cljs.core.contains_QMARK_.call(null, m, k)) {
    return k;
  } else {
    if (cljs.core.contains_QMARK_.call(null, m, schema.core.optional_key.call(null, k))) {
      return schema.core.optional_key.call(null, k);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
plumbing.fnk.schema.possibly_contains_QMARK_ = function possibly_contains_QMARK_(m, k) {
  return cljs.core.boolean$.call(null, plumbing.fnk.schema.schema_key.call(null, m, k));
};
var ufv___15543 = schema.utils.use_fn_validation;
var output_schema15465_15544 = schema.core.Any;
var input_schema15466_15545 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "s", "s", -1640531412, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null), new cljs.core.Symbol(null, "ks", "ks", -1640528095, null))], null);
var input_checker15467_15546 = schema.core.checker.call(null, input_schema15466_15545);
var output_checker15468_15547 = schema.core.checker.call(null, output_schema15465_15544);
plumbing.fnk.schema.split_schema = function(ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547) {
  return function split_schema(G__15469, G__15470) {
    var validate__7247__auto__ = ufv___15543.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___15548 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__15469, G__15470], null);
      var temp__4092__auto___15549 = input_checker15467_15546.call(null, args__7248__auto___15548);
      if (cljs.core.truth_(temp__4092__auto___15549)) {
        var error__7249__auto___15550 = temp__4092__auto___15549;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema", "split-schema", 1048718701, null), cljs.core.pr_str.call(null, error__7249__auto___15550)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15550, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema15466_15545, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), args__7248__auto___15548], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var s = G__15469;
      var ks = G__15470;
      while (true) {
        var ks__$1 = cljs.core.set.call(null, ks);
        var iter__4266__auto__ = function(ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547) {
          return function iter__15507(s__15508) {
            return new cljs.core.LazySeq(null, function(ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547) {
              return function() {
                var s__15508__$1 = s__15508;
                while (true) {
                  var temp__4092__auto__ = cljs.core.seq.call(null, s__15508__$1);
                  if (temp__4092__auto__) {
                    var s__15508__$2 = temp__4092__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__15508__$2)) {
                      var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15508__$2);
                      var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                      var b__15510 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                      if (function() {
                        var i__15509 = 0;
                        while (true) {
                          if (i__15509 < size__4265__auto__) {
                            var in_QMARK_ = cljs.core._nth.call(null, c__4264__auto__, i__15509);
                            cljs.core.chunk_append.call(null, b__15510, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                              var iter__4266__auto__ = function(i__15509, in_QMARK_, c__4264__auto__, size__4265__auto__, b__15510, s__15508__$2, temp__4092__auto__, ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547) {
                                return function iter__15527(s__15528) {
                                  return new cljs.core.LazySeq(null, function(i__15509, in_QMARK_, c__4264__auto__, size__4265__auto__, b__15510, s__15508__$2, temp__4092__auto__, ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547) {
                                    return function() {
                                      var s__15528__$1 = s__15528;
                                      while (true) {
                                        var temp__4092__auto____$1 = cljs.core.seq.call(null, s__15528__$1);
                                        if (temp__4092__auto____$1) {
                                          var s__15528__$2 = temp__4092__auto____$1;
                                          if (cljs.core.chunked_seq_QMARK_.call(null, s__15528__$2)) {
                                            var c__4264__auto____$1 = cljs.core.chunk_first.call(null, s__15528__$2);
                                            var size__4265__auto____$1 = cljs.core.count.call(null, c__4264__auto____$1);
                                            var b__15530 = cljs.core.chunk_buffer.call(null, size__4265__auto____$1);
                                            if (function() {
                                              var i__15529 = 0;
                                              while (true) {
                                                if (i__15529 < size__4265__auto____$1) {
                                                  var vec__15533 = cljs.core._nth.call(null, c__4264__auto____$1, i__15529);
                                                  var k = cljs.core.nth.call(null, vec__15533, 0, null);
                                                  var v = cljs.core.nth.call(null, vec__15533, 1, null);
                                                  if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                                    cljs.core.chunk_append.call(null, b__15530, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                                                    var G__15551 = i__15529 + 1;
                                                    i__15529 = G__15551;
                                                    continue;
                                                  } else {
                                                    var G__15552 = i__15529 + 1;
                                                    i__15529 = G__15552;
                                                    continue;
                                                  }
                                                } else {
                                                  return true;
                                                }
                                                break;
                                              }
                                            }()) {
                                              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15530), iter__15527.call(null, cljs.core.chunk_rest.call(null, s__15528__$2)));
                                            } else {
                                              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15530), null);
                                            }
                                          } else {
                                            var vec__15534 = cljs.core.first.call(null, s__15528__$2);
                                            var k = cljs.core.nth.call(null, vec__15534, 0, null);
                                            var v = cljs.core.nth.call(null, vec__15534, 1, null);
                                            if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__15527.call(null, cljs.core.rest.call(null, s__15528__$2)));
                                            } else {
                                              var G__15553 = cljs.core.rest.call(null, s__15528__$2);
                                              s__15528__$1 = G__15553;
                                              continue;
                                            }
                                          }
                                        } else {
                                          return null;
                                        }
                                        break;
                                      }
                                    };
                                  }(i__15509, in_QMARK_, c__4264__auto__, size__4265__auto__, b__15510, s__15508__$2, temp__4092__auto__, ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547), null, null);
                                };
                              }(i__15509, in_QMARK_, c__4264__auto__, size__4265__auto__, b__15510, s__15508__$2, temp__4092__auto__, ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547);
                              return iter__4266__auto__.call(null, s);
                            }()));
                            var G__15554 = i__15509 + 1;
                            i__15509 = G__15554;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15510), iter__15507.call(null, cljs.core.chunk_rest.call(null, s__15508__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15510), null);
                      }
                    } else {
                      var in_QMARK_ = cljs.core.first.call(null, s__15508__$2);
                      return cljs.core.cons.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4266__auto__ = function(in_QMARK_, s__15508__$2, temp__4092__auto__, ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547) {
                          return function iter__15535(s__15536) {
                            return new cljs.core.LazySeq(null, function(in_QMARK_, s__15508__$2, temp__4092__auto__, ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547) {
                              return function() {
                                var s__15536__$1 = s__15536;
                                while (true) {
                                  var temp__4092__auto____$1 = cljs.core.seq.call(null, s__15536__$1);
                                  if (temp__4092__auto____$1) {
                                    var s__15536__$2 = temp__4092__auto____$1;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__15536__$2)) {
                                      var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15536__$2);
                                      var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                                      var b__15538 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                                      if (function() {
                                        var i__15537 = 0;
                                        while (true) {
                                          if (i__15537 < size__4265__auto__) {
                                            var vec__15541 = cljs.core._nth.call(null, c__4264__auto__, i__15537);
                                            var k = cljs.core.nth.call(null, vec__15541, 0, null);
                                            var v = cljs.core.nth.call(null, vec__15541, 1, null);
                                            if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                              cljs.core.chunk_append.call(null, b__15538, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                                              var G__15555 = i__15537 + 1;
                                              i__15537 = G__15555;
                                              continue;
                                            } else {
                                              var G__15556 = i__15537 + 1;
                                              i__15537 = G__15556;
                                              continue;
                                            }
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15538), iter__15535.call(null, cljs.core.chunk_rest.call(null, s__15536__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15538), null);
                                      }
                                    } else {
                                      var vec__15542 = cljs.core.first.call(null, s__15536__$2);
                                      var k = cljs.core.nth.call(null, vec__15542, 0, null);
                                      var v = cljs.core.nth.call(null, vec__15542, 1, null);
                                      if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__15535.call(null, cljs.core.rest.call(null, s__15536__$2)));
                                      } else {
                                        var G__15557 = cljs.core.rest.call(null, s__15536__$2);
                                        s__15536__$1 = G__15557;
                                        continue;
                                      }
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(in_QMARK_, s__15508__$2, temp__4092__auto__, ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547), null, null);
                          };
                        }(in_QMARK_, s__15508__$2, temp__4092__auto__, ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547);
                        return iter__4266__auto__.call(null, s);
                      }()), iter__15507.call(null, cljs.core.rest.call(null, s__15508__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547), null, null);
          };
        }(ks__$1, validate__7247__auto__, ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547);
        return iter__4266__auto__.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, false], null));
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___15558 = output_checker15468_15547.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___15558)) {
        var error__7249__auto___15559 = temp__4092__auto___15558;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema", "split-schema", 1048718701, null), cljs.core.pr_str.call(null, error__7249__auto___15559)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15559, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema15465_15544, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___15543, output_schema15465_15544, input_schema15466_15545, input_checker15467_15546, output_checker15468_15547);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.split_schema), schema.core.make_fn_schema.call(null, output_schema15465_15544, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema15466_15545], null)));
var ufv___15590 = schema.utils.use_fn_validation;
var output_schema15560_15591 = plumbing.fnk.schema.GraphIOSchemata;
var input_schema15561_15592 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.GraphIOSchemata, new cljs.core.Symbol(null, "arg0", "arg0", -1637529005, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Keyword, "key"), schema.core.one.call(null, plumbing.fnk.schema.IOSchemata, "inner-schemas")], null), new cljs.core.Symbol(null, 
"arg1", "arg1", -1637529004, null))], null);
var input_checker15562_15593 = schema.core.checker.call(null, input_schema15561_15592);
var output_checker15563_15594 = schema.core.checker.call(null, output_schema15560_15591);
plumbing.fnk.schema.sequence_schemata = function(ufv___15590, output_schema15560_15591, input_schema15561_15592, input_checker15562_15593, output_checker15563_15594) {
  return function sequence_schemata(G__15564, G__15565) {
    var validate__7247__auto__ = ufv___15590.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___15595 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__15564, G__15565], null);
      var temp__4092__auto___15596 = input_checker15562_15593.call(null, args__7248__auto___15595);
      if (cljs.core.truth_(temp__4092__auto___15596)) {
        var error__7249__auto___15597 = temp__4092__auto___15596;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "sequence-schemata", "sequence-schemata", 19729939, null), cljs.core.pr_str.call(null, error__7249__auto___15597)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15597, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema15561_15592, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__7248__auto___15595], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var G__15581 = G__15564;
      var vec__15583 = G__15581;
      var i1 = cljs.core.nth.call(null, vec__15583, 0, null);
      var o1 = cljs.core.nth.call(null, vec__15583, 1, null);
      var G__15582 = G__15565;
      var vec__15584 = G__15582;
      var k = cljs.core.nth.call(null, vec__15584, 0, null);
      var vec__15585 = cljs.core.nth.call(null, vec__15584, 1, null);
      var i2 = cljs.core.nth.call(null, vec__15585, 0, null);
      var o2 = cljs.core.nth.call(null, vec__15585, 1, null);
      var G__15581__$1 = G__15581;
      var G__15582__$1 = G__15582;
      while (true) {
        var vec__15586 = G__15581__$1;
        var i1__$1 = cljs.core.nth.call(null, vec__15586, 0, null);
        var o1__$1 = cljs.core.nth.call(null, vec__15586, 1, null);
        var vec__15587 = G__15582__$1;
        var k__$1 = cljs.core.nth.call(null, vec__15587, 0, null);
        var vec__15588 = cljs.core.nth.call(null, vec__15587, 1, null);
        var i2__$1 = cljs.core.nth.call(null, vec__15588, 0, null);
        var o2__$1 = cljs.core.nth.call(null, vec__15588, 1, null);
        if (!plumbing.fnk.schema.possibly_contains_QMARK_.call(null, i1__$1, k__$1)) {
        } else {
          throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Duplicate key output (possibly due to a misordered graph) %s for input %s from input %s", k__$1, schema.core.explain.call(null, i2__$1), schema.core.explain.call(null, i1__$1)));
        }
        if (!plumbing.fnk.schema.possibly_contains_QMARK_.call(null, i2__$1, k__$1)) {
        } else {
          throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Node outputs a key %s in its inputs %s", k__$1, schema.core.explain.call(null, i2__$1)));
        }
        if (!plumbing.fnk.schema.possibly_contains_QMARK_.call(null, o1__$1, k__$1)) {
        } else {
          throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Node outputs a duplicate key %s given inputs %s", k__$1, schema.core.explain.call(null, i1__$1)));
        }
        var vec__15589 = plumbing.fnk.schema.split_schema.call(null, i2__$1, cljs.core.keys.call(null, o1__$1));
        var used = cljs.core.nth.call(null, vec__15589, 0, null);
        var unused = cljs.core.nth.call(null, vec__15589, 1, null);
        plumbing.fnk.schema.assert_satisfies_schema.call(null, used, o1__$1);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [plumbing.fnk.schema.union_input_schemata.call(null, unused, i1__$1), cljs.core.assoc.call(null, o1__$1, k__$1, o2__$1)], null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___15598 = output_checker15563_15594.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___15598)) {
        var error__7249__auto___15599 = temp__4092__auto___15598;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "sequence-schemata", "sequence-schemata", 19729939, null), cljs.core.pr_str.call(null, error__7249__auto___15599)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___15599, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema15560_15591, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___15590, output_schema15560_15591, input_schema15561_15592, input_checker15562_15593, output_checker15563_15594);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.sequence_schemata), schema.core.make_fn_schema.call(null, output_schema15560_15591, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema15561_15592], null)));
goog.provide("om.dom");
goog.require("cljs.core");
om.dom.a = function() {
  var a__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var a = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return a__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  a.cljs$lang$maxFixedArity = 1;
  a.cljs$lang$applyTo = function(arglist__20057) {
    var opts__5107__auto__ = cljs.core.first(arglist__20057);
    var children__5108__auto__ = cljs.core.rest(arglist__20057);
    return a__delegate(opts__5107__auto__, children__5108__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
om.dom.abbr = function() {
  var abbr__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var abbr = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return abbr__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 1;
  abbr.cljs$lang$applyTo = function(arglist__20058) {
    var opts__5107__auto__ = cljs.core.first(arglist__20058);
    var children__5108__auto__ = cljs.core.rest(arglist__20058);
    return abbr__delegate(opts__5107__auto__, children__5108__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
om.dom.address = function() {
  var address__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var address = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return address__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  address.cljs$lang$maxFixedArity = 1;
  address.cljs$lang$applyTo = function(arglist__20059) {
    var opts__5107__auto__ = cljs.core.first(arglist__20059);
    var children__5108__auto__ = cljs.core.rest(arglist__20059);
    return address__delegate(opts__5107__auto__, children__5108__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
om.dom.area = function() {
  var area__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var area = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return area__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  area.cljs$lang$maxFixedArity = 1;
  area.cljs$lang$applyTo = function(arglist__20060) {
    var opts__5107__auto__ = cljs.core.first(arglist__20060);
    var children__5108__auto__ = cljs.core.rest(arglist__20060);
    return area__delegate(opts__5107__auto__, children__5108__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
om.dom.article = function() {
  var article__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var article = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return article__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  article.cljs$lang$maxFixedArity = 1;
  article.cljs$lang$applyTo = function(arglist__20061) {
    var opts__5107__auto__ = cljs.core.first(arglist__20061);
    var children__5108__auto__ = cljs.core.rest(arglist__20061);
    return article__delegate(opts__5107__auto__, children__5108__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
om.dom.aside = function() {
  var aside__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var aside = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return aside__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  aside.cljs$lang$maxFixedArity = 1;
  aside.cljs$lang$applyTo = function(arglist__20062) {
    var opts__5107__auto__ = cljs.core.first(arglist__20062);
    var children__5108__auto__ = cljs.core.rest(arglist__20062);
    return aside__delegate(opts__5107__auto__, children__5108__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
om.dom.audio = function() {
  var audio__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var audio = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return audio__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  audio.cljs$lang$maxFixedArity = 1;
  audio.cljs$lang$applyTo = function(arglist__20063) {
    var opts__5107__auto__ = cljs.core.first(arglist__20063);
    var children__5108__auto__ = cljs.core.rest(arglist__20063);
    return audio__delegate(opts__5107__auto__, children__5108__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
om.dom.b = function() {
  var b__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var b = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return b__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  b.cljs$lang$maxFixedArity = 1;
  b.cljs$lang$applyTo = function(arglist__20064) {
    var opts__5107__auto__ = cljs.core.first(arglist__20064);
    var children__5108__auto__ = cljs.core.rest(arglist__20064);
    return b__delegate(opts__5107__auto__, children__5108__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
om.dom.base = function() {
  var base__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var base = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return base__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  base.cljs$lang$maxFixedArity = 1;
  base.cljs$lang$applyTo = function(arglist__20065) {
    var opts__5107__auto__ = cljs.core.first(arglist__20065);
    var children__5108__auto__ = cljs.core.rest(arglist__20065);
    return base__delegate(opts__5107__auto__, children__5108__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
om.dom.bdi = function() {
  var bdi__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var bdi = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bdi__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 1;
  bdi.cljs$lang$applyTo = function(arglist__20066) {
    var opts__5107__auto__ = cljs.core.first(arglist__20066);
    var children__5108__auto__ = cljs.core.rest(arglist__20066);
    return bdi__delegate(opts__5107__auto__, children__5108__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
om.dom.bdo = function() {
  var bdo__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var bdo = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bdo__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 1;
  bdo.cljs$lang$applyTo = function(arglist__20067) {
    var opts__5107__auto__ = cljs.core.first(arglist__20067);
    var children__5108__auto__ = cljs.core.rest(arglist__20067);
    return bdo__delegate(opts__5107__auto__, children__5108__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
om.dom.big = function() {
  var big__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var big = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return big__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  big.cljs$lang$maxFixedArity = 1;
  big.cljs$lang$applyTo = function(arglist__20068) {
    var opts__5107__auto__ = cljs.core.first(arglist__20068);
    var children__5108__auto__ = cljs.core.rest(arglist__20068);
    return big__delegate(opts__5107__auto__, children__5108__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
om.dom.blockquote = function() {
  var blockquote__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var blockquote = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return blockquote__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 1;
  blockquote.cljs$lang$applyTo = function(arglist__20069) {
    var opts__5107__auto__ = cljs.core.first(arglist__20069);
    var children__5108__auto__ = cljs.core.rest(arglist__20069);
    return blockquote__delegate(opts__5107__auto__, children__5108__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
om.dom.body = function() {
  var body__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var body = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return body__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  body.cljs$lang$maxFixedArity = 1;
  body.cljs$lang$applyTo = function(arglist__20070) {
    var opts__5107__auto__ = cljs.core.first(arglist__20070);
    var children__5108__auto__ = cljs.core.rest(arglist__20070);
    return body__delegate(opts__5107__auto__, children__5108__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
om.dom.br = function() {
  var br__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var br = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return br__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  br.cljs$lang$maxFixedArity = 1;
  br.cljs$lang$applyTo = function(arglist__20071) {
    var opts__5107__auto__ = cljs.core.first(arglist__20071);
    var children__5108__auto__ = cljs.core.rest(arglist__20071);
    return br__delegate(opts__5107__auto__, children__5108__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
om.dom.button = function() {
  var button__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var button = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return button__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  button.cljs$lang$maxFixedArity = 1;
  button.cljs$lang$applyTo = function(arglist__20072) {
    var opts__5107__auto__ = cljs.core.first(arglist__20072);
    var children__5108__auto__ = cljs.core.rest(arglist__20072);
    return button__delegate(opts__5107__auto__, children__5108__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
om.dom.canvas = function() {
  var canvas__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var canvas = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return canvas__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 1;
  canvas.cljs$lang$applyTo = function(arglist__20073) {
    var opts__5107__auto__ = cljs.core.first(arglist__20073);
    var children__5108__auto__ = cljs.core.rest(arglist__20073);
    return canvas__delegate(opts__5107__auto__, children__5108__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
om.dom.caption = function() {
  var caption__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var caption = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return caption__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  caption.cljs$lang$maxFixedArity = 1;
  caption.cljs$lang$applyTo = function(arglist__20074) {
    var opts__5107__auto__ = cljs.core.first(arglist__20074);
    var children__5108__auto__ = cljs.core.rest(arglist__20074);
    return caption__delegate(opts__5107__auto__, children__5108__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
om.dom.cite = function() {
  var cite__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var cite = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return cite__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  cite.cljs$lang$maxFixedArity = 1;
  cite.cljs$lang$applyTo = function(arglist__20075) {
    var opts__5107__auto__ = cljs.core.first(arglist__20075);
    var children__5108__auto__ = cljs.core.rest(arglist__20075);
    return cite__delegate(opts__5107__auto__, children__5108__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
om.dom.code = function() {
  var code__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var code = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return code__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  code.cljs$lang$maxFixedArity = 1;
  code.cljs$lang$applyTo = function(arglist__20076) {
    var opts__5107__auto__ = cljs.core.first(arglist__20076);
    var children__5108__auto__ = cljs.core.rest(arglist__20076);
    return code__delegate(opts__5107__auto__, children__5108__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
om.dom.col = function() {
  var col__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var col = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return col__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  col.cljs$lang$maxFixedArity = 1;
  col.cljs$lang$applyTo = function(arglist__20077) {
    var opts__5107__auto__ = cljs.core.first(arglist__20077);
    var children__5108__auto__ = cljs.core.rest(arglist__20077);
    return col__delegate(opts__5107__auto__, children__5108__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
om.dom.colgroup = function() {
  var colgroup__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var colgroup = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return colgroup__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 1;
  colgroup.cljs$lang$applyTo = function(arglist__20078) {
    var opts__5107__auto__ = cljs.core.first(arglist__20078);
    var children__5108__auto__ = cljs.core.rest(arglist__20078);
    return colgroup__delegate(opts__5107__auto__, children__5108__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
om.dom.data = function() {
  var data__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var data = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return data__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  data.cljs$lang$maxFixedArity = 1;
  data.cljs$lang$applyTo = function(arglist__20079) {
    var opts__5107__auto__ = cljs.core.first(arglist__20079);
    var children__5108__auto__ = cljs.core.rest(arglist__20079);
    return data__delegate(opts__5107__auto__, children__5108__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
om.dom.datalist = function() {
  var datalist__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var datalist = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return datalist__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 1;
  datalist.cljs$lang$applyTo = function(arglist__20080) {
    var opts__5107__auto__ = cljs.core.first(arglist__20080);
    var children__5108__auto__ = cljs.core.rest(arglist__20080);
    return datalist__delegate(opts__5107__auto__, children__5108__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
om.dom.dd = function() {
  var dd__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var dd = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dd__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  dd.cljs$lang$maxFixedArity = 1;
  dd.cljs$lang$applyTo = function(arglist__20081) {
    var opts__5107__auto__ = cljs.core.first(arglist__20081);
    var children__5108__auto__ = cljs.core.rest(arglist__20081);
    return dd__delegate(opts__5107__auto__, children__5108__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
om.dom.del = function() {
  var del__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var del = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return del__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  del.cljs$lang$maxFixedArity = 1;
  del.cljs$lang$applyTo = function(arglist__20082) {
    var opts__5107__auto__ = cljs.core.first(arglist__20082);
    var children__5108__auto__ = cljs.core.rest(arglist__20082);
    return del__delegate(opts__5107__auto__, children__5108__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
om.dom.dfn = function() {
  var dfn__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var dfn = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dfn__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 1;
  dfn.cljs$lang$applyTo = function(arglist__20083) {
    var opts__5107__auto__ = cljs.core.first(arglist__20083);
    var children__5108__auto__ = cljs.core.rest(arglist__20083);
    return dfn__delegate(opts__5107__auto__, children__5108__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
om.dom.div = function() {
  var div__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var div = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return div__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  div.cljs$lang$maxFixedArity = 1;
  div.cljs$lang$applyTo = function(arglist__20084) {
    var opts__5107__auto__ = cljs.core.first(arglist__20084);
    var children__5108__auto__ = cljs.core.rest(arglist__20084);
    return div__delegate(opts__5107__auto__, children__5108__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
om.dom.dl = function() {
  var dl__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var dl = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dl__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  dl.cljs$lang$maxFixedArity = 1;
  dl.cljs$lang$applyTo = function(arglist__20085) {
    var opts__5107__auto__ = cljs.core.first(arglist__20085);
    var children__5108__auto__ = cljs.core.rest(arglist__20085);
    return dl__delegate(opts__5107__auto__, children__5108__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
om.dom.dt = function() {
  var dt__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var dt = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dt__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  dt.cljs$lang$maxFixedArity = 1;
  dt.cljs$lang$applyTo = function(arglist__20086) {
    var opts__5107__auto__ = cljs.core.first(arglist__20086);
    var children__5108__auto__ = cljs.core.rest(arglist__20086);
    return dt__delegate(opts__5107__auto__, children__5108__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
om.dom.em = function() {
  var em__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var em = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return em__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  em.cljs$lang$maxFixedArity = 1;
  em.cljs$lang$applyTo = function(arglist__20087) {
    var opts__5107__auto__ = cljs.core.first(arglist__20087);
    var children__5108__auto__ = cljs.core.rest(arglist__20087);
    return em__delegate(opts__5107__auto__, children__5108__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
om.dom.embed = function() {
  var embed__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var embed = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return embed__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  embed.cljs$lang$maxFixedArity = 1;
  embed.cljs$lang$applyTo = function(arglist__20088) {
    var opts__5107__auto__ = cljs.core.first(arglist__20088);
    var children__5108__auto__ = cljs.core.rest(arglist__20088);
    return embed__delegate(opts__5107__auto__, children__5108__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
om.dom.fieldset = function() {
  var fieldset__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var fieldset = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fieldset__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 1;
  fieldset.cljs$lang$applyTo = function(arglist__20089) {
    var opts__5107__auto__ = cljs.core.first(arglist__20089);
    var children__5108__auto__ = cljs.core.rest(arglist__20089);
    return fieldset__delegate(opts__5107__auto__, children__5108__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
om.dom.figcaption = function() {
  var figcaption__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var figcaption = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return figcaption__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 1;
  figcaption.cljs$lang$applyTo = function(arglist__20090) {
    var opts__5107__auto__ = cljs.core.first(arglist__20090);
    var children__5108__auto__ = cljs.core.rest(arglist__20090);
    return figcaption__delegate(opts__5107__auto__, children__5108__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
om.dom.figure = function() {
  var figure__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var figure = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return figure__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  figure.cljs$lang$maxFixedArity = 1;
  figure.cljs$lang$applyTo = function(arglist__20091) {
    var opts__5107__auto__ = cljs.core.first(arglist__20091);
    var children__5108__auto__ = cljs.core.rest(arglist__20091);
    return figure__delegate(opts__5107__auto__, children__5108__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
om.dom.footer = function() {
  var footer__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var footer = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return footer__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  footer.cljs$lang$maxFixedArity = 1;
  footer.cljs$lang$applyTo = function(arglist__20092) {
    var opts__5107__auto__ = cljs.core.first(arglist__20092);
    var children__5108__auto__ = cljs.core.rest(arglist__20092);
    return footer__delegate(opts__5107__auto__, children__5108__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
om.dom.form = function() {
  var form__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var form = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return form__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  form.cljs$lang$maxFixedArity = 1;
  form.cljs$lang$applyTo = function(arglist__20093) {
    var opts__5107__auto__ = cljs.core.first(arglist__20093);
    var children__5108__auto__ = cljs.core.rest(arglist__20093);
    return form__delegate(opts__5107__auto__, children__5108__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
om.dom.h1 = function() {
  var h1__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var h1 = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h1__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  h1.cljs$lang$maxFixedArity = 1;
  h1.cljs$lang$applyTo = function(arglist__20094) {
    var opts__5107__auto__ = cljs.core.first(arglist__20094);
    var children__5108__auto__ = cljs.core.rest(arglist__20094);
    return h1__delegate(opts__5107__auto__, children__5108__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
om.dom.h2 = function() {
  var h2__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var h2 = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h2__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  h2.cljs$lang$maxFixedArity = 1;
  h2.cljs$lang$applyTo = function(arglist__20095) {
    var opts__5107__auto__ = cljs.core.first(arglist__20095);
    var children__5108__auto__ = cljs.core.rest(arglist__20095);
    return h2__delegate(opts__5107__auto__, children__5108__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
om.dom.h3 = function() {
  var h3__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var h3 = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h3__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  h3.cljs$lang$maxFixedArity = 1;
  h3.cljs$lang$applyTo = function(arglist__20096) {
    var opts__5107__auto__ = cljs.core.first(arglist__20096);
    var children__5108__auto__ = cljs.core.rest(arglist__20096);
    return h3__delegate(opts__5107__auto__, children__5108__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
om.dom.h4 = function() {
  var h4__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var h4 = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h4__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  h4.cljs$lang$maxFixedArity = 1;
  h4.cljs$lang$applyTo = function(arglist__20097) {
    var opts__5107__auto__ = cljs.core.first(arglist__20097);
    var children__5108__auto__ = cljs.core.rest(arglist__20097);
    return h4__delegate(opts__5107__auto__, children__5108__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
om.dom.h5 = function() {
  var h5__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var h5 = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h5__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  h5.cljs$lang$maxFixedArity = 1;
  h5.cljs$lang$applyTo = function(arglist__20098) {
    var opts__5107__auto__ = cljs.core.first(arglist__20098);
    var children__5108__auto__ = cljs.core.rest(arglist__20098);
    return h5__delegate(opts__5107__auto__, children__5108__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
om.dom.h6 = function() {
  var h6__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var h6 = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h6__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  h6.cljs$lang$maxFixedArity = 1;
  h6.cljs$lang$applyTo = function(arglist__20099) {
    var opts__5107__auto__ = cljs.core.first(arglist__20099);
    var children__5108__auto__ = cljs.core.rest(arglist__20099);
    return h6__delegate(opts__5107__auto__, children__5108__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
om.dom.head = function() {
  var head__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var head = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return head__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  head.cljs$lang$maxFixedArity = 1;
  head.cljs$lang$applyTo = function(arglist__20100) {
    var opts__5107__auto__ = cljs.core.first(arglist__20100);
    var children__5108__auto__ = cljs.core.rest(arglist__20100);
    return head__delegate(opts__5107__auto__, children__5108__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
om.dom.header = function() {
  var header__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var header = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return header__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  header.cljs$lang$maxFixedArity = 1;
  header.cljs$lang$applyTo = function(arglist__20101) {
    var opts__5107__auto__ = cljs.core.first(arglist__20101);
    var children__5108__auto__ = cljs.core.rest(arglist__20101);
    return header__delegate(opts__5107__auto__, children__5108__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
om.dom.hr = function() {
  var hr__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var hr = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hr__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  hr.cljs$lang$maxFixedArity = 1;
  hr.cljs$lang$applyTo = function(arglist__20102) {
    var opts__5107__auto__ = cljs.core.first(arglist__20102);
    var children__5108__auto__ = cljs.core.rest(arglist__20102);
    return hr__delegate(opts__5107__auto__, children__5108__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
om.dom.html = function() {
  var html__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var html = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return html__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  html.cljs$lang$maxFixedArity = 1;
  html.cljs$lang$applyTo = function(arglist__20103) {
    var opts__5107__auto__ = cljs.core.first(arglist__20103);
    var children__5108__auto__ = cljs.core.rest(arglist__20103);
    return html__delegate(opts__5107__auto__, children__5108__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
om.dom.i = function() {
  var i__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var i = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return i__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  i.cljs$lang$maxFixedArity = 1;
  i.cljs$lang$applyTo = function(arglist__20104) {
    var opts__5107__auto__ = cljs.core.first(arglist__20104);
    var children__5108__auto__ = cljs.core.rest(arglist__20104);
    return i__delegate(opts__5107__auto__, children__5108__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
om.dom.iframe = function() {
  var iframe__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var iframe = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return iframe__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 1;
  iframe.cljs$lang$applyTo = function(arglist__20105) {
    var opts__5107__auto__ = cljs.core.first(arglist__20105);
    var children__5108__auto__ = cljs.core.rest(arglist__20105);
    return iframe__delegate(opts__5107__auto__, children__5108__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
om.dom.img = function() {
  var img__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var img = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return img__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  img.cljs$lang$maxFixedArity = 1;
  img.cljs$lang$applyTo = function(arglist__20106) {
    var opts__5107__auto__ = cljs.core.first(arglist__20106);
    var children__5108__auto__ = cljs.core.rest(arglist__20106);
    return img__delegate(opts__5107__auto__, children__5108__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
om.dom.ins = function() {
  var ins__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var ins = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ins__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  ins.cljs$lang$maxFixedArity = 1;
  ins.cljs$lang$applyTo = function(arglist__20107) {
    var opts__5107__auto__ = cljs.core.first(arglist__20107);
    var children__5108__auto__ = cljs.core.rest(arglist__20107);
    return ins__delegate(opts__5107__auto__, children__5108__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
om.dom.kbd = function() {
  var kbd__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var kbd = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return kbd__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 1;
  kbd.cljs$lang$applyTo = function(arglist__20108) {
    var opts__5107__auto__ = cljs.core.first(arglist__20108);
    var children__5108__auto__ = cljs.core.rest(arglist__20108);
    return kbd__delegate(opts__5107__auto__, children__5108__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
om.dom.keygen = function() {
  var keygen__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var keygen = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return keygen__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 1;
  keygen.cljs$lang$applyTo = function(arglist__20109) {
    var opts__5107__auto__ = cljs.core.first(arglist__20109);
    var children__5108__auto__ = cljs.core.rest(arglist__20109);
    return keygen__delegate(opts__5107__auto__, children__5108__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
om.dom.label = function() {
  var label__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var label = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return label__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  label.cljs$lang$maxFixedArity = 1;
  label.cljs$lang$applyTo = function(arglist__20110) {
    var opts__5107__auto__ = cljs.core.first(arglist__20110);
    var children__5108__auto__ = cljs.core.rest(arglist__20110);
    return label__delegate(opts__5107__auto__, children__5108__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
om.dom.legend = function() {
  var legend__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var legend = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return legend__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  legend.cljs$lang$maxFixedArity = 1;
  legend.cljs$lang$applyTo = function(arglist__20111) {
    var opts__5107__auto__ = cljs.core.first(arglist__20111);
    var children__5108__auto__ = cljs.core.rest(arglist__20111);
    return legend__delegate(opts__5107__auto__, children__5108__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
om.dom.li = function() {
  var li__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var li = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return li__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  li.cljs$lang$maxFixedArity = 1;
  li.cljs$lang$applyTo = function(arglist__20112) {
    var opts__5107__auto__ = cljs.core.first(arglist__20112);
    var children__5108__auto__ = cljs.core.rest(arglist__20112);
    return li__delegate(opts__5107__auto__, children__5108__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
om.dom.link = function() {
  var link__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var link = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return link__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  link.cljs$lang$maxFixedArity = 1;
  link.cljs$lang$applyTo = function(arglist__20113) {
    var opts__5107__auto__ = cljs.core.first(arglist__20113);
    var children__5108__auto__ = cljs.core.rest(arglist__20113);
    return link__delegate(opts__5107__auto__, children__5108__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
om.dom.main = function() {
  var main__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var main = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return main__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  main.cljs$lang$maxFixedArity = 1;
  main.cljs$lang$applyTo = function(arglist__20114) {
    var opts__5107__auto__ = cljs.core.first(arglist__20114);
    var children__5108__auto__ = cljs.core.rest(arglist__20114);
    return main__delegate(opts__5107__auto__, children__5108__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
om.dom.map = function() {
  var map__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var map = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return map__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  map.cljs$lang$maxFixedArity = 1;
  map.cljs$lang$applyTo = function(arglist__20115) {
    var opts__5107__auto__ = cljs.core.first(arglist__20115);
    var children__5108__auto__ = cljs.core.rest(arglist__20115);
    return map__delegate(opts__5107__auto__, children__5108__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
om.dom.mark = function() {
  var mark__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var mark = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return mark__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  mark.cljs$lang$maxFixedArity = 1;
  mark.cljs$lang$applyTo = function(arglist__20116) {
    var opts__5107__auto__ = cljs.core.first(arglist__20116);
    var children__5108__auto__ = cljs.core.rest(arglist__20116);
    return mark__delegate(opts__5107__auto__, children__5108__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
om.dom.menu = function() {
  var menu__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var menu = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return menu__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  menu.cljs$lang$maxFixedArity = 1;
  menu.cljs$lang$applyTo = function(arglist__20117) {
    var opts__5107__auto__ = cljs.core.first(arglist__20117);
    var children__5108__auto__ = cljs.core.rest(arglist__20117);
    return menu__delegate(opts__5107__auto__, children__5108__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
om.dom.menuitem = function() {
  var menuitem__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var menuitem = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return menuitem__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 1;
  menuitem.cljs$lang$applyTo = function(arglist__20118) {
    var opts__5107__auto__ = cljs.core.first(arglist__20118);
    var children__5108__auto__ = cljs.core.rest(arglist__20118);
    return menuitem__delegate(opts__5107__auto__, children__5108__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
om.dom.meta = function() {
  var meta__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var meta = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return meta__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  meta.cljs$lang$maxFixedArity = 1;
  meta.cljs$lang$applyTo = function(arglist__20119) {
    var opts__5107__auto__ = cljs.core.first(arglist__20119);
    var children__5108__auto__ = cljs.core.rest(arglist__20119);
    return meta__delegate(opts__5107__auto__, children__5108__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
om.dom.meter = function() {
  var meter__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var meter = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return meter__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  meter.cljs$lang$maxFixedArity = 1;
  meter.cljs$lang$applyTo = function(arglist__20120) {
    var opts__5107__auto__ = cljs.core.first(arglist__20120);
    var children__5108__auto__ = cljs.core.rest(arglist__20120);
    return meter__delegate(opts__5107__auto__, children__5108__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
om.dom.nav = function() {
  var nav__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var nav = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return nav__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  nav.cljs$lang$maxFixedArity = 1;
  nav.cljs$lang$applyTo = function(arglist__20121) {
    var opts__5107__auto__ = cljs.core.first(arglist__20121);
    var children__5108__auto__ = cljs.core.rest(arglist__20121);
    return nav__delegate(opts__5107__auto__, children__5108__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
om.dom.noscript = function() {
  var noscript__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var noscript = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return noscript__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 1;
  noscript.cljs$lang$applyTo = function(arglist__20122) {
    var opts__5107__auto__ = cljs.core.first(arglist__20122);
    var children__5108__auto__ = cljs.core.rest(arglist__20122);
    return noscript__delegate(opts__5107__auto__, children__5108__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
om.dom.object = function() {
  var object__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var object = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return object__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  object.cljs$lang$maxFixedArity = 1;
  object.cljs$lang$applyTo = function(arglist__20123) {
    var opts__5107__auto__ = cljs.core.first(arglist__20123);
    var children__5108__auto__ = cljs.core.rest(arglist__20123);
    return object__delegate(opts__5107__auto__, children__5108__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
om.dom.ol = function() {
  var ol__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var ol = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ol__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  ol.cljs$lang$maxFixedArity = 1;
  ol.cljs$lang$applyTo = function(arglist__20124) {
    var opts__5107__auto__ = cljs.core.first(arglist__20124);
    var children__5108__auto__ = cljs.core.rest(arglist__20124);
    return ol__delegate(opts__5107__auto__, children__5108__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
om.dom.optgroup = function() {
  var optgroup__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var optgroup = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return optgroup__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 1;
  optgroup.cljs$lang$applyTo = function(arglist__20125) {
    var opts__5107__auto__ = cljs.core.first(arglist__20125);
    var children__5108__auto__ = cljs.core.rest(arglist__20125);
    return optgroup__delegate(opts__5107__auto__, children__5108__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
om.dom.output = function() {
  var output__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var output = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return output__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  output.cljs$lang$maxFixedArity = 1;
  output.cljs$lang$applyTo = function(arglist__20126) {
    var opts__5107__auto__ = cljs.core.first(arglist__20126);
    var children__5108__auto__ = cljs.core.rest(arglist__20126);
    return output__delegate(opts__5107__auto__, children__5108__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
om.dom.p = function() {
  var p__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var p = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return p__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  p.cljs$lang$maxFixedArity = 1;
  p.cljs$lang$applyTo = function(arglist__20127) {
    var opts__5107__auto__ = cljs.core.first(arglist__20127);
    var children__5108__auto__ = cljs.core.rest(arglist__20127);
    return p__delegate(opts__5107__auto__, children__5108__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
om.dom.param = function() {
  var param__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var param = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return param__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  param.cljs$lang$maxFixedArity = 1;
  param.cljs$lang$applyTo = function(arglist__20128) {
    var opts__5107__auto__ = cljs.core.first(arglist__20128);
    var children__5108__auto__ = cljs.core.rest(arglist__20128);
    return param__delegate(opts__5107__auto__, children__5108__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
om.dom.pre = function() {
  var pre__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var pre = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return pre__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  pre.cljs$lang$maxFixedArity = 1;
  pre.cljs$lang$applyTo = function(arglist__20129) {
    var opts__5107__auto__ = cljs.core.first(arglist__20129);
    var children__5108__auto__ = cljs.core.rest(arglist__20129);
    return pre__delegate(opts__5107__auto__, children__5108__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
om.dom.progress = function() {
  var progress__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var progress = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return progress__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  progress.cljs$lang$maxFixedArity = 1;
  progress.cljs$lang$applyTo = function(arglist__20130) {
    var opts__5107__auto__ = cljs.core.first(arglist__20130);
    var children__5108__auto__ = cljs.core.rest(arglist__20130);
    return progress__delegate(opts__5107__auto__, children__5108__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
om.dom.q = function() {
  var q__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var q = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return q__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  q.cljs$lang$maxFixedArity = 1;
  q.cljs$lang$applyTo = function(arglist__20131) {
    var opts__5107__auto__ = cljs.core.first(arglist__20131);
    var children__5108__auto__ = cljs.core.rest(arglist__20131);
    return q__delegate(opts__5107__auto__, children__5108__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
om.dom.rp = function() {
  var rp__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var rp = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rp__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  rp.cljs$lang$maxFixedArity = 1;
  rp.cljs$lang$applyTo = function(arglist__20132) {
    var opts__5107__auto__ = cljs.core.first(arglist__20132);
    var children__5108__auto__ = cljs.core.rest(arglist__20132);
    return rp__delegate(opts__5107__auto__, children__5108__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
om.dom.rt = function() {
  var rt__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var rt = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rt__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  rt.cljs$lang$maxFixedArity = 1;
  rt.cljs$lang$applyTo = function(arglist__20133) {
    var opts__5107__auto__ = cljs.core.first(arglist__20133);
    var children__5108__auto__ = cljs.core.rest(arglist__20133);
    return rt__delegate(opts__5107__auto__, children__5108__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
om.dom.ruby = function() {
  var ruby__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var ruby = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ruby__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 1;
  ruby.cljs$lang$applyTo = function(arglist__20134) {
    var opts__5107__auto__ = cljs.core.first(arglist__20134);
    var children__5108__auto__ = cljs.core.rest(arglist__20134);
    return ruby__delegate(opts__5107__auto__, children__5108__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
om.dom.s = function() {
  var s__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var s = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return s__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  s.cljs$lang$maxFixedArity = 1;
  s.cljs$lang$applyTo = function(arglist__20135) {
    var opts__5107__auto__ = cljs.core.first(arglist__20135);
    var children__5108__auto__ = cljs.core.rest(arglist__20135);
    return s__delegate(opts__5107__auto__, children__5108__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
om.dom.samp = function() {
  var samp__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var samp = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return samp__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  samp.cljs$lang$maxFixedArity = 1;
  samp.cljs$lang$applyTo = function(arglist__20136) {
    var opts__5107__auto__ = cljs.core.first(arglist__20136);
    var children__5108__auto__ = cljs.core.rest(arglist__20136);
    return samp__delegate(opts__5107__auto__, children__5108__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
om.dom.script = function() {
  var script__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var script = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return script__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  script.cljs$lang$maxFixedArity = 1;
  script.cljs$lang$applyTo = function(arglist__20137) {
    var opts__5107__auto__ = cljs.core.first(arglist__20137);
    var children__5108__auto__ = cljs.core.rest(arglist__20137);
    return script__delegate(opts__5107__auto__, children__5108__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
om.dom.section = function() {
  var section__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var section = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return section__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  section.cljs$lang$maxFixedArity = 1;
  section.cljs$lang$applyTo = function(arglist__20138) {
    var opts__5107__auto__ = cljs.core.first(arglist__20138);
    var children__5108__auto__ = cljs.core.rest(arglist__20138);
    return section__delegate(opts__5107__auto__, children__5108__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
om.dom.select = function() {
  var select__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.select.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var select = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return select__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  select.cljs$lang$maxFixedArity = 1;
  select.cljs$lang$applyTo = function(arglist__20139) {
    var opts__5107__auto__ = cljs.core.first(arglist__20139);
    var children__5108__auto__ = cljs.core.rest(arglist__20139);
    return select__delegate(opts__5107__auto__, children__5108__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
om.dom.small = function() {
  var small__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var small = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return small__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  small.cljs$lang$maxFixedArity = 1;
  small.cljs$lang$applyTo = function(arglist__20140) {
    var opts__5107__auto__ = cljs.core.first(arglist__20140);
    var children__5108__auto__ = cljs.core.rest(arglist__20140);
    return small__delegate(opts__5107__auto__, children__5108__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
om.dom.source = function() {
  var source__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var source = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return source__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  source.cljs$lang$maxFixedArity = 1;
  source.cljs$lang$applyTo = function(arglist__20141) {
    var opts__5107__auto__ = cljs.core.first(arglist__20141);
    var children__5108__auto__ = cljs.core.rest(arglist__20141);
    return source__delegate(opts__5107__auto__, children__5108__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
om.dom.span = function() {
  var span__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var span = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return span__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  span.cljs$lang$maxFixedArity = 1;
  span.cljs$lang$applyTo = function(arglist__20142) {
    var opts__5107__auto__ = cljs.core.first(arglist__20142);
    var children__5108__auto__ = cljs.core.rest(arglist__20142);
    return span__delegate(opts__5107__auto__, children__5108__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
om.dom.strong = function() {
  var strong__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var strong = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return strong__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  strong.cljs$lang$maxFixedArity = 1;
  strong.cljs$lang$applyTo = function(arglist__20143) {
    var opts__5107__auto__ = cljs.core.first(arglist__20143);
    var children__5108__auto__ = cljs.core.rest(arglist__20143);
    return strong__delegate(opts__5107__auto__, children__5108__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
om.dom.style = function() {
  var style__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var style = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return style__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  style.cljs$lang$maxFixedArity = 1;
  style.cljs$lang$applyTo = function(arglist__20144) {
    var opts__5107__auto__ = cljs.core.first(arglist__20144);
    var children__5108__auto__ = cljs.core.rest(arglist__20144);
    return style__delegate(opts__5107__auto__, children__5108__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
om.dom.sub = function() {
  var sub__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var sub = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sub__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  sub.cljs$lang$maxFixedArity = 1;
  sub.cljs$lang$applyTo = function(arglist__20145) {
    var opts__5107__auto__ = cljs.core.first(arglist__20145);
    var children__5108__auto__ = cljs.core.rest(arglist__20145);
    return sub__delegate(opts__5107__auto__, children__5108__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
om.dom.summary = function() {
  var summary__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var summary = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return summary__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  summary.cljs$lang$maxFixedArity = 1;
  summary.cljs$lang$applyTo = function(arglist__20146) {
    var opts__5107__auto__ = cljs.core.first(arglist__20146);
    var children__5108__auto__ = cljs.core.rest(arglist__20146);
    return summary__delegate(opts__5107__auto__, children__5108__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
om.dom.sup = function() {
  var sup__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var sup = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sup__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  sup.cljs$lang$maxFixedArity = 1;
  sup.cljs$lang$applyTo = function(arglist__20147) {
    var opts__5107__auto__ = cljs.core.first(arglist__20147);
    var children__5108__auto__ = cljs.core.rest(arglist__20147);
    return sup__delegate(opts__5107__auto__, children__5108__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
om.dom.table = function() {
  var table__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var table = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return table__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  table.cljs$lang$maxFixedArity = 1;
  table.cljs$lang$applyTo = function(arglist__20148) {
    var opts__5107__auto__ = cljs.core.first(arglist__20148);
    var children__5108__auto__ = cljs.core.rest(arglist__20148);
    return table__delegate(opts__5107__auto__, children__5108__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
om.dom.tbody = function() {
  var tbody__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var tbody = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tbody__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 1;
  tbody.cljs$lang$applyTo = function(arglist__20149) {
    var opts__5107__auto__ = cljs.core.first(arglist__20149);
    var children__5108__auto__ = cljs.core.rest(arglist__20149);
    return tbody__delegate(opts__5107__auto__, children__5108__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
om.dom.td = function() {
  var td__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var td = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return td__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  td.cljs$lang$maxFixedArity = 1;
  td.cljs$lang$applyTo = function(arglist__20150) {
    var opts__5107__auto__ = cljs.core.first(arglist__20150);
    var children__5108__auto__ = cljs.core.rest(arglist__20150);
    return td__delegate(opts__5107__auto__, children__5108__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
om.dom.tfoot = function() {
  var tfoot__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var tfoot = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tfoot__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 1;
  tfoot.cljs$lang$applyTo = function(arglist__20151) {
    var opts__5107__auto__ = cljs.core.first(arglist__20151);
    var children__5108__auto__ = cljs.core.rest(arglist__20151);
    return tfoot__delegate(opts__5107__auto__, children__5108__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
om.dom.th = function() {
  var th__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var th = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return th__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  th.cljs$lang$maxFixedArity = 1;
  th.cljs$lang$applyTo = function(arglist__20152) {
    var opts__5107__auto__ = cljs.core.first(arglist__20152);
    var children__5108__auto__ = cljs.core.rest(arglist__20152);
    return th__delegate(opts__5107__auto__, children__5108__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
om.dom.thead = function() {
  var thead__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var thead = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return thead__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  thead.cljs$lang$maxFixedArity = 1;
  thead.cljs$lang$applyTo = function(arglist__20153) {
    var opts__5107__auto__ = cljs.core.first(arglist__20153);
    var children__5108__auto__ = cljs.core.rest(arglist__20153);
    return thead__delegate(opts__5107__auto__, children__5108__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
om.dom.time = function() {
  var time__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var time = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return time__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  time.cljs$lang$maxFixedArity = 1;
  time.cljs$lang$applyTo = function(arglist__20154) {
    var opts__5107__auto__ = cljs.core.first(arglist__20154);
    var children__5108__auto__ = cljs.core.rest(arglist__20154);
    return time__delegate(opts__5107__auto__, children__5108__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
om.dom.title = function() {
  var title__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var title = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return title__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  title.cljs$lang$maxFixedArity = 1;
  title.cljs$lang$applyTo = function(arglist__20155) {
    var opts__5107__auto__ = cljs.core.first(arglist__20155);
    var children__5108__auto__ = cljs.core.rest(arglist__20155);
    return title__delegate(opts__5107__auto__, children__5108__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
om.dom.tr = function() {
  var tr__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var tr = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tr__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  tr.cljs$lang$maxFixedArity = 1;
  tr.cljs$lang$applyTo = function(arglist__20156) {
    var opts__5107__auto__ = cljs.core.first(arglist__20156);
    var children__5108__auto__ = cljs.core.rest(arglist__20156);
    return tr__delegate(opts__5107__auto__, children__5108__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
om.dom.track = function() {
  var track__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var track = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return track__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  track.cljs$lang$maxFixedArity = 1;
  track.cljs$lang$applyTo = function(arglist__20157) {
    var opts__5107__auto__ = cljs.core.first(arglist__20157);
    var children__5108__auto__ = cljs.core.rest(arglist__20157);
    return track__delegate(opts__5107__auto__, children__5108__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
om.dom.u = function() {
  var u__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var u = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return u__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  u.cljs$lang$maxFixedArity = 1;
  u.cljs$lang$applyTo = function(arglist__20158) {
    var opts__5107__auto__ = cljs.core.first(arglist__20158);
    var children__5108__auto__ = cljs.core.rest(arglist__20158);
    return u__delegate(opts__5107__auto__, children__5108__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
om.dom.ul = function() {
  var ul__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var ul = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ul__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  ul.cljs$lang$maxFixedArity = 1;
  ul.cljs$lang$applyTo = function(arglist__20159) {
    var opts__5107__auto__ = cljs.core.first(arglist__20159);
    var children__5108__auto__ = cljs.core.rest(arglist__20159);
    return ul__delegate(opts__5107__auto__, children__5108__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
om.dom.var$ = function() {
  var var$__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var var$ = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return var$__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  var$.cljs$lang$maxFixedArity = 1;
  var$.cljs$lang$applyTo = function(arglist__20160) {
    var opts__5107__auto__ = cljs.core.first(arglist__20160);
    var children__5108__auto__ = cljs.core.rest(arglist__20160);
    return var$__delegate(opts__5107__auto__, children__5108__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
om.dom.video = function() {
  var video__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var video = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return video__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  video.cljs$lang$maxFixedArity = 1;
  video.cljs$lang$applyTo = function(arglist__20161) {
    var opts__5107__auto__ = cljs.core.first(arglist__20161);
    var children__5108__auto__ = cljs.core.rest(arglist__20161);
    return video__delegate(opts__5107__auto__, children__5108__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
om.dom.wbr = function() {
  var wbr__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var wbr = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return wbr__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 1;
  wbr.cljs$lang$applyTo = function(arglist__20162) {
    var opts__5107__auto__ = cljs.core.first(arglist__20162);
    var children__5108__auto__ = cljs.core.rest(arglist__20162);
    return wbr__delegate(opts__5107__auto__, children__5108__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
om.dom.circle = function() {
  var circle__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var circle = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return circle__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  circle.cljs$lang$maxFixedArity = 1;
  circle.cljs$lang$applyTo = function(arglist__20163) {
    var opts__5107__auto__ = cljs.core.first(arglist__20163);
    var children__5108__auto__ = cljs.core.rest(arglist__20163);
    return circle__delegate(opts__5107__auto__, children__5108__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
om.dom.ellipse = function() {
  var ellipse__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.ellipse.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var ellipse = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ellipse__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  ellipse.cljs$lang$maxFixedArity = 1;
  ellipse.cljs$lang$applyTo = function(arglist__20164) {
    var opts__5107__auto__ = cljs.core.first(arglist__20164);
    var children__5108__auto__ = cljs.core.rest(arglist__20164);
    return ellipse__delegate(opts__5107__auto__, children__5108__auto__);
  };
  ellipse.cljs$core$IFn$_invoke$arity$variadic = ellipse__delegate;
  return ellipse;
}();
om.dom.g = function() {
  var g__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var g = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return g__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  g.cljs$lang$maxFixedArity = 1;
  g.cljs$lang$applyTo = function(arglist__20165) {
    var opts__5107__auto__ = cljs.core.first(arglist__20165);
    var children__5108__auto__ = cljs.core.rest(arglist__20165);
    return g__delegate(opts__5107__auto__, children__5108__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
om.dom.line = function() {
  var line__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var line = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return line__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  line.cljs$lang$maxFixedArity = 1;
  line.cljs$lang$applyTo = function(arglist__20166) {
    var opts__5107__auto__ = cljs.core.first(arglist__20166);
    var children__5108__auto__ = cljs.core.rest(arglist__20166);
    return line__delegate(opts__5107__auto__, children__5108__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
om.dom.path = function() {
  var path__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var path = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return path__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  path.cljs$lang$maxFixedArity = 1;
  path.cljs$lang$applyTo = function(arglist__20167) {
    var opts__5107__auto__ = cljs.core.first(arglist__20167);
    var children__5108__auto__ = cljs.core.rest(arglist__20167);
    return path__delegate(opts__5107__auto__, children__5108__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
om.dom.polyline = function() {
  var polyline__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var polyline = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return polyline__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 1;
  polyline.cljs$lang$applyTo = function(arglist__20168) {
    var opts__5107__auto__ = cljs.core.first(arglist__20168);
    var children__5108__auto__ = cljs.core.rest(arglist__20168);
    return polyline__delegate(opts__5107__auto__, children__5108__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
om.dom.rect = function() {
  var rect__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var rect = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rect__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  rect.cljs$lang$maxFixedArity = 1;
  rect.cljs$lang$applyTo = function(arglist__20169) {
    var opts__5107__auto__ = cljs.core.first(arglist__20169);
    var children__5108__auto__ = cljs.core.rest(arglist__20169);
    return rect__delegate(opts__5107__auto__, children__5108__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
om.dom.svg = function() {
  var svg__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var svg = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return svg__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  svg.cljs$lang$maxFixedArity = 1;
  svg.cljs$lang$applyTo = function(arglist__20170) {
    var opts__5107__auto__ = cljs.core.first(arglist__20170);
    var children__5108__auto__ = cljs.core.rest(arglist__20170);
    return svg__delegate(opts__5107__auto__, children__5108__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
om.dom.text = function() {
  var text__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var text = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return text__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  text.cljs$lang$maxFixedArity = 1;
  text.cljs$lang$applyTo = function(arglist__20171) {
    var opts__5107__auto__ = cljs.core.first(arglist__20171);
    var children__5108__auto__ = cljs.core.rest(arglist__20171);
    return text__delegate(opts__5107__auto__, children__5108__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
om.dom.defs = function() {
  var defs__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.defs.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var defs = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return defs__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  defs.cljs$lang$maxFixedArity = 1;
  defs.cljs$lang$applyTo = function(arglist__20172) {
    var opts__5107__auto__ = cljs.core.first(arglist__20172);
    var children__5108__auto__ = cljs.core.rest(arglist__20172);
    return defs__delegate(opts__5107__auto__, children__5108__auto__);
  };
  defs.cljs$core$IFn$_invoke$arity$variadic = defs__delegate;
  return defs;
}();
om.dom.linearGradient = function() {
  var linearGradient__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.linearGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var linearGradient = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return linearGradient__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  linearGradient.cljs$lang$maxFixedArity = 1;
  linearGradient.cljs$lang$applyTo = function(arglist__20173) {
    var opts__5107__auto__ = cljs.core.first(arglist__20173);
    var children__5108__auto__ = cljs.core.rest(arglist__20173);
    return linearGradient__delegate(opts__5107__auto__, children__5108__auto__);
  };
  linearGradient.cljs$core$IFn$_invoke$arity$variadic = linearGradient__delegate;
  return linearGradient;
}();
om.dom.polygon = function() {
  var polygon__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.polygon.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var polygon = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return polygon__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 1;
  polygon.cljs$lang$applyTo = function(arglist__20174) {
    var opts__5107__auto__ = cljs.core.first(arglist__20174);
    var children__5108__auto__ = cljs.core.rest(arglist__20174);
    return polygon__delegate(opts__5107__auto__, children__5108__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
om.dom.radialGradient = function() {
  var radialGradient__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.radialGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var radialGradient = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return radialGradient__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  radialGradient.cljs$lang$maxFixedArity = 1;
  radialGradient.cljs$lang$applyTo = function(arglist__20175) {
    var opts__5107__auto__ = cljs.core.first(arglist__20175);
    var children__5108__auto__ = cljs.core.rest(arglist__20175);
    return radialGradient__delegate(opts__5107__auto__, children__5108__auto__);
  };
  radialGradient.cljs$core$IFn$_invoke$arity$variadic = radialGradient__delegate;
  return radialGradient;
}();
om.dom.stop = function() {
  var stop__delegate = function(opts__5107__auto__, children__5108__auto__) {
    return React.DOM.stop.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5107__auto__, children__5108__auto__)));
  };
  var stop = function(opts__5107__auto__, var_args) {
    var children__5108__auto__ = null;
    if (arguments.length > 1) {
      children__5108__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return stop__delegate.call(this, opts__5107__auto__, children__5108__auto__);
  };
  stop.cljs$lang$maxFixedArity = 1;
  stop.cljs$lang$applyTo = function(arglist__20176) {
    var opts__5107__auto__ = cljs.core.first(arglist__20176);
    var children__5108__auto__ = cljs.core.rest(arglist__20176);
    return stop__delegate(opts__5107__auto__, children__5108__auto__);
  };
  stop.cljs$core$IFn$_invoke$arity$variadic = stop__delegate;
  return stop;
}();
om.dom.wrap_form_element = function wrap_form_element(ctor, display_name) {
  return React.createClass({"render":function() {
    var this$ = this;
    return this$.transferPropsTo(ctor.call(null, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]}));
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }, "getDisplayName":function() {
    return display_name;
  }});
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input, "input");
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea, "textarea");
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option, "option");
om.dom.render = function render(component, el) {
  return React.renderComponent(component, el);
};
om.dom.render_to_str = function render_to_str(c) {
  return React.renderComponentToString(c);
};
goog.provide("goog.ui.IdGenerator");
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return ":" + (this.nextId_++).toString(36);
};
goog.provide("om.core");
goog.require("cljs.core");
goog.require("goog.ui.IdGenerator");
goog.require("om.dom");
goog.require("om.dom");
om.core._STAR_read_enabled_STAR_ = false;
om.core._STAR_parent_STAR_ = null;
om.core._STAR_instrument_STAR_ = null;
om.core._STAR_state_STAR_ = null;
om.core.IDisplayName = function() {
  var obj16914 = {};
  return obj16914;
}();
om.core.display_name = function display_name(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IDisplayName$display_name$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IDisplayName$display_name$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.display_name[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.display_name["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisplayName.display-name", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IInitState = function() {
  var obj16916 = {};
  return obj16916;
}();
om.core.init_state = function init_state(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IInitState$init_state$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IInitState$init_state$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.init_state[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.init_state["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInitState.init-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IShouldUpdate = function() {
  var obj16918 = {};
  return obj16918;
}();
om.core.should_update = function should_update(this$, next_props, next_state) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IShouldUpdate$should_update$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IShouldUpdate$should_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.should_update[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.should_update["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IShouldUpdate.should-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IWillMount = function() {
  var obj16920 = {};
  return obj16920;
}();
om.core.will_mount = function will_mount(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IWillMount$will_mount$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IWillMount$will_mount$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.will_mount[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.will_mount["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillMount.will-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IDidMount = function() {
  var obj16922 = {};
  return obj16922;
}();
om.core.did_mount = function did_mount(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IDidMount$did_mount$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IDidMount$did_mount$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.did_mount[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.did_mount["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidMount.did-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUnmount = function() {
  var obj16924 = {};
  return obj16924;
}();
om.core.will_unmount = function will_unmount(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IWillUnmount$will_unmount$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IWillUnmount$will_unmount$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.will_unmount[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.will_unmount["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUnmount.will-unmount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUpdate = function() {
  var obj16926 = {};
  return obj16926;
}();
om.core.will_update = function will_update(this$, next_props, next_state) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IWillUpdate$will_update$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IWillUpdate$will_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.will_update[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.will_update["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUpdate.will-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IDidUpdate = function() {
  var obj16928 = {};
  return obj16928;
}();
om.core.did_update = function did_update(this$, prev_props, prev_state) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IDidUpdate$did_update$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IDidUpdate$did_update$arity$3(this$, prev_props, prev_state);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.did_update[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.did_update["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidUpdate.did-update", this$);
        }
      }
    }().call(null, this$, prev_props, prev_state);
  }
};
om.core.IWillReceiveProps = function() {
  var obj16930 = {};
  return obj16930;
}();
om.core.will_receive_props = function will_receive_props(this$, next_props) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IWillReceiveProps$will_receive_props$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IWillReceiveProps$will_receive_props$arity$2(this$, next_props);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.will_receive_props[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.will_receive_props["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillReceiveProps.will-receive-props", this$);
        }
      }
    }().call(null, this$, next_props);
  }
};
om.core.IRender = function() {
  var obj16932 = {};
  return obj16932;
}();
om.core.render = function render(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IRender$render$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IRender$render$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.render[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.render["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRender.render", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IRenderState = function() {
  var obj16934 = {};
  return obj16934;
}();
om.core.render_state = function render_state(this$, state) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IRenderState$render_state$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IRenderState$render_state$arity$2(this$, state);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core.render_state[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core.render_state["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderState.render-state", this$);
        }
      }
    }().call(null, this$, state);
  }
};
om.core.IOmSwap = function() {
  var obj16936 = {};
  return obj16936;
}();
om.core._om_swap_BANG_ = function _om_swap_BANG_(this$, cursor, korks, f, tag) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5(this$, cursor, korks, f, tag);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core._om_swap_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._om_swap_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmSwap.-om-swap!", this$);
        }
      }
    }().call(null, this$, cursor, korks, f, tag);
  }
};
om.core.IGetState = function() {
  var obj16938 = {};
  return obj16938;
}();
om.core._get_state = function() {
  var _get_state = null;
  var _get_state__1 = function(this$) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.om$core$IGetState$_get_state$arity$1;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$1(this$);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = om.core._get_state[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = om.core._get_state["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _get_state__2 = function(this$, ks) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.om$core$IGetState$_get_state$arity$2;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$2(this$, ks);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = om.core._get_state[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = om.core._get_state["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  _get_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return _get_state__1.call(this, this$);
      case 2:
        return _get_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _get_state.cljs$core$IFn$_invoke$arity$1 = _get_state__1;
  _get_state.cljs$core$IFn$_invoke$arity$2 = _get_state__2;
  return _get_state;
}();
om.core.IGetRenderState = function() {
  var obj16940 = {};
  return obj16940;
}();
om.core._get_render_state = function() {
  var _get_render_state = null;
  var _get_render_state__1 = function(this$) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$1;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$1(this$);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = om.core._get_render_state[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = om.core._get_render_state["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _get_render_state__2 = function(this$, ks) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$2;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$2(this$, ks);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = om.core._get_render_state[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = om.core._get_render_state["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  _get_render_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return _get_render_state__1.call(this, this$);
      case 2:
        return _get_render_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _get_render_state.cljs$core$IFn$_invoke$arity$1 = _get_render_state__1;
  _get_render_state.cljs$core$IFn$_invoke$arity$2 = _get_render_state__2;
  return _get_render_state;
}();
om.core.ISetState = function() {
  var obj16942 = {};
  return obj16942;
}();
om.core._set_state_BANG_ = function() {
  var _set_state_BANG_ = null;
  var _set_state_BANG___2 = function(this$, val) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$2;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$2(this$, val);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, val);
    }
  };
  var _set_state_BANG___3 = function(this$, ks, val) {
    if (function() {
      var and__3529__auto__ = this$;
      if (and__3529__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$3;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$3(this$, ks, val);
    } else {
      var x__4168__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3541__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, ks, val);
    }
  };
  _set_state_BANG_ = function(this$, ks, val) {
    switch(arguments.length) {
      case 2:
        return _set_state_BANG___2.call(this, this$, ks);
      case 3:
        return _set_state_BANG___3.call(this, this$, ks, val);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = _set_state_BANG___2;
  _set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = _set_state_BANG___3;
  return _set_state_BANG_;
}();
om.core.IRenderQueue = function() {
  var obj16944 = {};
  return obj16944;
}();
om.core._get_queue = function _get_queue(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IRenderQueue$_get_queue$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_get_queue$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core._get_queue[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._get_queue["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-get-queue", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._queue_render_BANG_ = function _queue_render_BANG_(this$, c) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2(this$, c);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core._queue_render_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._queue_render_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-queue-render!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._empty_queue_BANG_ = function _empty_queue_BANG_(this$) {
  if (function() {
    var and__3529__auto__ = this$;
    if (and__3529__auto__) {
      return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1(this$);
  } else {
    var x__4168__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3541__auto__ = om.core._empty_queue_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._empty_queue_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-empty-queue!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IValue = function() {
  var obj16946 = {};
  return obj16946;
}();
om.core._value = function _value(x) {
  if (function() {
    var and__3529__auto__ = x;
    if (and__3529__auto__) {
      return x.om$core$IValue$_value$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return x.om$core$IValue$_value$arity$1(x);
  } else {
    var x__4168__auto__ = x == null ? null : x;
    return function() {
      var or__3541__auto__ = om.core._value[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._value["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IValue.-value", x);
        }
      }
    }().call(null, x);
  }
};
om.core.IValue["_"] = true;
om.core._value["_"] = function(x) {
  return x;
};
om.core.ICursor = function() {
  var obj16948 = {};
  return obj16948;
}();
om.core._path = function _path(cursor) {
  if (function() {
    var and__3529__auto__ = cursor;
    if (and__3529__auto__) {
      return cursor.om$core$ICursor$_path$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_path$arity$1(cursor);
  } else {
    var x__4168__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3541__auto__ = om.core._path[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._path["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-path", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._state = function _state(cursor) {
  if (function() {
    var and__3529__auto__ = cursor;
    if (and__3529__auto__) {
      return cursor.om$core$ICursor$_state$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_state$arity$1(cursor);
  } else {
    var x__4168__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3541__auto__ = om.core._state[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._state["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-state", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IToCursor = function() {
  var obj16950 = {};
  return obj16950;
}();
om.core._to_cursor = function() {
  var _to_cursor = null;
  var _to_cursor__2 = function(value, state) {
    if (function() {
      var and__3529__auto__ = value;
      if (and__3529__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$2;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$2(value, state);
    } else {
      var x__4168__auto__ = value == null ? null : value;
      return function() {
        var or__3541__auto__ = om.core._to_cursor[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = om.core._to_cursor["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state);
    }
  };
  var _to_cursor__3 = function(value, state, path) {
    if (function() {
      var and__3529__auto__ = value;
      if (and__3529__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$3;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$3(value, state, path);
    } else {
      var x__4168__auto__ = value == null ? null : value;
      return function() {
        var or__3541__auto__ = om.core._to_cursor[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = om.core._to_cursor["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state, path);
    }
  };
  _to_cursor = function(value, state, path) {
    switch(arguments.length) {
      case 2:
        return _to_cursor__2.call(this, value, state);
      case 3:
        return _to_cursor__3.call(this, value, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _to_cursor.cljs$core$IFn$_invoke$arity$2 = _to_cursor__2;
  _to_cursor.cljs$core$IFn$_invoke$arity$3 = _to_cursor__3;
  return _to_cursor;
}();
om.core.ICursorDerive = function() {
  var obj16952 = {};
  return obj16952;
}();
om.core._derive = function _derive(cursor, derived, state, path) {
  if (function() {
    var and__3529__auto__ = cursor;
    if (and__3529__auto__) {
      return cursor.om$core$ICursorDerive$_derive$arity$4;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return cursor.om$core$ICursorDerive$_derive$arity$4(cursor, derived, state, path);
  } else {
    var x__4168__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3541__auto__ = om.core._derive[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._derive["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursorDerive.-derive", cursor);
        }
      }
    }().call(null, cursor, derived, state, path);
  }
};
om.core.ICursorDerive["_"] = true;
om.core._derive["_"] = function(this$, derived, state, path) {
  return om.core.to_cursor.call(null, derived, state, path);
};
om.core.path = function path(cursor) {
  return om.core._path.call(null, cursor);
};
om.core.value = function value(cursor) {
  return om.core._value.call(null, cursor);
};
om.core.state = function state(cursor) {
  return om.core._state.call(null, cursor);
};
om.core.ITransact = function() {
  var obj16954 = {};
  return obj16954;
}();
om.core._transact_BANG_ = function _transact_BANG_(cursor, korks, f, tag) {
  if (function() {
    var and__3529__auto__ = cursor;
    if (and__3529__auto__) {
      return cursor.om$core$ITransact$_transact_BANG_$arity$4;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return cursor.om$core$ITransact$_transact_BANG_$arity$4(cursor, korks, f, tag);
  } else {
    var x__4168__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3541__auto__ = om.core._transact_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._transact_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransact.-transact!", cursor);
        }
      }
    }().call(null, cursor, korks, f, tag);
  }
};
om.core.INotify = function() {
  var obj16956 = {};
  return obj16956;
}();
om.core._listen_BANG_ = function _listen_BANG_(x, key, tx_listen) {
  if (function() {
    var and__3529__auto__ = x;
    if (and__3529__auto__) {
      return x.om$core$INotify$_listen_BANG_$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return x.om$core$INotify$_listen_BANG_$arity$3(x, key, tx_listen);
  } else {
    var x__4168__auto__ = x == null ? null : x;
    return function() {
      var or__3541__auto__ = om.core._listen_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._listen_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-listen!", x);
        }
      }
    }().call(null, x, key, tx_listen);
  }
};
om.core._unlisten_BANG_ = function _unlisten_BANG_(x, key) {
  if (function() {
    var and__3529__auto__ = x;
    if (and__3529__auto__) {
      return x.om$core$INotify$_unlisten_BANG_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return x.om$core$INotify$_unlisten_BANG_$arity$2(x, key);
  } else {
    var x__4168__auto__ = x == null ? null : x;
    return function() {
      var or__3541__auto__ = om.core._unlisten_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._unlisten_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-unlisten!", x);
        }
      }
    }().call(null, x, key);
  }
};
om.core._notify_BANG_ = function _notify_BANG_(x, tx_data, root_cursor) {
  if (function() {
    var and__3529__auto__ = x;
    if (and__3529__auto__) {
      return x.om$core$INotify$_notify_BANG_$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return x.om$core$INotify$_notify_BANG_$arity$3(x, tx_data, root_cursor);
  } else {
    var x__4168__auto__ = x == null ? null : x;
    return function() {
      var or__3541__auto__ = om.core._notify_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = om.core._notify_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-notify!", x);
        }
      }
    }().call(null, x, tx_data, root_cursor);
  }
};
om.core.transact_STAR_ = function transact_STAR_(state, cursor, korks, f, tag) {
  var old_state = cljs.core.deref.call(null, state);
  var path = cljs.core.into.call(null, om.core.path.call(null, cursor), korks);
  var ret = function() {
    var G__16958 = state;
    if (G__16958) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__16958.om$core$IOmSwap$;
        }
      }())) {
        return true;
      } else {
        if (!G__16958.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__16958);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__16958);
    }
  }() ? om.core._om_swap_BANG_.call(null, state, cursor, korks, f, tag) : cljs.core.empty_QMARK_.call(null, path) ? cljs.core.swap_BANG_.call(null, state, f) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, path, f) : null;
  if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "defer", "om.core/defer", 3145885106))) {
    return null;
  } else {
    var tx_data = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", 1017337751), path, new cljs.core.Keyword(null, "old-value", "old-value", 1451216317), cljs.core.get_in.call(null, old_state, path), new cljs.core.Keyword(null, "new-value", "new-value", 3626601078), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path), new cljs.core.Keyword(null, "old-state", "old-state", 1449001181), old_state, new cljs.core.Keyword(null, "new-state", "new-state", 
    3624385942), cljs.core.deref.call(null, state)], null);
    if (!(tag == null)) {
      return om.core.notify_STAR_.call(null, cursor, cljs.core.assoc.call(null, tx_data, new cljs.core.Keyword(null, "tag", "tag", 1014018828), tag));
    } else {
      return om.core.notify_STAR_.call(null, cursor, tx_data);
    }
  }
};
om.core.cursor_QMARK_ = function cursor_QMARK_(x) {
  var G__16960 = x;
  if (G__16960) {
    var bit__4191__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3541__auto__ = bit__4191__auto__;
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return G__16960.om$core$ICursor$;
      }
    }())) {
      return true;
    } else {
      if (!G__16960.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__16960);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__16960);
  }
};
om.core.children = function children(node) {
  var c = node.props.children;
  if (cljs.core.fn_QMARK_.call(null, c)) {
    return node.props.children = function() {
      var _STAR_read_enabled_STAR_16962 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        return c.call(null, node);
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16962;
      }
    }();
  } else {
    return c;
  }
};
om.core.get_props = function get_props(x) {
  return x.props["__om_cursor"];
};
om.core.get_state = function() {
  var get_state = null;
  var get_state__1 = function(owner) {
    return om.core._get_state.call(null, owner);
  };
  var get_state__2 = function(owner, korks) {
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_state.call(null, owner, ks);
  };
  get_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_state__1.call(this, owner);
      case 2:
        return get_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_state.cljs$core$IFn$_invoke$arity$1 = get_state__1;
  get_state.cljs$core$IFn$_invoke$arity$2 = get_state__2;
  return get_state;
}();
om.core.get_shared = function() {
  var get_shared = null;
  var get_shared__1 = function(owner) {
    if (owner == null) {
      return null;
    } else {
      return owner.props["__om_shared"];
    }
  };
  var get_shared__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_shared.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_shared.call(null, owner);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get_in.call(null, get_shared.call(null, owner), korks);
        } else {
          return null;
        }
      }
    }
  };
  get_shared = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_shared__1.call(this, owner);
      case 2:
        return get_shared__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_shared.cljs$core$IFn$_invoke$arity$1 = get_shared__1;
  get_shared.cljs$core$IFn$_invoke$arity$2 = get_shared__2;
  return get_shared;
}();
om.core.merge_pending_state = function merge_pending_state(owner) {
  var state = owner.state;
  var temp__4092__auto__ = state["__om_pending_state"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var pending_state = temp__4092__auto__;
    var G__16964 = state;
    G__16964["__om_prev_state"] = state["__om_state"];
    G__16964["__om_state"] = pending_state;
    G__16964["__om_pending_state"] = null;
    return G__16964;
  } else {
    return null;
  }
};
om.core.merge_props_state = function() {
  var merge_props_state = null;
  var merge_props_state__1 = function(owner) {
    return merge_props_state.call(null, owner, null);
  };
  var merge_props_state__2 = function(owner, props) {
    var props__$1 = function() {
      var or__3541__auto__ = props;
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return owner.props;
      }
    }();
    var temp__4092__auto__ = props__$1["__om_state"];
    if (cljs.core.truth_(temp__4092__auto__)) {
      var props_state = temp__4092__auto__;
      var state = owner.state;
      state["__om_pending_state"] = cljs.core.merge.call(null, function() {
        var or__3541__auto__ = state["__om_pending_state"];
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return state["__om_state"];
        }
      }(), props_state);
      return props__$1["__om_state"] = null;
    } else {
      return null;
    }
  };
  merge_props_state = function(owner, props) {
    switch(arguments.length) {
      case 1:
        return merge_props_state__1.call(this, owner);
      case 2:
        return merge_props_state__2.call(this, owner, props);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge_props_state.cljs$core$IFn$_invoke$arity$1 = merge_props_state__1;
  merge_props_state.cljs$core$IFn$_invoke$arity$2 = merge_props_state__2;
  return merge_props_state;
}();
om.core.pure_methods = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 2086388618), new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", 4103164189), new cljs.core.Keyword(null, "render", "render", 4374279432), new cljs.core.Keyword(null, "componentWillReceiveProps", "componentWillReceiveProps", 2122862542), new cljs.core.Keyword(null, "getDisplayName", "getDisplayName", 2087784617), new cljs.core.Keyword(null, "componentWillUnmount", 
"componentWillUnmount", 4147620643), new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", 3257856604), new cljs.core.Keyword(null, "componentDidMount", "componentDidMount", 3877103209), new cljs.core.Keyword(null, "getInitialState", "getInitialState", 2219830677), new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 3193956709)], [function(next_props, next_state) {
  var this$ = this;
  var c_16992 = om.core.children.call(null, this$);
  if (function() {
    var G__16965 = c_16992;
    if (G__16965) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__16965.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__16965.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__16965);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__16965);
    }
  }()) {
    var state_16993 = this$.state;
    var _STAR_read_enabled_STAR_16966_16994 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.will_update.call(null, c_16992, om.core.get_props.call(null, {"props":next_props}), om.core._get_state.call(null, this$));
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16966_16994;
    }
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}, function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__16967 = c;
    if (G__16967) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__16967.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__16967.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__16967);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__16967);
    }
  }()) {
    var state_16995 = this$.state;
    var _STAR_read_enabled_STAR_16968_16996 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.did_update.call(null, c, om.core.get_props.call(null, {"props":prev_props}), function() {
        var or__3541__auto__ = state_16995["__om_prev_state"];
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return state_16995["__om_state"];
        }
      }());
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16968_16996;
    }
  } else {
  }
  return this$.state["__om_prev_state"] = null;
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var _STAR_read_enabled_STAR_16969 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    if (function() {
      var G__16970 = c;
      if (G__16970) {
        var bit__4191__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3541__auto__ = bit__4191__auto__;
          if (cljs.core.truth_(or__3541__auto__)) {
            return or__3541__auto__;
          } else {
            return G__16970.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__16970.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__16970);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__16970);
      }
    }()) {
      var _STAR_parent_STAR_16971 = om.core._STAR_parent_STAR_;
      var _STAR_state_STAR_16972 = om.core._STAR_state_STAR_;
      var _STAR_instrument_STAR_16973 = om.core._STAR_instrument_STAR_;
      try {
        om.core._STAR_parent_STAR_ = this$;
        om.core._STAR_state_STAR_ = props["__om_app_state"];
        om.core._STAR_instrument_STAR_ = props["__om_instrument"];
        return om.core.render.call(null, c);
      } finally {
        om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_16973;
        om.core._STAR_state_STAR_ = _STAR_state_STAR_16972;
        om.core._STAR_parent_STAR_ = _STAR_parent_STAR_16971;
      }
    } else {
      if (function() {
        var G__16974 = c;
        if (G__16974) {
          var bit__4191__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3541__auto__ = bit__4191__auto__;
            if (cljs.core.truth_(or__3541__auto__)) {
              return or__3541__auto__;
            } else {
              return G__16974.om$core$IRenderState$;
            }
          }())) {
            return true;
          } else {
            if (!G__16974.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__16974);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__16974);
        }
      }()) {
        var _STAR_parent_STAR_16975 = om.core._STAR_parent_STAR_;
        var _STAR_state_STAR_16976 = om.core._STAR_state_STAR_;
        var _STAR_instrument_STAR_16977 = om.core._STAR_instrument_STAR_;
        try {
          om.core._STAR_parent_STAR_ = this$;
          om.core._STAR_state_STAR_ = props["__om_app_state"];
          om.core._STAR_instrument_STAR_ = props["__om_instrument"];
          return om.core.render_state.call(null, c, om.core.get_state.call(null, this$));
        } finally {
          om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_16977;
          om.core._STAR_state_STAR_ = _STAR_state_STAR_16976;
          om.core._STAR_parent_STAR_ = _STAR_parent_STAR_16975;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return c;
        } else {
          return null;
        }
      }
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16969;
  }
}, function(next_props) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__16978 = c;
    if (G__16978) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__16978.om$core$IWillReceiveProps$;
        }
      }())) {
        return true;
      } else {
        if (!G__16978.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__16978);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__16978);
    }
  }()) {
    var _STAR_read_enabled_STAR_16979 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.will_receive_props.call(null, c, om.core.get_props.call(null, {"props":next_props}));
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16979;
    }
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__16980 = c;
    if (G__16980) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__16980.om$core$IDisplayName$;
        }
      }())) {
        return true;
      } else {
        if (!G__16980.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__16980);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__16980);
    }
  }()) {
    var _STAR_read_enabled_STAR_16981 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.display_name.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16981;
    }
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__16982 = c;
    if (G__16982) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__16982.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__16982.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__16982);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__16982);
    }
  }()) {
    var _STAR_read_enabled_STAR_16983 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.will_unmount.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16983;
    }
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_16997 = om.core.children.call(null, this$);
  if (function() {
    var G__16984 = c_16997;
    if (G__16984) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__16984.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__16984.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__16984);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__16984);
    }
  }()) {
    var _STAR_read_enabled_STAR_16985_16998 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.will_mount.call(null, c_16997);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16985_16998;
    }
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__16986 = c;
    if (G__16986) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__16986.om$core$IDidMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__16986.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__16986);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__16986);
    }
  }()) {
    var _STAR_read_enabled_STAR_16987 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.did_mount.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16987;
    }
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__3541__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__3541__auto__)) {
      return or__3541__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var id = (new cljs.core.Keyword("om.core", "id", "om.core/id", 2663181321)).cljs$core$IFn$_invoke$arity$1(istate);
  var ret = {"__om_state":cljs.core.merge.call(null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 2663181321)), function() {
    var G__16988 = c;
    if (G__16988) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__16988.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__16988.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__16988);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__16988);
    }
  }() ? function() {
    var _STAR_read_enabled_STAR_16989 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.init_state.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16989;
    }
  }() : null), "__om_id":function() {
    var or__3541__auto__ = id;
    if (cljs.core.truth_(or__3541__auto__)) {
      return or__3541__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }()};
  props["__om_init_state"] = null;
  return ret;
}, function(next_props, next_state) {
  var this$ = this;
  var _STAR_read_enabled_STAR_16990 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    var props = this$.props;
    var state = this$.state;
    var c = om.core.children.call(null, this$);
    om.core.merge_props_state.call(null, this$, next_props);
    if (function() {
      var G__16991 = c;
      if (G__16991) {
        var bit__4191__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3541__auto__ = bit__4191__auto__;
          if (cljs.core.truth_(or__3541__auto__)) {
            return or__3541__auto__;
          } else {
            return G__16991.om$core$IShouldUpdate$;
          }
        }())) {
          return true;
        } else {
          if (!G__16991.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__16991);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__16991);
      }
    }()) {
      return om.core.should_update.call(null, c, om.core.get_props.call(null, {"props":next_props}), om.core._get_state.call(null, this$));
    } else {
      if (cljs.core.not_EQ_.call(null, om.core._value.call(null, props["__om_cursor"]), om.core._value.call(null, next_props["__om_cursor"]))) {
        return true;
      } else {
        if (!(state["__om_pending_state"] == null)) {
          return true;
        } else {
          if (!(props["__om_index"] === next_props["__om_index"])) {
            return true;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_16990;
  }
}]);
om.core.specify_state_methods_BANG_ = function specify_state_methods_BANG_(obj) {
  var x17002 = obj;
  x17002.om$core$IGetState$ = true;
  x17002.om$core$IGetState$_get_state$arity$1 = function(x17002) {
    return function(this$) {
      var this$__$1 = this;
      var state = this$__$1.state;
      var or__3541__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return state["__om_state"];
      }
    };
  }(x17002);
  x17002.om$core$IGetState$_get_state$arity$2 = function(x17002) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x17002);
  x17002.om$core$IGetRenderState$ = true;
  x17002.om$core$IGetRenderState$_get_render_state$arity$1 = function(x17002) {
    return function(this$) {
      var this$__$1 = this;
      return this$__$1.state["__om_state"];
    };
  }(x17002);
  x17002.om$core$IGetRenderState$_get_render_state$arity$2 = function(x17002) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x17002);
  x17002.om$core$ISetState$ = true;
  x17002.om$core$ISetState$_set_state_BANG_$arity$2 = function(x17002) {
    return function(this$, val) {
      var this$__$1 = this;
      var _STAR_read_enabled_STAR_17003 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        var props = this$__$1.props;
        var app_state = props["__om_app_state"];
        this$__$1.state["__om_pending_state"] = val;
        if (app_state == null) {
          return null;
        } else {
          return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
        }
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_17003;
      }
    };
  }(x17002);
  x17002.om$core$ISetState$_set_state_BANG_$arity$3 = function(x17002) {
    return function(this$, ks, val) {
      var this$__$1 = this;
      var _STAR_read_enabled_STAR_17004 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        var props = this$__$1.props;
        var state = this$__$1.state;
        var pstate = om.core._get_state.call(null, this$__$1);
        var app_state = props["__om_app_state"];
        state["__om_pending_state"] = cljs.core.assoc_in.call(null, pstate, ks, val);
        if (app_state == null) {
          return null;
        } else {
          return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
        }
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_17004;
      }
    };
  }(x17002);
  return x17002;
};
om.core.Pure = React.createClass(om.core.specify_state_methods_BANG_.call(null, cljs.core.clj__GT_js.call(null, om.core.pure_methods)));
om.core.pure = function pure(obj) {
  return new om.core.Pure(obj);
};
om.core.MapCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2158397195;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.MapCursor.cljs$lang$type = true;
om.core.MapCursor.cljs$lang$ctorStr = "om.core/MapCursor";
om.core.MapCursor.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "om.core/MapCursor");
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.call(null, this$__$1, k, null);
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    var v = cljs.core._lookup.call(null, self__.value, k, not_found);
    if (!cljs.core._EQ_.call(null, v, not_found)) {
      return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k));
    } else {
      return not_found;
    }
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, k, v) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._assoc.call(null, self__.value, k, v), self__.state, self__.path);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.call = function() {
  var G__17008 = null;
  var G__17008__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17008__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17008 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17008__2.call(this, self__, k);
      case 3:
        return G__17008__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17008;
}();
om.core.MapCursor.prototype.apply = function(self__, args17005) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17005)));
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
om.core.MapCursor.prototype.om$core$ICursor$ = true;
om.core.MapCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.MapCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.MapCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!om.core._STAR_read_enabled_STAR_) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path);
  } else {
    throw new Error("Cannot deref cursor during render phase: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1));
  }
};
om.core.MapCursor.prototype.om$core$IValue$ = true;
om.core.MapCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.MapCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._pr_writer.call(null, self__.value, writer, opts);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (cljs.core.count.call(null, self__.value) > 0) {
      return cljs.core.map.call(null, function(this$__$1) {
        return function(p__17006) {
          var vec__17007 = p__17006;
          var k = cljs.core.nth.call(null, vec__17007, 0, null);
          var v = cljs.core.nth.call(null, vec__17007, 1, null);
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k))], null);
        };
      }(this$__$1), self__.value);
    } else {
      return null;
    }
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._count.call(null, self__.value);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (om.core.cursor_QMARK_.call(null, other)) {
      return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
    } else {
      return cljs.core._EQ_.call(null, self__.value, other);
    }
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(self__.value, self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core.meta.call(null, self__.value);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._dissoc.call(null, self__.value, k), self__.state, self__.path);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.MapCursor.prototype.om$core$ITransact$ = true;
om.core.MapCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.__GT_MapCursor = function __GT_MapCursor(value, state, path) {
  return new om.core.MapCursor(value, state, path);
};
om.core.IndexedCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2175181595;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.IndexedCursor.cljs$lang$type = true;
om.core.IndexedCursor.cljs$lang$ctorStr = "om.core/IndexedCursor";
om.core.IndexedCursor.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "om.core/IndexedCursor");
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._nth.call(null, this$__$1, n, null);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._nth.call(null, this$__$1, n, not_found);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this$, n, v) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._assoc_n.call(null, self__.value, n, v), self__.state, self__.path);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.call = function() {
  var G__17010 = null;
  var G__17010__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17010__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17010 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17010__2.call(this, self__, k);
      case 3:
        return G__17010__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17010;
}();
om.core.IndexedCursor.prototype.apply = function(self__, args17009) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17009)));
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
om.core.IndexedCursor.prototype.om$core$ICursor$ = true;
om.core.IndexedCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.IndexedCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.IndexedCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!om.core._STAR_read_enabled_STAR_) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path);
  } else {
    throw new Error("Cannot deref cursor during render phase: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1));
  }
};
om.core.IndexedCursor.prototype.om$core$IValue$ = true;
om.core.IndexedCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.IndexedCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._pr_writer.call(null, self__.value, writer, opts);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.IndexedCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (cljs.core.count.call(null, self__.value) > 0) {
      return cljs.core.map.call(null, function(this$__$1) {
        return function(v, i) {
          return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, i));
        };
      }(this$__$1), self__.value, cljs.core.range.call(null));
    } else {
      return null;
    }
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._count.call(null, self__.value);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_peek$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._peek.call(null, self__.value), self__.state, self__.path);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_pop$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._pop.call(null, self__.value), self__.state, self__.path);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (om.core.cursor_QMARK_.call(null, other)) {
      return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
    } else {
      return cljs.core._EQ_.call(null, self__.value, other);
    }
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.IndexedCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(self__.value, self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core.meta.call(null, self__.value);
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (n < cljs.core._count.call(null, self__.value)) {
      return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
    } else {
      return not_found;
    }
  } else {
    throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
  }
};
om.core.IndexedCursor.prototype.om$core$ITransact$ = true;
om.core.IndexedCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.__GT_IndexedCursor = function __GT_IndexedCursor(value, state, path) {
  return new om.core.IndexedCursor(value, state, path);
};
om.core.to_cursor_STAR_ = function to_cursor_STAR_(val, state, path) {
  var x17012 = cljs.core.clone.call(null, val);
  x17012.cljs$core$IEquiv$ = true;
  x17012.cljs$core$IEquiv$_equiv$arity$2 = function(x17012) {
    return function(_, other) {
      var ___$1 = this;
      if (om.core._STAR_read_enabled_STAR_) {
        if (om.core.cursor_QMARK_.call(null, other)) {
          return cljs.core._EQ_.call(null, val, om.core._value.call(null, other));
        } else {
          return cljs.core._EQ_.call(null, val, other);
        }
      } else {
        throw new Error("Cannot manipulate cursor outside of render phase, only om.core/transact!, om.core/update!, and cljs.core/deref operations allowed");
      }
    };
  }(x17012);
  x17012.om$core$ITransact$ = true;
  x17012.om$core$ITransact$_transact_BANG_$arity$4 = function(x17012) {
    return function(this$, korks, f, tag) {
      var this$__$1 = this;
      return om.core.transact_STAR_.call(null, state, this$__$1, korks, f, tag);
    };
  }(x17012);
  x17012.om$core$ICursor$ = true;
  x17012.om$core$ICursor$_path$arity$1 = function(x17012) {
    return function(_) {
      var ___$1 = this;
      return path;
    };
  }(x17012);
  x17012.om$core$ICursor$_state$arity$1 = function(x17012) {
    return function(_) {
      var ___$1 = this;
      return state;
    };
  }(x17012);
  x17012.cljs$core$IDeref$ = true;
  x17012.cljs$core$IDeref$_deref$arity$1 = function(x17012) {
    return function(this$) {
      var this$__$1 = this;
      if (!om.core._STAR_read_enabled_STAR_) {
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path);
      } else {
        throw new Error("Cannot deref cursor during render phase: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1));
      }
    };
  }(x17012);
  return x17012;
};
om.core.to_cursor = function() {
  var to_cursor = null;
  var to_cursor__1 = function(val) {
    return to_cursor.call(null, val, null, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__2 = function(val, state) {
    return to_cursor.call(null, val, state, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__3 = function(val, state, path) {
    if (om.core.cursor_QMARK_.call(null, val)) {
      return val;
    } else {
      if (function() {
        var G__17015 = val;
        if (G__17015) {
          var bit__4191__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3541__auto__ = bit__4191__auto__;
            if (cljs.core.truth_(or__3541__auto__)) {
              return or__3541__auto__;
            } else {
              return G__17015.om$core$IToCursor$;
            }
          }())) {
            return true;
          } else {
            if (!G__17015.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__17015);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__17015);
        }
      }()) {
        return om.core._to_cursor.call(null, val, state, path);
      } else {
        if (cljs.core.indexed_QMARK_.call(null, val)) {
          return new om.core.IndexedCursor(val, state, path);
        } else {
          if (cljs.core.map_QMARK_.call(null, val)) {
            return new om.core.MapCursor(val, state, path);
          } else {
            if (function() {
              var G__17016 = val;
              if (G__17016) {
                var bit__4191__auto__ = G__17016.cljs$lang$protocol_mask$partition1$ & 8192;
                if (bit__4191__auto__ || G__17016.cljs$core$ICloneable$) {
                  return true;
                } else {
                  if (!G__17016.cljs$lang$protocol_mask$partition1$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__17016);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__17016);
              }
            }()) {
              return om.core.to_cursor_STAR_.call(null, val, state, path);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return val;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  to_cursor = function(val, state, path) {
    switch(arguments.length) {
      case 1:
        return to_cursor__1.call(this, val);
      case 2:
        return to_cursor__2.call(this, val, state);
      case 3:
        return to_cursor__3.call(this, val, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  to_cursor.cljs$core$IFn$_invoke$arity$1 = to_cursor__1;
  to_cursor.cljs$core$IFn$_invoke$arity$2 = to_cursor__2;
  to_cursor.cljs$core$IFn$_invoke$arity$3 = to_cursor__3;
  return to_cursor;
}();
om.core.notify_STAR_ = function notify_STAR_(cursor, tx_data) {
  var state = om.core._state.call(null, cursor);
  return om.core._notify_BANG_.call(null, state, tx_data, om.core.to_cursor.call(null, cljs.core.deref.call(null, state), state));
};
om.core.refresh_queued = false;
om.core.refresh_set = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
om.core.render_all = function render_all() {
  om.core.refresh_queued = false;
  var seq__17021 = cljs.core.seq.call(null, cljs.core.deref.call(null, om.core.refresh_set));
  var chunk__17022 = null;
  var count__17023 = 0;
  var i__17024 = 0;
  while (true) {
    if (i__17024 < count__17023) {
      var f = cljs.core._nth.call(null, chunk__17022, i__17024);
      f.call(null);
      var G__17025 = seq__17021;
      var G__17026 = chunk__17022;
      var G__17027 = count__17023;
      var G__17028 = i__17024 + 1;
      seq__17021 = G__17025;
      chunk__17022 = G__17026;
      count__17023 = G__17027;
      i__17024 = G__17028;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__17021);
      if (temp__4092__auto__) {
        var seq__17021__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17021__$1)) {
          var c__4297__auto__ = cljs.core.chunk_first.call(null, seq__17021__$1);
          var G__17029 = cljs.core.chunk_rest.call(null, seq__17021__$1);
          var G__17030 = c__4297__auto__;
          var G__17031 = cljs.core.count.call(null, c__4297__auto__);
          var G__17032 = 0;
          seq__17021 = G__17029;
          chunk__17022 = G__17030;
          count__17023 = G__17031;
          i__17024 = G__17032;
          continue;
        } else {
          var f = cljs.core.first.call(null, seq__17021__$1);
          f.call(null);
          var G__17033 = cljs.core.next.call(null, seq__17021__$1);
          var G__17034 = null;
          var G__17035 = 0;
          var G__17036 = 0;
          seq__17021 = G__17033;
          chunk__17022 = G__17034;
          count__17023 = G__17035;
          i__17024 = G__17036;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
om.core.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.valid_QMARK_ = function valid_QMARK_(m) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [new cljs.core.Keyword(null, "init-state", "init-state", 4479067398), null, new cljs.core.Keyword(null, "ctor", "ctor", 1016968582), null, new cljs.core.Keyword(null, "state", "state", 1123661827), null, new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), null, new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514), null, new cljs.core.Keyword(null, 
  "key", "key", 1014010321), null, new cljs.core.Keyword(null, "instrument", "instrument", 2409387865), null, new cljs.core.Keyword(null, "shared", "shared", 4405305303), null, new cljs.core.Keyword(null, "opts", "opts", 1017322386), null, new cljs.core.Keyword(null, "fn", "fn", 1013907514), null], null), null), cljs.core.keys.call(null, m));
};
om.core.id = function id(owner) {
  return owner.state["__om_id"];
};
om.core.build_STAR_ = function() {
  var build_STAR_ = null;
  var build_STAR___2 = function(f, cursor) {
    return build_STAR_.call(null, f, cursor, null);
  };
  var build_STAR___3 = function(f, cursor, m) {
    if (om.core.valid_QMARK_.call(null, m)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.call(null, cljs.core.str, "build options contains invalid keys, only :key, :react-key, ", ":fn, :init-state, :state, and :opts allowed, given ", cljs.core.interpose.call(null, ", ", cljs.core.keys.call(null, m)))) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid?", "valid?", 1830611324, null), new cljs.core.Symbol(null, 
      "m", "m", -1640531418, null)))));
    }
    if (m == null) {
      var shared = function() {
        var or__3541__auto__ = (new cljs.core.Keyword(null, "shared", "shared", 4405305303)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
        }
      }();
      var ctor = function() {
        var or__3541__auto__ = (new cljs.core.Keyword(null, "ctor", "ctor", 1016968582)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return om.core.pure;
        }
      }();
      var pure__6411__auto__ = ctor.call(null, {"children":function(shared, ctor) {
        return function(this$) {
          var _STAR_read_enabled_STAR_17041 = om.core._STAR_read_enabled_STAR_;
          try {
            om.core._STAR_read_enabled_STAR_ = true;
            return f.call(null, cursor, this$);
          } finally {
            om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_17041;
          }
        };
      }(shared, ctor), "__om_instrument":om.core._STAR_instrument_STAR_, "__om_app_state":om.core._STAR_state_STAR_, "__om_shared":shared, "__om_cursor":cursor});
      pure__6411__auto__.constructor = goog.getUid(f);
      return pure__6411__auto__;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var map__17042 = m;
        var map__17042__$1 = cljs.core.seq_QMARK_.call(null, map__17042) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17042) : map__17042;
        var opts = cljs.core.get.call(null, map__17042__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
        var init_state = cljs.core.get.call(null, map__17042__$1, new cljs.core.Keyword(null, "init-state", "init-state", 4479067398));
        var state = cljs.core.get.call(null, map__17042__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
        var key = cljs.core.get.call(null, map__17042__$1, new cljs.core.Keyword(null, "key", "key", 1014010321));
        var dataf = cljs.core.get.call(null, m, new cljs.core.Keyword(null, "fn", "fn", 1013907514));
        var cursor_SINGLEQUOTE_ = !(dataf == null) ? function() {
          var temp__4090__auto__ = (new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514)).cljs$core$IFn$_invoke$arity$1(m);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var i = temp__4090__auto__;
            return dataf.call(null, cursor, i);
          } else {
            return dataf.call(null, cursor);
          }
        }() : cursor;
        var rkey = !(key == null) ? cljs.core.get.call(null, cursor_SINGLEQUOTE_, key) : cljs.core.get.call(null, m, new cljs.core.Keyword(null, "react-key", "react-key", 4184082563));
        var shared = function() {
          var or__3541__auto__ = (new cljs.core.Keyword(null, "shared", "shared", 4405305303)).cljs$core$IFn$_invoke$arity$1(m);
          if (cljs.core.truth_(or__3541__auto__)) {
            return or__3541__auto__;
          } else {
            return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
          }
        }();
        var ctor = function() {
          var or__3541__auto__ = (new cljs.core.Keyword(null, "ctor", "ctor", 1016968582)).cljs$core$IFn$_invoke$arity$1(m);
          if (cljs.core.truth_(or__3541__auto__)) {
            return or__3541__auto__;
          } else {
            return om.core.pure;
          }
        }();
        var pure__6411__auto__ = ctor.call(null, {"__om_cursor":cursor_SINGLEQUOTE_, "__om_state":state, "__om_shared":shared, "__om_app_state":om.core._STAR_state_STAR_, "__om_instrument":om.core._STAR_instrument_STAR_, "key":rkey, "__om_index":(new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514)).cljs$core$IFn$_invoke$arity$1(m), "__om_init_state":init_state, "children":opts == null ? function(map__17042, map__17042__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, 
        rkey, shared, ctor) {
          return function(this$) {
            var _STAR_read_enabled_STAR_17043 = om.core._STAR_read_enabled_STAR_;
            try {
              om.core._STAR_read_enabled_STAR_ = true;
              return f.call(null, cursor_SINGLEQUOTE_, this$);
            } finally {
              om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_17043;
            }
          };
        }(map__17042, map__17042__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) : function(map__17042, map__17042__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
          return function(this$) {
            var _STAR_read_enabled_STAR_17044 = om.core._STAR_read_enabled_STAR_;
            try {
              om.core._STAR_read_enabled_STAR_ = true;
              return f.call(null, cursor_SINGLEQUOTE_, this$, opts);
            } finally {
              om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_17044;
            }
          };
        }(map__17042, map__17042__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor)});
        pure__6411__auto__.constructor = goog.getUid(f);
        return pure__6411__auto__;
      } else {
        return null;
      }
    }
  };
  build_STAR_ = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return build_STAR___2.call(this, f, cursor);
      case 3:
        return build_STAR___3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_STAR_.cljs$core$IFn$_invoke$arity$2 = build_STAR___2;
  build_STAR_.cljs$core$IFn$_invoke$arity$3 = build_STAR___3;
  return build_STAR_;
}();
om.core.build = function() {
  var build = null;
  var build__2 = function(f, cursor) {
    return build.call(null, f, cursor, null);
  };
  var build__3 = function(f, cursor, m) {
    if (!(om.core._STAR_instrument_STAR_ == null)) {
      var ret = function() {
        var _STAR_read_enabled_STAR_17046 = om.core._STAR_read_enabled_STAR_;
        try {
          om.core._STAR_read_enabled_STAR_ = true;
          return om.core._STAR_instrument_STAR_.call(null, f, cursor, m);
        } finally {
          om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_17046;
        }
      }();
      if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "pass", "om.core/pass", 2667619603))) {
        return om.core.build_STAR_.call(null, f, cursor, m);
      } else {
        return ret;
      }
    } else {
      return om.core.build_STAR_.call(null, f, cursor, m);
    }
  };
  build = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return build__2.call(this, f, cursor);
      case 3:
        return build__3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build.cljs$core$IFn$_invoke$arity$2 = build__2;
  build.cljs$core$IFn$_invoke$arity$3 = build__3;
  return build;
}();
om.core.build_all = function() {
  var build_all = null;
  var build_all__2 = function(f, xs) {
    return build_all.call(null, f, xs, null);
  };
  var build_all__3 = function(f, xs, m) {
    return cljs.core.map.call(null, function(x, i) {
      return om.core.build.call(null, f, x, cljs.core.assoc.call(null, m, new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514), i));
    }, xs, cljs.core.range.call(null));
  };
  build_all = function(f, xs, m) {
    switch(arguments.length) {
      case 2:
        return build_all__2.call(this, f, xs);
      case 3:
        return build_all__3.call(this, f, xs, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_all.cljs$core$IFn$_invoke$arity$2 = build_all__2;
  build_all.cljs$core$IFn$_invoke$arity$3 = build_all__3;
  return build_all;
}();
om.core.setup = function setup(state, key, tx_listen) {
  if (function() {
    var G__17055 = state;
    if (G__17055) {
      var bit__4191__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3541__auto__ = bit__4191__auto__;
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return G__17055.om$core$INotify$;
        }
      }())) {
        return true;
      } else {
        if (!G__17055.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__17055);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__17055);
    }
  }()) {
  } else {
    var listeners_17063 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var render_queue_17064 = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
    var x17056_17065 = state;
    x17056_17065.om$core$IRenderQueue$ = true;
    x17056_17065.om$core$IRenderQueue$_get_queue$arity$1 = function(x17056_17065, listeners_17063, render_queue_17064) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.deref.call(null, render_queue_17064);
      };
    }(x17056_17065, listeners_17063, render_queue_17064);
    x17056_17065.om$core$IRenderQueue$_queue_render_BANG_$arity$2 = function(x17056_17065, listeners_17063, render_queue_17064) {
      return function(this$, c) {
        var this$__$1 = this;
        if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, render_queue_17064), c)) {
          return null;
        } else {
          cljs.core.swap_BANG_.call(null, render_queue_17064, cljs.core.conj, c);
          return cljs.core.swap_BANG_.call(null, this$__$1, cljs.core.identity);
        }
      };
    }(x17056_17065, listeners_17063, render_queue_17064);
    x17056_17065.om$core$IRenderQueue$_empty_queue_BANG_$arity$1 = function(x17056_17065, listeners_17063, render_queue_17064) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.swap_BANG_.call(null, render_queue_17064, cljs.core.empty);
      };
    }(x17056_17065, listeners_17063, render_queue_17064);
    x17056_17065.om$core$INotify$ = true;
    x17056_17065.om$core$INotify$_listen_BANG_$arity$3 = function(x17056_17065, listeners_17063, render_queue_17064) {
      return function(this$, key__$1, tx_listen__$1) {
        var this$__$1 = this;
        if (tx_listen__$1 == null) {
        } else {
          cljs.core.swap_BANG_.call(null, listeners_17063, cljs.core.assoc, key__$1, tx_listen__$1);
        }
        return this$__$1;
      };
    }(x17056_17065, listeners_17063, render_queue_17064);
    x17056_17065.om$core$INotify$_unlisten_BANG_$arity$2 = function(x17056_17065, listeners_17063, render_queue_17064) {
      return function(this$, key__$1) {
        var this$__$1 = this;
        cljs.core.swap_BANG_.call(null, listeners_17063, cljs.core.dissoc, key__$1);
        return this$__$1;
      };
    }(x17056_17065, listeners_17063, render_queue_17064);
    x17056_17065.om$core$INotify$_notify_BANG_$arity$3 = function(x17056_17065, listeners_17063, render_queue_17064) {
      return function(this$, tx_data, root_cursor) {
        var this$__$1 = this;
        if (tx_listen == null) {
        } else {
          var seq__17057_17066 = cljs.core.seq.call(null, cljs.core.deref.call(null, listeners_17063));
          var chunk__17058_17067 = null;
          var count__17059_17068 = 0;
          var i__17060_17069 = 0;
          while (true) {
            if (i__17060_17069 < count__17059_17068) {
              var vec__17061_17070 = cljs.core._nth.call(null, chunk__17058_17067, i__17060_17069);
              var __17071 = cljs.core.nth.call(null, vec__17061_17070, 0, null);
              var f_17072 = cljs.core.nth.call(null, vec__17061_17070, 1, null);
              f_17072.call(null, tx_data, root_cursor);
              var G__17073 = seq__17057_17066;
              var G__17074 = chunk__17058_17067;
              var G__17075 = count__17059_17068;
              var G__17076 = i__17060_17069 + 1;
              seq__17057_17066 = G__17073;
              chunk__17058_17067 = G__17074;
              count__17059_17068 = G__17075;
              i__17060_17069 = G__17076;
              continue;
            } else {
              var temp__4092__auto___17077 = cljs.core.seq.call(null, seq__17057_17066);
              if (temp__4092__auto___17077) {
                var seq__17057_17078__$1 = temp__4092__auto___17077;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__17057_17078__$1)) {
                  var c__4297__auto___17079 = cljs.core.chunk_first.call(null, seq__17057_17078__$1);
                  var G__17080 = cljs.core.chunk_rest.call(null, seq__17057_17078__$1);
                  var G__17081 = c__4297__auto___17079;
                  var G__17082 = cljs.core.count.call(null, c__4297__auto___17079);
                  var G__17083 = 0;
                  seq__17057_17066 = G__17080;
                  chunk__17058_17067 = G__17081;
                  count__17059_17068 = G__17082;
                  i__17060_17069 = G__17083;
                  continue;
                } else {
                  var vec__17062_17084 = cljs.core.first.call(null, seq__17057_17078__$1);
                  var __17085 = cljs.core.nth.call(null, vec__17062_17084, 0, null);
                  var f_17086 = cljs.core.nth.call(null, vec__17062_17084, 1, null);
                  f_17086.call(null, tx_data, root_cursor);
                  var G__17087 = cljs.core.next.call(null, seq__17057_17078__$1);
                  var G__17088 = null;
                  var G__17089 = 0;
                  var G__17090 = 0;
                  seq__17057_17066 = G__17087;
                  chunk__17058_17067 = G__17088;
                  count__17059_17068 = G__17089;
                  i__17060_17069 = G__17090;
                  continue;
                }
              } else {
              }
            }
            break;
          }
        }
        return this$__$1;
      };
    }(x17056_17065, listeners_17063, render_queue_17064);
  }
  return om.core._listen_BANG_.call(null, state, key, tx_listen);
};
om.core.tear_down = function tear_down(state, key) {
  return om.core._unlisten_BANG_.call(null, state, key);
};
om.core.root = function root(f, value, p__17091) {
  var map__17106 = p__17091;
  var map__17106__$1 = cljs.core.seq_QMARK_.call(null, map__17106) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17106) : map__17106;
  var options = map__17106__$1;
  var instrument = cljs.core.get.call(null, map__17106__$1, new cljs.core.Keyword(null, "instrument", "instrument", 2409387865));
  var path = cljs.core.get.call(null, map__17106__$1, new cljs.core.Keyword(null, "path", "path", 1017337751));
  var tx_listen = cljs.core.get.call(null, map__17106__$1, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 666878114));
  var target = cljs.core.get.call(null, map__17106__$1, new cljs.core.Keyword(null, "target", "target", 4427965699));
  if (!(target == null)) {
  } else {
    throw new Error("Assert failed: No target specified to om.core/root\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "target", "target", 1773529930, null))))));
  }
  var roots_SINGLEQUOTE__17120 = cljs.core.deref.call(null, om.core.roots);
  if (cljs.core.contains_QMARK_.call(null, roots_SINGLEQUOTE__17120, target)) {
    cljs.core.get.call(null, roots_SINGLEQUOTE__17120, target).call(null);
  } else {
  }
  var watch_key = cljs.core.gensym.call(null);
  var state = function() {
    var G__17107 = value;
    if (G__17107) {
      var bit__4191__auto__ = G__17107.cljs$lang$protocol_mask$partition1$ & 16384;
      if (bit__4191__auto__ || G__17107.cljs$core$IAtom$) {
        return true;
      } else {
        if (!G__17107.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__17107);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__17107);
    }
  }() ? value : cljs.core.atom.call(null, value);
  var state__$1 = om.core.setup.call(null, state, watch_key, tx_listen);
  var m = cljs.core.dissoc.call(null, options, new cljs.core.Keyword(null, "target", "target", 4427965699), new cljs.core.Keyword(null, "tx-listen", "tx-listen", 666878114), new cljs.core.Keyword(null, "path", "path", 1017337751));
  var rootf = function(watch_key, state, state__$1, m, map__17106, map__17106__$1, options, instrument, path, tx_listen, target) {
    return function rootf() {
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      var value__$1 = cljs.core.deref.call(null, state__$1);
      var cursor = path == null ? om.core.to_cursor.call(null, value__$1, state__$1, cljs.core.PersistentVector.EMPTY) : om.core.to_cursor.call(null, cljs.core.get_in.call(null, value__$1, path), state__$1, path);
      om.dom.render.call(null, function() {
        var _STAR_instrument_STAR_17114 = om.core._STAR_instrument_STAR_;
        var _STAR_state_STAR_17115 = om.core._STAR_state_STAR_;
        try {
          om.core._STAR_instrument_STAR_ = instrument;
          om.core._STAR_state_STAR_ = state__$1;
          return om.core.build.call(null, f, cursor, m);
        } finally {
          om.core._STAR_state_STAR_ = _STAR_state_STAR_17115;
          om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_17114;
        }
      }(), target);
      var queue = om.core._get_queue.call(null, state__$1);
      if (cljs.core.empty_QMARK_.call(null, queue)) {
        return null;
      } else {
        var seq__17116_17121 = cljs.core.seq.call(null, queue);
        var chunk__17117_17122 = null;
        var count__17118_17123 = 0;
        var i__17119_17124 = 0;
        while (true) {
          if (i__17119_17124 < count__17118_17123) {
            var c_17125 = cljs.core._nth.call(null, chunk__17117_17122, i__17119_17124);
            if (cljs.core.truth_(c_17125.isMounted())) {
              c_17125.forceUpdate();
            } else {
            }
            var G__17126 = seq__17116_17121;
            var G__17127 = chunk__17117_17122;
            var G__17128 = count__17118_17123;
            var G__17129 = i__17119_17124 + 1;
            seq__17116_17121 = G__17126;
            chunk__17117_17122 = G__17127;
            count__17118_17123 = G__17128;
            i__17119_17124 = G__17129;
            continue;
          } else {
            var temp__4092__auto___17130 = cljs.core.seq.call(null, seq__17116_17121);
            if (temp__4092__auto___17130) {
              var seq__17116_17131__$1 = temp__4092__auto___17130;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__17116_17131__$1)) {
                var c__4297__auto___17132 = cljs.core.chunk_first.call(null, seq__17116_17131__$1);
                var G__17133 = cljs.core.chunk_rest.call(null, seq__17116_17131__$1);
                var G__17134 = c__4297__auto___17132;
                var G__17135 = cljs.core.count.call(null, c__4297__auto___17132);
                var G__17136 = 0;
                seq__17116_17121 = G__17133;
                chunk__17117_17122 = G__17134;
                count__17118_17123 = G__17135;
                i__17119_17124 = G__17136;
                continue;
              } else {
                var c_17137 = cljs.core.first.call(null, seq__17116_17131__$1);
                if (cljs.core.truth_(c_17137.isMounted())) {
                  c_17137.forceUpdate();
                } else {
                }
                var G__17138 = cljs.core.next.call(null, seq__17116_17131__$1);
                var G__17139 = null;
                var G__17140 = 0;
                var G__17141 = 0;
                seq__17116_17121 = G__17138;
                chunk__17117_17122 = G__17139;
                count__17118_17123 = G__17140;
                i__17119_17124 = G__17141;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return om.core._empty_queue_BANG_.call(null, state__$1);
      }
    };
  }(watch_key, state, state__$1, m, map__17106, map__17106__$1, options, instrument, path, tx_listen, target);
  cljs.core.add_watch.call(null, state__$1, watch_key, function(watch_key, state, state__$1, m, rootf, map__17106, map__17106__$1, options, instrument, path, tx_listen, target) {
    return function(_, ___$1, ___$2, ___$3) {
      if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, om.core.refresh_set), rootf)) {
      } else {
        cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.conj, rootf);
      }
      if (cljs.core.truth_(om.core.refresh_queued)) {
        return null;
      } else {
        om.core.refresh_queued = true;
        if (typeof requestAnimationFrame !== "undefined") {
          return requestAnimationFrame(om.core.render_all);
        } else {
          return setTimeout(om.core.render_all, 16);
        }
      }
    };
  }(watch_key, state, state__$1, m, rootf, map__17106, map__17106__$1, options, instrument, path, tx_listen, target));
  cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.assoc, target, function(watch_key, state, state__$1, m, rootf, map__17106, map__17106__$1, options, instrument, path, tx_listen, target) {
    return function() {
      cljs.core.remove_watch.call(null, state__$1, watch_key);
      om.core.tear_down.call(null, state__$1, watch_key);
      cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.dissoc, target);
      return React.unmountComponentAtNode(target);
    };
  }(watch_key, state, state__$1, m, rootf, map__17106, map__17106__$1, options, instrument, path, tx_listen, target));
  return rootf.call(null);
};
om.core.transact_BANG_ = function() {
  var transact_BANG_ = null;
  var transact_BANG___2 = function(cursor, f) {
    return transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, f, null);
  };
  var transact_BANG___3 = function(cursor, korks, f) {
    return transact_BANG_.call(null, cursor, korks, f, null);
  };
  var transact_BANG___4 = function(cursor, korks, f, tag) {
    var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.Keyword(null, "else", "else", 1017020587) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null) : null;
    return om.core._transact_BANG_.call(null, cursor, korks__$1, f, tag);
  };
  transact_BANG_ = function(cursor, korks, f, tag) {
    switch(arguments.length) {
      case 2:
        return transact_BANG___2.call(this, cursor, korks);
      case 3:
        return transact_BANG___3.call(this, cursor, korks, f);
      case 4:
        return transact_BANG___4.call(this, cursor, korks, f, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transact_BANG_.cljs$core$IFn$_invoke$arity$2 = transact_BANG___2;
  transact_BANG_.cljs$core$IFn$_invoke$arity$3 = transact_BANG___3;
  transact_BANG_.cljs$core$IFn$_invoke$arity$4 = transact_BANG___4;
  return transact_BANG_;
}();
om.core.update_BANG_ = function() {
  var update_BANG_ = null;
  var update_BANG___2 = function(cursor, v) {
    return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, function(_) {
      return v;
    }, null);
  };
  var update_BANG___3 = function(cursor, korks, v) {
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, null);
  };
  var update_BANG___4 = function(cursor, korks, v, tag) {
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, tag);
  };
  update_BANG_ = function(cursor, korks, v, tag) {
    switch(arguments.length) {
      case 2:
        return update_BANG___2.call(this, cursor, korks);
      case 3:
        return update_BANG___3.call(this, cursor, korks, v);
      case 4:
        return update_BANG___4.call(this, cursor, korks, v, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_BANG_.cljs$core$IFn$_invoke$arity$2 = update_BANG___2;
  update_BANG_.cljs$core$IFn$_invoke$arity$3 = update_BANG___3;
  update_BANG_.cljs$core$IFn$_invoke$arity$4 = update_BANG___4;
  return update_BANG_;
}();
om.core.get_node = function() {
  var get_node = null;
  var get_node__1 = function(owner) {
    return owner.getDOMNode();
  };
  var get_node__2 = function(owner, name) {
    var temp__4092__auto__ = owner.refs;
    if (cljs.core.truth_(temp__4092__auto__)) {
      var refs = temp__4092__auto__;
      return refs[name].getDOMNode();
    } else {
      return null;
    }
  };
  get_node = function(owner, name) {
    switch(arguments.length) {
      case 1:
        return get_node__1.call(this, owner);
      case 2:
        return get_node__2.call(this, owner, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_node.cljs$core$IFn$_invoke$arity$1 = get_node__1;
  get_node.cljs$core$IFn$_invoke$arity$2 = get_node__2;
  return get_node;
}();
om.core.set_state_BANG_ = function() {
  var set_state_BANG_ = null;
  var set_state_BANG___2 = function(owner, v) {
    return om.core._set_state_BANG_.call(null, owner, v);
  };
  var set_state_BANG___3 = function(owner, korks, v) {
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._set_state_BANG_.call(null, owner, ks, v);
  };
  set_state_BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return set_state_BANG___2.call(this, owner, korks);
      case 3:
        return set_state_BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = set_state_BANG___2;
  set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = set_state_BANG___3;
  return set_state_BANG_;
}();
om.core.update_state_BANG_ = function() {
  var update_state_BANG_ = null;
  var update_state_BANG___2 = function(owner, f) {
    return om.core.set_state_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
  };
  var update_state_BANG___3 = function(owner, korks, f) {
    return om.core.set_state_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
  };
  update_state_BANG_ = function(owner, korks, f) {
    switch(arguments.length) {
      case 2:
        return update_state_BANG___2.call(this, owner, korks);
      case 3:
        return update_state_BANG___3.call(this, owner, korks, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = update_state_BANG___2;
  update_state_BANG_.cljs$core$IFn$_invoke$arity$3 = update_state_BANG___3;
  return update_state_BANG_;
}();
om.core.refresh_BANG_ = function refresh_BANG_(owner) {
  return om.core.update_state_BANG_.call(null, owner, cljs.core.identity);
};
om.core.get_render_state = function() {
  var get_render_state = null;
  var get_render_state__1 = function(owner) {
    return om.core._get_render_state.call(null, owner);
  };
  var get_render_state__2 = function(owner, korks) {
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_render_state.call(null, owner, ks);
  };
  get_render_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_render_state__1.call(this, owner);
      case 2:
        return get_render_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_render_state.cljs$core$IFn$_invoke$arity$1 = get_render_state__1;
  get_render_state.cljs$core$IFn$_invoke$arity$2 = get_render_state__2;
  return get_render_state;
}();
om.core.rendering_QMARK_ = function rendering_QMARK_() {
  return om.core._STAR_read_enabled_STAR_ === true;
};
goog.provide("plumbing.core");
goog.require("cljs.core");
goog.require("plumbing.fnk.schema");
goog.require("plumbing.fnk.schema");
goog.require("schema.utils");
goog.require("schema.utils");
plumbing.core._PLUS_none_PLUS_ = new cljs.core.Keyword("plumbing.core", "missing", "plumbing.core/missing", 1730933117);
plumbing.core.update = function() {
  var update = null;
  var update__3 = function(m, k, f) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
  };
  var update__4 = function(m, k, f, x1) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), x1));
  };
  var update__5 = function(m, k, f, x1, x2) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), x1, x2));
  };
  var update__6 = function() {
    var G__15035__delegate = function(m, k, f, x1, x2, xs) {
      return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), x1, x2, xs));
    };
    var G__15035 = function(m, k, f, x1, x2, var_args) {
      var xs = null;
      if (arguments.length > 5) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__15035__delegate.call(this, m, k, f, x1, x2, xs);
    };
    G__15035.cljs$lang$maxFixedArity = 5;
    G__15035.cljs$lang$applyTo = function(arglist__15036) {
      var m = cljs.core.first(arglist__15036);
      arglist__15036 = cljs.core.next(arglist__15036);
      var k = cljs.core.first(arglist__15036);
      arglist__15036 = cljs.core.next(arglist__15036);
      var f = cljs.core.first(arglist__15036);
      arglist__15036 = cljs.core.next(arglist__15036);
      var x1 = cljs.core.first(arglist__15036);
      arglist__15036 = cljs.core.next(arglist__15036);
      var x2 = cljs.core.first(arglist__15036);
      var xs = cljs.core.rest(arglist__15036);
      return G__15035__delegate(m, k, f, x1, x2, xs);
    };
    G__15035.cljs$core$IFn$_invoke$arity$variadic = G__15035__delegate;
    return G__15035;
  }();
  update = function(m, k, f, x1, x2, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 3:
        return update__3.call(this, m, k, f);
      case 4:
        return update__4.call(this, m, k, f, x1);
      case 5:
        return update__5.call(this, m, k, f, x1, x2);
      default:
        return update__6.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x1, x2, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$lang$maxFixedArity = 5;
  update.cljs$lang$applyTo = update__6.cljs$lang$applyTo;
  update.cljs$core$IFn$_invoke$arity$3 = update__3;
  update.cljs$core$IFn$_invoke$arity$4 = update__4;
  update.cljs$core$IFn$_invoke$arity$5 = update__5;
  update.cljs$core$IFn$_invoke$arity$variadic = update__6.cljs$core$IFn$_invoke$arity$variadic;
  return update;
}();
plumbing.core.map_vals = function map_vals(f, m) {
  if (cljs.core.sorted_QMARK_.call(null, m)) {
    return cljs.core.reduce_kv.call(null, function(out_m, k, v) {
      return cljs.core.assoc.call(null, out_m, k, f.call(null, v));
    }, cljs.core.sorted_map.call(null), m);
  } else {
    if (cljs.core.map_QMARK_.call(null, m)) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, function(out_m, k, v) {
        return cljs.core.assoc_BANG_.call(null, out_m, k, f.call(null, v));
      }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), m));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var m_atom__8748__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
        var seq__15045_15051 = cljs.core.seq.call(null, m);
        var chunk__15046_15052 = null;
        var count__15047_15053 = 0;
        var i__15048_15054 = 0;
        while (true) {
          if (i__15048_15054 < count__15047_15053) {
            var vec__15049_15055 = cljs.core._nth.call(null, chunk__15046_15052, i__15048_15054);
            var k_15056 = cljs.core.nth.call(null, vec__15049_15055, 0, null);
            var v_15057 = cljs.core.nth.call(null, vec__15049_15055, 1, null);
            var m15044_15058 = cljs.core.deref.call(null, m_atom__8748__auto__);
            cljs.core.reset_BANG_.call(null, m_atom__8748__auto__, cljs.core.assoc_BANG_.call(null, m15044_15058, k_15056, f.call(null, v_15057)));
            var G__15059 = seq__15045_15051;
            var G__15060 = chunk__15046_15052;
            var G__15061 = count__15047_15053;
            var G__15062 = i__15048_15054 + 1;
            seq__15045_15051 = G__15059;
            chunk__15046_15052 = G__15060;
            count__15047_15053 = G__15061;
            i__15048_15054 = G__15062;
            continue;
          } else {
            var temp__4092__auto___15063 = cljs.core.seq.call(null, seq__15045_15051);
            if (temp__4092__auto___15063) {
              var seq__15045_15064__$1 = temp__4092__auto___15063;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__15045_15064__$1)) {
                var c__4297__auto___15065 = cljs.core.chunk_first.call(null, seq__15045_15064__$1);
                var G__15066 = cljs.core.chunk_rest.call(null, seq__15045_15064__$1);
                var G__15067 = c__4297__auto___15065;
                var G__15068 = cljs.core.count.call(null, c__4297__auto___15065);
                var G__15069 = 0;
                seq__15045_15051 = G__15066;
                chunk__15046_15052 = G__15067;
                count__15047_15053 = G__15068;
                i__15048_15054 = G__15069;
                continue;
              } else {
                var vec__15050_15070 = cljs.core.first.call(null, seq__15045_15064__$1);
                var k_15071 = cljs.core.nth.call(null, vec__15050_15070, 0, null);
                var v_15072 = cljs.core.nth.call(null, vec__15050_15070, 1, null);
                var m15044_15073 = cljs.core.deref.call(null, m_atom__8748__auto__);
                cljs.core.reset_BANG_.call(null, m_atom__8748__auto__, cljs.core.assoc_BANG_.call(null, m15044_15073, k_15071, f.call(null, v_15072)));
                var G__15074 = cljs.core.next.call(null, seq__15045_15064__$1);
                var G__15075 = null;
                var G__15076 = 0;
                var G__15077 = 0;
                seq__15045_15051 = G__15074;
                chunk__15046_15052 = G__15075;
                count__15047_15053 = G__15076;
                i__15048_15054 = G__15077;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__8748__auto__));
      } else {
        return null;
      }
    }
  }
};
plumbing.core.map_keys = function map_keys(f, m) {
  if (cljs.core.map_QMARK_.call(null, m)) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, function(out_m, k, v) {
      return cljs.core.assoc_BANG_.call(null, out_m, f.call(null, k), v);
    }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), m));
  } else {
    var m_atom__8748__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
    var seq__15086_15092 = cljs.core.seq.call(null, m);
    var chunk__15087_15093 = null;
    var count__15088_15094 = 0;
    var i__15089_15095 = 0;
    while (true) {
      if (i__15089_15095 < count__15088_15094) {
        var vec__15090_15096 = cljs.core._nth.call(null, chunk__15087_15093, i__15089_15095);
        var k_15097 = cljs.core.nth.call(null, vec__15090_15096, 0, null);
        var v_15098 = cljs.core.nth.call(null, vec__15090_15096, 1, null);
        var m15085_15099 = cljs.core.deref.call(null, m_atom__8748__auto__);
        cljs.core.reset_BANG_.call(null, m_atom__8748__auto__, cljs.core.assoc_BANG_.call(null, m15085_15099, f.call(null, k_15097), v_15098));
        var G__15100 = seq__15086_15092;
        var G__15101 = chunk__15087_15093;
        var G__15102 = count__15088_15094;
        var G__15103 = i__15089_15095 + 1;
        seq__15086_15092 = G__15100;
        chunk__15087_15093 = G__15101;
        count__15088_15094 = G__15102;
        i__15089_15095 = G__15103;
        continue;
      } else {
        var temp__4092__auto___15104 = cljs.core.seq.call(null, seq__15086_15092);
        if (temp__4092__auto___15104) {
          var seq__15086_15105__$1 = temp__4092__auto___15104;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15086_15105__$1)) {
            var c__4297__auto___15106 = cljs.core.chunk_first.call(null, seq__15086_15105__$1);
            var G__15107 = cljs.core.chunk_rest.call(null, seq__15086_15105__$1);
            var G__15108 = c__4297__auto___15106;
            var G__15109 = cljs.core.count.call(null, c__4297__auto___15106);
            var G__15110 = 0;
            seq__15086_15092 = G__15107;
            chunk__15087_15093 = G__15108;
            count__15088_15094 = G__15109;
            i__15089_15095 = G__15110;
            continue;
          } else {
            var vec__15091_15111 = cljs.core.first.call(null, seq__15086_15105__$1);
            var k_15112 = cljs.core.nth.call(null, vec__15091_15111, 0, null);
            var v_15113 = cljs.core.nth.call(null, vec__15091_15111, 1, null);
            var m15085_15114 = cljs.core.deref.call(null, m_atom__8748__auto__);
            cljs.core.reset_BANG_.call(null, m_atom__8748__auto__, cljs.core.assoc_BANG_.call(null, m15085_15114, f.call(null, k_15112), v_15113));
            var G__15115 = cljs.core.next.call(null, seq__15086_15105__$1);
            var G__15116 = null;
            var G__15117 = 0;
            var G__15118 = 0;
            seq__15086_15092 = G__15115;
            chunk__15087_15093 = G__15116;
            count__15088_15094 = G__15117;
            i__15089_15095 = G__15118;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__8748__auto__));
  }
};
plumbing.core.map_from_keys = function map_from_keys(f, ks) {
  var m_atom__8748__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
  var seq__15125_15129 = cljs.core.seq.call(null, ks);
  var chunk__15126_15130 = null;
  var count__15127_15131 = 0;
  var i__15128_15132 = 0;
  while (true) {
    if (i__15128_15132 < count__15127_15131) {
      var k_15133 = cljs.core._nth.call(null, chunk__15126_15130, i__15128_15132);
      var m15124_15134 = cljs.core.deref.call(null, m_atom__8748__auto__);
      cljs.core.reset_BANG_.call(null, m_atom__8748__auto__, cljs.core.assoc_BANG_.call(null, m15124_15134, k_15133, f.call(null, k_15133)));
      var G__15135 = seq__15125_15129;
      var G__15136 = chunk__15126_15130;
      var G__15137 = count__15127_15131;
      var G__15138 = i__15128_15132 + 1;
      seq__15125_15129 = G__15135;
      chunk__15126_15130 = G__15136;
      count__15127_15131 = G__15137;
      i__15128_15132 = G__15138;
      continue;
    } else {
      var temp__4092__auto___15139 = cljs.core.seq.call(null, seq__15125_15129);
      if (temp__4092__auto___15139) {
        var seq__15125_15140__$1 = temp__4092__auto___15139;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15125_15140__$1)) {
          var c__4297__auto___15141 = cljs.core.chunk_first.call(null, seq__15125_15140__$1);
          var G__15142 = cljs.core.chunk_rest.call(null, seq__15125_15140__$1);
          var G__15143 = c__4297__auto___15141;
          var G__15144 = cljs.core.count.call(null, c__4297__auto___15141);
          var G__15145 = 0;
          seq__15125_15129 = G__15142;
          chunk__15126_15130 = G__15143;
          count__15127_15131 = G__15144;
          i__15128_15132 = G__15145;
          continue;
        } else {
          var k_15146 = cljs.core.first.call(null, seq__15125_15140__$1);
          var m15124_15147 = cljs.core.deref.call(null, m_atom__8748__auto__);
          cljs.core.reset_BANG_.call(null, m_atom__8748__auto__, cljs.core.assoc_BANG_.call(null, m15124_15147, k_15146, f.call(null, k_15146)));
          var G__15148 = cljs.core.next.call(null, seq__15125_15140__$1);
          var G__15149 = null;
          var G__15150 = 0;
          var G__15151 = 0;
          seq__15125_15129 = G__15148;
          chunk__15126_15130 = G__15149;
          count__15127_15131 = G__15150;
          i__15128_15132 = G__15151;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__8748__auto__));
};
plumbing.core.map_from_vals = function map_from_vals(f, vs) {
  var m_atom__8748__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
  var seq__15158_15162 = cljs.core.seq.call(null, vs);
  var chunk__15159_15163 = null;
  var count__15160_15164 = 0;
  var i__15161_15165 = 0;
  while (true) {
    if (i__15161_15165 < count__15160_15164) {
      var v_15166 = cljs.core._nth.call(null, chunk__15159_15163, i__15161_15165);
      var m15157_15167 = cljs.core.deref.call(null, m_atom__8748__auto__);
      cljs.core.reset_BANG_.call(null, m_atom__8748__auto__, cljs.core.assoc_BANG_.call(null, m15157_15167, f.call(null, v_15166), v_15166));
      var G__15168 = seq__15158_15162;
      var G__15169 = chunk__15159_15163;
      var G__15170 = count__15160_15164;
      var G__15171 = i__15161_15165 + 1;
      seq__15158_15162 = G__15168;
      chunk__15159_15163 = G__15169;
      count__15160_15164 = G__15170;
      i__15161_15165 = G__15171;
      continue;
    } else {
      var temp__4092__auto___15172 = cljs.core.seq.call(null, seq__15158_15162);
      if (temp__4092__auto___15172) {
        var seq__15158_15173__$1 = temp__4092__auto___15172;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15158_15173__$1)) {
          var c__4297__auto___15174 = cljs.core.chunk_first.call(null, seq__15158_15173__$1);
          var G__15175 = cljs.core.chunk_rest.call(null, seq__15158_15173__$1);
          var G__15176 = c__4297__auto___15174;
          var G__15177 = cljs.core.count.call(null, c__4297__auto___15174);
          var G__15178 = 0;
          seq__15158_15162 = G__15175;
          chunk__15159_15163 = G__15176;
          count__15160_15164 = G__15177;
          i__15161_15165 = G__15178;
          continue;
        } else {
          var v_15179 = cljs.core.first.call(null, seq__15158_15173__$1);
          var m15157_15180 = cljs.core.deref.call(null, m_atom__8748__auto__);
          cljs.core.reset_BANG_.call(null, m_atom__8748__auto__, cljs.core.assoc_BANG_.call(null, m15157_15180, f.call(null, v_15179), v_15179));
          var G__15181 = cljs.core.next.call(null, seq__15158_15173__$1);
          var G__15182 = null;
          var G__15183 = 0;
          var G__15184 = 0;
          seq__15158_15162 = G__15181;
          chunk__15159_15163 = G__15182;
          count__15160_15164 = G__15183;
          i__15161_15165 = G__15184;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__8748__auto__));
};
plumbing.core.dissoc_in = function dissoc_in(m, p__15185) {
  var vec__15187 = p__15185;
  var k = cljs.core.nth.call(null, vec__15187, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__15187, 1);
  if (cljs.core.truth_(m)) {
    var temp__4090__auto__ = function() {
      var and__3529__auto__ = ks;
      if (and__3529__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3529__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
plumbing.core.keywordize_map = function keywordize_map(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    var m_atom__8748__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
    var seq__15196_15202 = cljs.core.seq.call(null, x);
    var chunk__15197_15203 = null;
    var count__15198_15204 = 0;
    var i__15199_15205 = 0;
    while (true) {
      if (i__15199_15205 < count__15198_15204) {
        var vec__15200_15206 = cljs.core._nth.call(null, chunk__15197_15203, i__15199_15205);
        var k_15207 = cljs.core.nth.call(null, vec__15200_15206, 0, null);
        var v_15208 = cljs.core.nth.call(null, vec__15200_15206, 1, null);
        var m15195_15209 = cljs.core.deref.call(null, m_atom__8748__auto__);
        cljs.core.reset_BANG_.call(null, m_atom__8748__auto__, cljs.core.assoc_BANG_.call(null, m15195_15209, typeof k_15207 === "string" ? cljs.core.keyword.call(null, k_15207) : k_15207, keywordize_map.call(null, v_15208)));
        var G__15210 = seq__15196_15202;
        var G__15211 = chunk__15197_15203;
        var G__15212 = count__15198_15204;
        var G__15213 = i__15199_15205 + 1;
        seq__15196_15202 = G__15210;
        chunk__15197_15203 = G__15211;
        count__15198_15204 = G__15212;
        i__15199_15205 = G__15213;
        continue;
      } else {
        var temp__4092__auto___15214 = cljs.core.seq.call(null, seq__15196_15202);
        if (temp__4092__auto___15214) {
          var seq__15196_15215__$1 = temp__4092__auto___15214;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15196_15215__$1)) {
            var c__4297__auto___15216 = cljs.core.chunk_first.call(null, seq__15196_15215__$1);
            var G__15217 = cljs.core.chunk_rest.call(null, seq__15196_15215__$1);
            var G__15218 = c__4297__auto___15216;
            var G__15219 = cljs.core.count.call(null, c__4297__auto___15216);
            var G__15220 = 0;
            seq__15196_15202 = G__15217;
            chunk__15197_15203 = G__15218;
            count__15198_15204 = G__15219;
            i__15199_15205 = G__15220;
            continue;
          } else {
            var vec__15201_15221 = cljs.core.first.call(null, seq__15196_15215__$1);
            var k_15222 = cljs.core.nth.call(null, vec__15201_15221, 0, null);
            var v_15223 = cljs.core.nth.call(null, vec__15201_15221, 1, null);
            var m15195_15224 = cljs.core.deref.call(null, m_atom__8748__auto__);
            cljs.core.reset_BANG_.call(null, m_atom__8748__auto__, cljs.core.assoc_BANG_.call(null, m15195_15224, typeof k_15222 === "string" ? cljs.core.keyword.call(null, k_15222) : k_15222, keywordize_map.call(null, v_15223)));
            var G__15225 = cljs.core.next.call(null, seq__15196_15215__$1);
            var G__15226 = null;
            var G__15227 = 0;
            var G__15228 = 0;
            seq__15196_15202 = G__15225;
            chunk__15197_15203 = G__15226;
            count__15198_15204 = G__15227;
            i__15199_15205 = G__15228;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__8748__auto__));
  } else {
    if (cljs.core.seq_QMARK_.call(null, x)) {
      return cljs.core.map.call(null, keywordize_map, x);
    } else {
      if (cljs.core.vector_QMARK_.call(null, x)) {
        return cljs.core.mapv.call(null, keywordize_map, x);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return x;
        } else {
          return null;
        }
      }
    }
  }
};
plumbing.core.safe_get = function safe_get(m, k) {
  var temp__4090__auto__ = cljs.core.find.call(null, m, k);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var pair__8817__auto__ = temp__4090__auto__;
    return cljs.core.val.call(null, pair__8817__auto__);
  } else {
    var e = schema.utils.format_STAR_.call(null, "Key %s not found in %s", k, cljs.core.mapv.call(null, cljs.core.key, m));
    throw new Error(e);
  }
};
plumbing.core.safe_get_in = function safe_get_in(m, ks) {
  while (true) {
    if (cljs.core.seq.call(null, ks)) {
      var G__15229 = plumbing.core.safe_get.call(null, m, cljs.core.first.call(null, ks));
      var G__15230 = cljs.core.next.call(null, ks);
      m = G__15229;
      ks = G__15230;
      continue;
    } else {
      return m;
    }
    break;
  }
};
plumbing.core.assoc_when = function() {
  var assoc_when__delegate = function(m, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null))))));
    }
    return cljs.core.into.call(null, function() {
      var or__3541__auto__ = m;
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var iter__4266__auto__ = function iter__15239(s__15240) {
        return new cljs.core.LazySeq(null, function() {
          var s__15240__$1 = s__15240;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__15240__$1);
            if (temp__4092__auto__) {
              var s__15240__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__15240__$2)) {
                var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15240__$2);
                var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                var b__15242 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                if (function() {
                  var i__15241 = 0;
                  while (true) {
                    if (i__15241 < size__4265__auto__) {
                      var vec__15245 = cljs.core._nth.call(null, c__4264__auto__, i__15241);
                      var k = cljs.core.nth.call(null, vec__15245, 0, null);
                      var v = cljs.core.nth.call(null, vec__15245, 1, null);
                      if (cljs.core.truth_(v)) {
                        cljs.core.chunk_append.call(null, b__15242, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                        var G__15247 = i__15241 + 1;
                        i__15241 = G__15247;
                        continue;
                      } else {
                        var G__15248 = i__15241 + 1;
                        i__15241 = G__15248;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15242), iter__15239.call(null, cljs.core.chunk_rest.call(null, s__15240__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15242), null);
                }
              } else {
                var vec__15246 = cljs.core.first.call(null, s__15240__$2);
                var k = cljs.core.nth.call(null, vec__15246, 0, null);
                var v = cljs.core.nth.call(null, vec__15246, 1, null);
                if (cljs.core.truth_(v)) {
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__15239.call(null, cljs.core.rest.call(null, s__15240__$2)));
                } else {
                  var G__15249 = cljs.core.rest.call(null, s__15240__$2);
                  s__15240__$1 = G__15249;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4266__auto__.call(null, cljs.core.partition.call(null, 2, kvs));
    }());
  };
  var assoc_when = function(m, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return assoc_when__delegate.call(this, m, kvs);
  };
  assoc_when.cljs$lang$maxFixedArity = 1;
  assoc_when.cljs$lang$applyTo = function(arglist__15250) {
    var m = cljs.core.first(arglist__15250);
    var kvs = cljs.core.rest(arglist__15250);
    return assoc_when__delegate(m, kvs);
  };
  assoc_when.cljs$core$IFn$_invoke$arity$variadic = assoc_when__delegate;
  return assoc_when;
}();
plumbing.core.update_in_when = function() {
  var update_in_when__delegate = function(m, key_seq, f, args) {
    var found = cljs.core.get_in.call(null, m, key_seq, plumbing.core._PLUS_none_PLUS_);
    if (!(plumbing.core._PLUS_none_PLUS_ === found)) {
      return cljs.core.assoc_in.call(null, m, key_seq, cljs.core.apply.call(null, f, found, args));
    } else {
      return m;
    }
  };
  var update_in_when = function(m, key_seq, f, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return update_in_when__delegate.call(this, m, key_seq, f, args);
  };
  update_in_when.cljs$lang$maxFixedArity = 3;
  update_in_when.cljs$lang$applyTo = function(arglist__15251) {
    var m = cljs.core.first(arglist__15251);
    arglist__15251 = cljs.core.next(arglist__15251);
    var key_seq = cljs.core.first(arglist__15251);
    arglist__15251 = cljs.core.next(arglist__15251);
    var f = cljs.core.first(arglist__15251);
    var args = cljs.core.rest(arglist__15251);
    return update_in_when__delegate(m, key_seq, f, args);
  };
  update_in_when.cljs$core$IFn$_invoke$arity$variadic = update_in_when__delegate;
  return update_in_when;
}();
plumbing.core.grouped_map = function grouped_map(key_fn, map_fn, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = key_fn.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), map_fn.call(null, x)));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
plumbing.core.aconcat = function aconcat(s) {
  return cljs.core.concat.call(null, new cljs.core.LazySeq(null, function() {
    return cljs.core.first.call(null, s);
  }, null, null), new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.next.call(null, s);
    if (temp__4092__auto__) {
      var n = temp__4092__auto__;
      return aconcat.call(null, n);
    } else {
      return null;
    }
  }, null, null));
};
plumbing.core.unchunk = function unchunk(s) {
  if (cljs.core.seq.call(null, s)) {
    return cljs.core.cons.call(null, cljs.core.first.call(null, s), new cljs.core.LazySeq(null, function() {
      return unchunk.call(null, cljs.core.rest.call(null, s));
    }, null, null));
  } else {
    return null;
  }
};
plumbing.core.sum = function() {
  var sum = null;
  var sum__1 = function(xs) {
    return cljs.core.reduce.call(null, cljs.core._PLUS_, xs);
  };
  var sum__2 = function(f, xs) {
    return cljs.core.reduce.call(null, cljs.core._PLUS_, cljs.core.map.call(null, f, xs));
  };
  sum = function(f, xs) {
    switch(arguments.length) {
      case 1:
        return sum__1.call(this, f);
      case 2:
        return sum__2.call(this, f, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sum.cljs$core$IFn$_invoke$arity$1 = sum__1;
  sum.cljs$core$IFn$_invoke$arity$2 = sum__2;
  return sum;
}();
plumbing.core.singleton = function singleton(xs) {
  var temp__4092__auto__ = cljs.core.seq.call(null, xs);
  if (temp__4092__auto__) {
    var xs__$1 = temp__4092__auto__;
    if (cljs.core.next.call(null, xs__$1)) {
      return null;
    } else {
      return cljs.core.first.call(null, xs__$1);
    }
  } else {
    return null;
  }
};
plumbing.core.indexed = function indexed(s) {
  return cljs.core.map_indexed.call(null, cljs.core.vector, s);
};
plumbing.core.positions = function positions(f, s) {
  return cljs.core.keep_indexed.call(null, function(i, x) {
    if (cljs.core.truth_(f.call(null, x))) {
      return i;
    } else {
      return null;
    }
  }, s);
};
plumbing.core.distinct_by = function distinct_by(f, xs) {
  var s = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
  var iter__4266__auto__ = function(s) {
    return function iter__15256(s__15257) {
      return new cljs.core.LazySeq(null, function(s) {
        return function() {
          var s__15257__$1 = s__15257;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__15257__$1);
            if (temp__4092__auto__) {
              var s__15257__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__15257__$2)) {
                var c__4264__auto__ = cljs.core.chunk_first.call(null, s__15257__$2);
                var size__4265__auto__ = cljs.core.count.call(null, c__4264__auto__);
                var b__15259 = cljs.core.chunk_buffer.call(null, size__4265__auto__);
                if (function() {
                  var i__15258 = 0;
                  while (true) {
                    if (i__15258 < size__4265__auto__) {
                      var x = cljs.core._nth.call(null, c__4264__auto__, i__15258);
                      var id = f.call(null, x);
                      if (!cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, s), id)) {
                        cljs.core.chunk_append.call(null, b__15259, function() {
                          cljs.core.swap_BANG_.call(null, s, cljs.core.conj, id);
                          return x;
                        }());
                        var G__15260 = i__15258 + 1;
                        i__15258 = G__15260;
                        continue;
                      } else {
                        var G__15261 = i__15258 + 1;
                        i__15258 = G__15261;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15259), iter__15256.call(null, cljs.core.chunk_rest.call(null, s__15257__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15259), null);
                }
              } else {
                var x = cljs.core.first.call(null, s__15257__$2);
                var id = f.call(null, x);
                if (!cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, s), id)) {
                  return cljs.core.cons.call(null, function() {
                    cljs.core.swap_BANG_.call(null, s, cljs.core.conj, id);
                    return x;
                  }(), iter__15256.call(null, cljs.core.rest.call(null, s__15257__$2)));
                } else {
                  var G__15262 = cljs.core.rest.call(null, s__15257__$2);
                  s__15257__$1 = G__15262;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        };
      }(s), null, null);
    };
  }(s);
  return iter__4266__auto__.call(null, xs);
};
plumbing.core.interleave_all = function() {
  var interleave_all__delegate = function(colls) {
    return new cljs.core.LazySeq(null, function() {
      return function helper(seqs) {
        if (cljs.core.seq.call(null, seqs)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, seqs), new cljs.core.LazySeq(null, function() {
            return helper.call(null, cljs.core.keep.call(null, cljs.core.next, seqs));
          }, null, null));
        } else {
          return null;
        }
      }.call(null, cljs.core.keep.call(null, cljs.core.seq, colls));
    }, null, null);
  };
  var interleave_all = function(var_args) {
    var colls = null;
    if (arguments.length > 0) {
      colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return interleave_all__delegate.call(this, colls);
  };
  interleave_all.cljs$lang$maxFixedArity = 0;
  interleave_all.cljs$lang$applyTo = function(arglist__15263) {
    var colls = cljs.core.seq(arglist__15263);
    return interleave_all__delegate(colls);
  };
  interleave_all.cljs$core$IFn$_invoke$arity$variadic = interleave_all__delegate;
  return interleave_all;
}();
plumbing.core.count_when = function count_when(pred, xs) {
  return cljs.core.count.call(null, cljs.core.filter.call(null, pred, xs));
};
plumbing.core.conj_when = function() {
  var conj_when = null;
  var conj_when__2 = function(coll, x) {
    if (cljs.core.truth_(x)) {
      return cljs.core.conj.call(null, coll, x);
    } else {
      return coll;
    }
  };
  var conj_when__3 = function() {
    var G__15264__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__15265 = conj_when.call(null, coll, x);
          var G__15266 = cljs.core.first.call(null, xs);
          var G__15267 = cljs.core.next.call(null, xs);
          coll = G__15265;
          x = G__15266;
          xs = G__15267;
          continue;
        } else {
          return conj_when.call(null, coll, x);
        }
        break;
      }
    };
    var G__15264 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15264__delegate.call(this, coll, x, xs);
    };
    G__15264.cljs$lang$maxFixedArity = 2;
    G__15264.cljs$lang$applyTo = function(arglist__15268) {
      var coll = cljs.core.first(arglist__15268);
      arglist__15268 = cljs.core.next(arglist__15268);
      var x = cljs.core.first(arglist__15268);
      var xs = cljs.core.rest(arglist__15268);
      return G__15264__delegate(coll, x, xs);
    };
    G__15264.cljs$core$IFn$_invoke$arity$variadic = G__15264__delegate;
    return G__15264;
  }();
  conj_when = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj_when__2.call(this, coll, x);
      default:
        return conj_when__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_when.cljs$lang$maxFixedArity = 2;
  conj_when.cljs$lang$applyTo = conj_when__3.cljs$lang$applyTo;
  conj_when.cljs$core$IFn$_invoke$arity$2 = conj_when__2;
  conj_when.cljs$core$IFn$_invoke$arity$variadic = conj_when__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_when;
}();
plumbing.core.cons_when = function cons_when(x, s) {
  if (cljs.core.truth_(x)) {
    return cljs.core.cons.call(null, x, s);
  } else {
    return s;
  }
};
plumbing.core.rsort_by = cljs.core.comp.call(null, cljs.core.reverse, cljs.core.sort_by);
plumbing.core.swap_pair_BANG_ = function() {
  var swap_pair_BANG_ = null;
  var swap_pair_BANG___2 = function(a, f) {
    while (true) {
      var old_val = cljs.core.deref.call(null, a);
      var new_val = f.call(null, old_val);
      if (cljs.core.compare_and_set_BANG_.call(null, a, old_val, new_val)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old_val, new_val], null);
      } else {
        continue;
      }
      break;
    }
  };
  var swap_pair_BANG___3 = function() {
    var G__15270__delegate = function(a, f, args) {
      return swap_pair_BANG_.call(null, a, function(p1__15269_SHARP_) {
        return cljs.core.apply.call(null, f, p1__15269_SHARP_, args);
      });
    };
    var G__15270 = function(a, f, var_args) {
      var args = null;
      if (arguments.length > 2) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15270__delegate.call(this, a, f, args);
    };
    G__15270.cljs$lang$maxFixedArity = 2;
    G__15270.cljs$lang$applyTo = function(arglist__15271) {
      var a = cljs.core.first(arglist__15271);
      arglist__15271 = cljs.core.next(arglist__15271);
      var f = cljs.core.first(arglist__15271);
      var args = cljs.core.rest(arglist__15271);
      return G__15270__delegate(a, f, args);
    };
    G__15270.cljs$core$IFn$_invoke$arity$variadic = G__15270__delegate;
    return G__15270;
  }();
  swap_pair_BANG_ = function(a, f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return swap_pair_BANG___2.call(this, a, f);
      default:
        return swap_pair_BANG___3.cljs$core$IFn$_invoke$arity$variadic(a, f, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_pair_BANG_.cljs$lang$maxFixedArity = 2;
  swap_pair_BANG_.cljs$lang$applyTo = swap_pair_BANG___3.cljs$lang$applyTo;
  swap_pair_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_pair_BANG___2;
  swap_pair_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_pair_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return swap_pair_BANG_;
}();
plumbing.core.get_and_set_BANG_ = function get_and_set_BANG_(a, new_val) {
  return cljs.core.first.call(null, plumbing.core.swap_pair_BANG_.call(null, a, cljs.core.constantly.call(null, new_val)));
};
plumbing.core.millis = function millis() {
  return(new Date).getTime();
};
plumbing.core.mapply = function() {
  var mapply = null;
  var mapply__2 = function(f, m) {
    return cljs.core.apply.call(null, f, cljs.core.apply.call(null, cljs.core.concat, m));
  };
  var mapply__3 = function() {
    var G__15272__delegate = function(f, arg, args) {
      return cljs.core.apply.call(null, f, arg, cljs.core.concat.call(null, cljs.core.butlast.call(null, args), cljs.core.apply.call(null, cljs.core.concat, cljs.core.last.call(null, args))));
    };
    var G__15272 = function(f, arg, var_args) {
      var args = null;
      if (arguments.length > 2) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15272__delegate.call(this, f, arg, args);
    };
    G__15272.cljs$lang$maxFixedArity = 2;
    G__15272.cljs$lang$applyTo = function(arglist__15273) {
      var f = cljs.core.first(arglist__15273);
      arglist__15273 = cljs.core.next(arglist__15273);
      var arg = cljs.core.first(arglist__15273);
      var args = cljs.core.rest(arglist__15273);
      return G__15272__delegate(f, arg, args);
    };
    G__15272.cljs$core$IFn$_invoke$arity$variadic = G__15272__delegate;
    return G__15272;
  }();
  mapply = function(f, arg, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return mapply__2.call(this, f, arg);
      default:
        return mapply__3.cljs$core$IFn$_invoke$arity$variadic(f, arg, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapply.cljs$lang$maxFixedArity = 2;
  mapply.cljs$lang$applyTo = mapply__3.cljs$lang$applyTo;
  mapply.cljs$core$IFn$_invoke$arity$2 = mapply__2;
  mapply.cljs$core$IFn$_invoke$arity$variadic = mapply__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapply;
}();
goog.provide("om_tools.core");
goog.require("cljs.core");
goog.require("plumbing.core");
goog.require("plumbing.core");
goog.require("plumbing.fnk.schema");
goog.require("om.core");
goog.require("om.core");
om_tools.core.state_proxy = function state_proxy(owner) {
  if (cljs.core.truth_(owner)) {
    var get_state = function() {
      return om.core.get_state.call(null, owner);
    };
    if (typeof om_tools.core.t15032 !== "undefined") {
    } else {
      om_tools.core.t15032 = function(get_state, owner, state_proxy, meta15033) {
        this.get_state = get_state;
        this.owner = owner;
        this.state_proxy = state_proxy;
        this.meta15033 = meta15033;
        this.cljs$lang$protocol_mask$partition1$ = 98304;
        this.cljs$lang$protocol_mask$partition0$ = 425984;
      };
      om_tools.core.t15032.cljs$lang$type = true;
      om_tools.core.t15032.cljs$lang$ctorStr = "om-tools.core/t15032";
      om_tools.core.t15032.cljs$lang$ctorPrWriter = function(get_state) {
        return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
          return cljs.core._write.call(null, writer__4109__auto__, "om-tools.core/t15032");
        };
      }(get_state);
      om_tools.core.t15032.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(get_state) {
        return function(s, f) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, f.call(null, self__.get_state.call(null)));
        };
      }(get_state);
      om_tools.core.t15032.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(get_state) {
        return function(s, f, x) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, f.call(null, self__.get_state.call(null), x));
        };
      }(get_state);
      om_tools.core.t15032.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(get_state) {
        return function(s, f, x, y) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, f.call(null, self__.get_state.call(null), x, y));
        };
      }(get_state);
      om_tools.core.t15032.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(get_state) {
        return function(s, f, x, y, more) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, cljs.core.apply.call(null, f, self__.get_state.call(null), x, y, more));
        };
      }(get_state);
      om_tools.core.t15032.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(get_state) {
        return function(_, v) {
          var self__ = this;
          var ___$1 = this;
          return om.core.set_state_BANG_.call(null, self__.owner, v);
        };
      }(get_state);
      om_tools.core.t15032.prototype.cljs$core$IDeref$_deref$arity$1 = function(get_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.get_state.call(null);
        };
      }(get_state);
      om_tools.core.t15032.prototype.cljs$core$IMeta$_meta$arity$1 = function(get_state) {
        return function(_15034) {
          var self__ = this;
          var _15034__$1 = this;
          return self__.meta15033;
        };
      }(get_state);
      om_tools.core.t15032.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(get_state) {
        return function(_15034, meta15033__$1) {
          var self__ = this;
          var _15034__$1 = this;
          return new om_tools.core.t15032(self__.get_state, self__.owner, self__.state_proxy, meta15033__$1);
        };
      }(get_state);
      om_tools.core.__GT_t15032 = function(get_state) {
        return function __GT_t15032(get_state__$1, owner__$1, state_proxy__$1, meta15033) {
          return new om_tools.core.t15032(get_state__$1, owner__$1, state_proxy__$1, meta15033);
        };
      }(get_state);
    }
    return new om_tools.core.t15032(get_state, owner, state_proxy, null);
  } else {
    return null;
  }
};
om_tools.core.set_state_QMARK__BANG_ = function() {
  var set_state_QMARK__BANG_ = null;
  var set_state_QMARK__BANG___2 = function(owner, v) {
    if (cljs.core._EQ_.call(null, v, om.core.get_state.call(null, owner))) {
      return null;
    } else {
      return om.core.set_state_BANG_.call(null, owner, v);
    }
  };
  var set_state_QMARK__BANG___3 = function(owner, korks, v) {
    if (cljs.core._EQ_.call(null, v, om.core.get_state.call(null, owner, korks))) {
      return null;
    } else {
      return om.core.set_state_BANG_.call(null, owner, korks, v);
    }
  };
  set_state_QMARK__BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return set_state_QMARK__BANG___2.call(this, owner, korks);
      case 3:
        return set_state_QMARK__BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_state_QMARK__BANG_.cljs$core$IFn$_invoke$arity$2 = set_state_QMARK__BANG___2;
  set_state_QMARK__BANG_.cljs$core$IFn$_invoke$arity$3 = set_state_QMARK__BANG___3;
  return set_state_QMARK__BANG_;
}();
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (Math.pow(10, x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = goog.string.startsWith(ua, "Opera");
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && (goog.string.contains(ua, "MSIE") || goog.string.contains(ua, "Trident"));
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && goog.string.contains(ua, "WebKit");
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && goog.string.contains(ua, "Mobile");
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && (!goog.userAgent.detectedIe_ && navigator.product == "Gecko"));
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || (!err.stack || (!err.message || !err.name))))) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("hiccups.runtime");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
hiccups.runtime.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
hiccups.runtime.character_escapes = new cljs.core.PersistentArrayMap(null, 4, ["\x26", "\x26amp;", "\x3c", "\x26lt;", "\x3e", "\x26gt;", '"', "\x26quot;"], null);
hiccups.runtime.container_tags = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 33, ["dd", null, "head", null, "a", null, "b", null, "body", null, "pre", null, "form", null, "iframe", null, "dl", null, "em", null, "fieldset", null, "i", null, "h1", null, "h2", null, "span", null, "h3", null, "script", null, "html", null, "h4", null, "h5", null, "h6", null, "table", null, "dt", null, "div", null, "style", null, "label", null, "option", null, "ul", null, "strong", null, 
"canvas", null, "textarea", null, "li", null, "ol", null], null), null);
hiccups.runtime.as_str = function as_str(x) {
  if (x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol) {
    return cljs.core.name.call(null, x);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
  }
};
hiccups.runtime._STAR_html_mode_STAR_ = new cljs.core.Keyword(null, "xml", "xml", 1014023049);
hiccups.runtime.xml_mode_QMARK_ = function xml_mode_QMARK_() {
  return cljs.core._EQ_.call(null, hiccups.runtime._STAR_html_mode_STAR_, new cljs.core.Keyword(null, "xml", "xml", 1014023049));
};
hiccups.runtime.in_mode = function in_mode(mode, f) {
  var _STAR_html_mode_STAR_20017 = hiccups.runtime._STAR_html_mode_STAR_;
  try {
    hiccups.runtime._STAR_html_mode_STAR_ = mode;
    return f.call(null);
  } finally {
    hiccups.runtime._STAR_html_mode_STAR_ = _STAR_html_mode_STAR_20017;
  }
};
hiccups.runtime.escape_html = function escape_html(text) {
  return clojure.string.escape.call(null, hiccups.runtime.as_str.call(null, text), hiccups.runtime.character_escapes);
};
hiccups.runtime.h = hiccups.runtime.escape_html;
hiccups.runtime.end_tag = function end_tag() {
  if (hiccups.runtime.xml_mode_QMARK_.call(null)) {
    return " /\x3e";
  } else {
    return "\x3e";
  }
};
hiccups.runtime.xml_attribute = function xml_attribute(name, value) {
  return " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.as_str.call(null, name)) + '\x3d"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.escape_html.call(null, value)) + '"';
};
hiccups.runtime.render_attribute = function render_attribute(p__20018) {
  var vec__20020 = p__20018;
  var name = cljs.core.nth.call(null, vec__20020, 0, null);
  var value = cljs.core.nth.call(null, vec__20020, 1, null);
  if (value === true) {
    if (hiccups.runtime.xml_mode_QMARK_.call(null)) {
      return hiccups.runtime.xml_attribute.call(null, name, name);
    } else {
      return " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.as_str.call(null, name));
    }
  } else {
    if (cljs.core.not.call(null, value)) {
      return "";
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return hiccups.runtime.xml_attribute.call(null, name, value);
      } else {
        return null;
      }
    }
  }
};
hiccups.runtime.render_attr_map = function render_attr_map(attrs) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.sort.call(null, cljs.core.map.call(null, hiccups.runtime.render_attribute, attrs)));
};
hiccups.runtime.normalize_element = function normalize_element(p__20021) {
  var vec__20024 = p__20021;
  var tag = cljs.core.nth.call(null, vec__20024, 0, null);
  var content = cljs.core.nthnext.call(null, vec__20024, 1);
  if (!(tag instanceof cljs.core.Keyword || (tag instanceof cljs.core.Symbol || typeof tag === "string"))) {
    throw "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + " is not a valid tag name";
  } else {
  }
  var vec__20025 = cljs.core.re_matches.call(null, hiccups.runtime.re_tag, hiccups.runtime.as_str.call(null, tag));
  var _ = cljs.core.nth.call(null, vec__20025, 0, null);
  var tag__$1 = cljs.core.nth.call(null, vec__20025, 1, null);
  var id = cljs.core.nth.call(null, vec__20025, 2, null);
  var class$ = cljs.core.nth.call(null, vec__20025, 3, null);
  var tag_attrs = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "class", "class", 1108647146), cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, ".", " ") : null], null);
  var map_attrs = cljs.core.first.call(null, content);
  if (cljs.core.map_QMARK_.call(null, map_attrs)) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, cljs.core.merge.call(null, tag_attrs, map_attrs), cljs.core.next.call(null, content)], null);
  } else {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, tag_attrs, content], null);
  }
};
hiccups.runtime.render_element = function render_element(element) {
  var vec__20027 = hiccups.runtime.normalize_element.call(null, element);
  var tag = cljs.core.nth.call(null, vec__20027, 0, null);
  var attrs = cljs.core.nth.call(null, vec__20027, 1, null);
  var content = cljs.core.nth.call(null, vec__20027, 2, null);
  if (cljs.core.truth_(function() {
    var or__3541__auto__ = content;
    if (cljs.core.truth_(or__3541__auto__)) {
      return or__3541__auto__;
    } else {
      return hiccups.runtime.container_tags.call(null, tag);
    }
  }())) {
    return "\x3c" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_attr_map.call(null, attrs)) + "\x3e" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_html.call(null, content)) + "\x3c/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "\x3e";
  } else {
    return "\x3c" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_attr_map.call(null, attrs)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.end_tag.call(null));
  }
};
hiccups.runtime.render_html = function render_html(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return hiccups.runtime.render_element.call(null, x);
  } else {
    if (cljs.core.seq_QMARK_.call(null, x)) {
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, render_html, x));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return hiccups.runtime.as_str.call(null, x);
      } else {
        return null;
      }
    }
  }
};
goog.provide("om_tools.dom");
goog.require("cljs.core");
goog.require("om.dom");
goog.require("clojure.string");
goog.require("clojure.string");
om_tools.dom.camel_case = function camel_case(s) {
  return clojure.string.replace.call(null, s, /-(\w)/, cljs.core.comp.call(null, clojure.string.upper_case, cljs.core.second));
};
om_tools.dom.opt_key_case = function opt_key_case(attr) {
  if (cljs.core.truth_(function() {
    var or__3541__auto__ = cljs.core.count.call(null, attr) < 5;
    if (or__3541__auto__) {
      return or__3541__auto__;
    } else {
      return(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["data-", null, "aria-", null], null), null)).call(null, cljs.core.subs.call(null, attr, 0, 5));
    }
  }())) {
    return attr;
  } else {
    return om_tools.dom.camel_case.call(null, attr);
  }
};
om_tools.dom.opt_key_alias = function opt_key_alias(opt) {
  var G__17246 = opt instanceof cljs.core.Keyword ? opt.fqn : null;
  var caseval__17247;
  switch(G__17246) {
    case "for":
      caseval__17247 = new cljs.core.Keyword(null, "htmlFor", "htmlFor", 2249940112);
      break;
    case "class":
      caseval__17247 = new cljs.core.Keyword(null, "className", "className", 1004015509);
      break;
    default:
      caseval__17247 = opt;
  }
  return caseval__17247;
};
om_tools.dom.format_opt_key = function format_opt_key(opt_key) {
  return cljs.core.keyword.call(null, om_tools.dom.opt_key_case.call(null, cljs.core.name.call(null, om_tools.dom.opt_key_alias.call(null, opt_key))));
};
om_tools.dom.format_opt_val = function format_opt_val(opt_val) {
  if (cljs.core.map_QMARK_.call(null, opt_val)) {
    return cljs.core.clj__GT_js.call(null, opt_val);
  } else {
    return opt_val;
  }
};
om_tools.dom.format_opts = function format_opts(opts) {
  return cljs.core.clj__GT_js.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__17250) {
    var vec__17251 = p__17250;
    var k = cljs.core.nth.call(null, vec__17251, 0, null);
    var v = cljs.core.nth.call(null, vec__17251, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [om_tools.dom.format_opt_key.call(null, k), om_tools.dom.format_opt_val.call(null, v)], null);
  }, opts)));
};
om_tools.dom.literal_QMARK_ = function literal_QMARK_(form) {
  return!(form instanceof cljs.core.Symbol || cljs.core.list_QMARK_.call(null, form));
};
om_tools.dom.possible_coll_QMARK_ = function possible_coll_QMARK_(form) {
  return cljs.core.coll_QMARK_.call(null, form) || (form instanceof cljs.core.Symbol || cljs.core.list_QMARK_.call(null, form));
};
om_tools.dom.form_tags = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "input", "input", -1540173437, null), new cljs.core.Symbol(null, "textarea", "textarea", 1651192051, null), new cljs.core.Symbol(null, "option", "option", 1644298798, null)], null);
om_tools.dom.el_ctor = function el_ctor(tag) {
  if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.partial.call(null, cljs.core._EQ_, tag), om_tools.dom.form_tags))) {
    return cljs.core.symbol.call(null, "om.dom", cljs.core.name.call(null, tag));
  } else {
    return cljs.core.symbol.call(null, "js", "React.DOM." + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, tag)));
  }
};
om_tools.dom.element_args = function element_args(opts, children) {
  if (opts == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, children], null);
  } else {
    if (cljs.core.map_QMARK_.call(null, opts)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [om_tools.dom.format_opts.call(null, opts), children], null);
    } else {
      if (cljs.core.object_QMARK_.call(null, opts)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [opts, children], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.cons.call(null, opts, children)], null);
        } else {
          return null;
        }
      }
    }
  }
};
om_tools.dom.element = function element(ctor, opts, children) {
  var vec__17253 = om_tools.dom.element_args.call(null, opts, children);
  var opts__$1 = cljs.core.nth.call(null, vec__17253, 0, null);
  var children__$1 = cljs.core.nth.call(null, vec__17253, 1, null);
  return cljs.core.apply.call(null, ctor, cljs.core.flatten.call(null, cljs.core.cons.call(null, opts__$1, children__$1)));
};
om_tools.dom.class_set = function class_set(m) {
  var temp__4092__auto__ = cljs.core.seq.call(null, cljs.core.distinct.call(null, cljs.core.map.call(null, cljs.core.name, cljs.core.keys.call(null, cljs.core.filter.call(null, cljs.core.val, m)))));
  if (temp__4092__auto__) {
    var ks = temp__4092__auto__;
    return clojure.string.join.call(null, " ", ks);
  } else {
    return null;
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj19931 = {};
  return obj19931;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3529__auto__ = port;
    if (and__3529__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4168__auto__ = port == null ? null : port;
    return function() {
      var or__3541__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj19933 = {};
  return obj19933;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3529__auto__ = port;
    if (and__3529__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4168__auto__ = port == null ? null : port;
    return function() {
      var or__3541__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj19935 = {};
  return obj19935;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3529__auto__ = chan;
    if (and__3529__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4168__auto__ = chan == null ? null : chan;
    return function() {
      var or__3541__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3529__auto__ = chan;
    if (and__3529__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4168__auto__ = chan == null ? null : chan;
    return function() {
      var or__3541__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj19937 = {};
  return obj19937;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3529__auto__ = h;
    if (and__3529__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4168__auto__ = h == null ? null : h;
    return function() {
      var or__3541__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3529__auto__ = h;
    if (and__3529__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4168__auto__ = h == null ? null : h;
    return function() {
      var or__3541__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj19939 = {};
  return obj19939;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3529__auto__ = b;
    if (and__3529__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4168__auto__ = b == null ? null : b;
    return function() {
      var or__3541__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3529__auto__ = b;
    if (and__3529__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4168__auto__ = b == null ? null : b;
    return function() {
      var or__3541__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3529__auto__ = b;
    if (and__3529__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4168__auto__ = b == null ? null : b;
    return function() {
      var or__3541__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj19941 = {};
  return obj19941;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t19964 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t19964 = function(f, fn_handler, meta19965) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta19965 = meta19965;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t19964.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t19964.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t19964";
    cljs.core.async.impl.ioc_helpers.t19964.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
      return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async.impl.ioc-helpers/t19964");
    };
    cljs.core.async.impl.ioc_helpers.t19964.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t19964.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t19964.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t19964.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19966) {
      var self__ = this;
      var _19966__$1 = this;
      return self__.meta19965;
    };
    cljs.core.async.impl.ioc_helpers.t19964.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19966, meta19965__$1) {
      var self__ = this;
      var _19966__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t19964(self__.f, self__.fn_handler, meta19965__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t19964 = function __GT_t19964(f__$1, fn_handler__$1, meta19965) {
      return new cljs.core.async.impl.ioc_helpers.t19964(f__$1, fn_handler__$1, meta19965);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t19964(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e19968) {
    if (e19968 instanceof Object) {
      var ex = e19968;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e19968;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_19971_19973 = state;
    statearr_19971_19973[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_19971_19973[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_19972_19974 = state;
    statearr_19972_19974[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_19972_19974[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_19977_19979 = state;
    statearr_19977_19979[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_19977_19979[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_19978_19980 = state;
    statearr_19978_19980[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_19978_19980[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__19981) {
    var map__19986 = p__19981;
    var map__19986__$1 = cljs.core.seq_QMARK_.call(null, map__19986) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19986) : map__19986;
    var opts = map__19986__$1;
    var statearr_19987_19990 = state;
    statearr_19987_19990[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(map__19986, map__19986__$1, opts) {
      return function(val) {
        var statearr_19988_19991 = state;
        statearr_19988_19991[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__19986, map__19986__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_19989_19992 = state;
      statearr_19989_19992[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__19981 = null;
    if (arguments.length > 3) {
      p__19981 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__19981);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__19993) {
    var state = cljs.core.first(arglist__19993);
    arglist__19993 = cljs.core.next(arglist__19993);
    var cont_block = cljs.core.first(arglist__19993);
    arglist__19993 = cljs.core.next(arglist__19993);
    var ports = cljs.core.first(arglist__19993);
    var p__19981 = cljs.core.rest(arglist__19993);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__19981);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4122__auto__) {
  var self__ = this;
  var this__4122__auto____$1 = this;
  var h__3952__auto__ = self__.__hash;
  if (!(h__3952__auto__ == null)) {
    return h__3952__auto__;
  } else {
    var h__3952__auto____$1 = cljs.core.hash_imap.call(null, this__4122__auto____$1);
    self__.__hash = h__3952__auto____$1;
    return h__3952__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4127__auto__, k__4128__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4127__auto____$1, k__4128__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4129__auto__, k19995, else__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  var G__19997 = k19995 instanceof cljs.core.Keyword ? k19995.fqn : null;
  var caseval__20001;
  switch(G__19997) {
    case "prev":
      caseval__20001 = self__.prev;
      break;
    case "continue-block":
      caseval__20001 = self__.continue_block;
      break;
    case "finally-block":
      caseval__20001 = self__.finally_block;
      break;
    case "catch-exception":
      caseval__20001 = self__.catch_exception;
      break;
    case "catch-block":
      caseval__20001 = self__.catch_block;
      break;
    default:
      caseval__20001 = cljs.core.get.call(null, self__.__extmap, k19995, else__4130__auto__);
  }
  return caseval__20001;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4134__auto__, k__4135__auto__, G__19994) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  var pred__19998 = cljs.core.keyword_identical_QMARK_;
  var expr__19999 = k__4135__auto__;
  if (cljs.core.truth_(pred__19998.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), expr__19999))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__19994, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__19998.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), expr__19999))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__19994, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__19998.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), expr__19999))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__19994, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__19998.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), expr__19999))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__19994, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__19998.call(null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), expr__19999))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__19994, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4135__auto__, G__19994), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4141__auto__, writer__4142__auto__, opts__4143__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  var pr_pair__4144__auto__ = function(this__4141__auto____$1) {
    return function(keyval__4145__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, cljs.core.pr_writer, "", " ", "", opts__4143__auto__, keyval__4145__auto__);
    };
  }(this__4141__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4142__auto__, pr_pair__4144__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4143__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4132__auto__, entry__4133__auto__) {
  var self__ = this;
  var this__4132__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4133__auto__)) {
    return cljs.core._assoc.call(null, this__4132__auto____$1, cljs.core._nth.call(null, entry__4133__auto__, 0), cljs.core._nth.call(null, entry__4133__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4132__auto____$1, entry__4133__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4139__auto__) {
  var self__ = this;
  var this__4139__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4131__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4123__auto__, other__4124__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = other__4124__auto__;
    if (cljs.core.truth_(and__3529__auto__)) {
      return this__4123__auto____$1.constructor === other__4124__auto__.constructor && cljs.core.equiv_map.call(null, this__4123__auto____$1, other__4124__auto__);
    } else {
      return and__3529__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4126__auto__, G__19994) {
  var self__ = this;
  var this__4126__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__19994, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4121__auto__) {
  var self__ = this;
  var this__4121__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4125__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4136__auto__, k__4137__auto__) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), 
  null], null), null), k__4137__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4136__auto____$1), self__.__meta), k__4137__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4137__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4161__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4161__auto__, writer__4162__auto__) {
  return cljs.core._write.call(null, writer__4162__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__19996) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(G__19996), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(G__19996), (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(G__19996), (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(G__19996), 
  (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(G__19996), null, cljs.core.dissoc.call(null, G__19996, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), new cljs.core.Keyword(null, "prev", "prev", 1017353637)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_20003 = state;
  statearr_20003[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_20003;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3529__auto__ = exception;
      if (cljs.core.truth_(and__3529__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3529__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3529__auto__ = exception;
        if (cljs.core.truth_(and__3529__auto__)) {
          var and__3529__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3529__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3529__auto____$1;
          }
        } else {
          return and__3529__auto__;
        }
      }())) {
        var statearr_20009 = state;
        statearr_20009[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_20009[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_20009[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_20009[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null);
        return statearr_20009;
      } else {
        if (cljs.core.truth_(function() {
          var and__3529__auto__ = exception;
          if (cljs.core.truth_(and__3529__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3529__auto__;
          }
        }())) {
          var statearr_20010_20014 = state;
          statearr_20010_20014[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__20015 = state;
          state = G__20015;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3529__auto__ = exception;
            if (cljs.core.truth_(and__3529__auto__)) {
              var and__3529__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3529__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3529__auto____$1;
              }
            } else {
              return and__3529__auto__;
            }
          }())) {
            var statearr_20011 = state;
            statearr_20011[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_20011[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
            return statearr_20011;
          } else {
            if (cljs.core.truth_(function() {
              var and__3529__auto__ = cljs.core.not.call(null, exception);
              if (and__3529__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3529__auto__;
              }
            }())) {
              var statearr_20012 = state;
              statearr_20012[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_20012[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
              return statearr_20012;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_20013 = state;
                statearr_20013[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_20013[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_20013;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error("Assert failed: No matching clause\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, false)));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__19958 = cnt + 1;
      cnt = G__19958;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4397__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4397__auto__) {
      var v_19959 = this$.pop();
      if (keep_QMARK_.call(null, v_19959)) {
        this$.unshift(v_19959);
      } else {
      }
      var G__19960 = x + 1;
      x = G__19960;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error("Assert failed: Can't add to a full buffer\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null))))));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_19942 = 0;
  while (true) {
    var m_19943 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_19943 == null) {
    } else {
      m_19943.call(null);
      if (count_19942 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__19944 = count_19942 + 1;
        count_19942 = G__19944;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3529__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3529__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3529__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t19948 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t19948 = function(val, box, meta19949) {
      this.val = val;
      this.box = box;
      this.meta19949 = meta19949;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t19948.cljs$lang$type = true;
    cljs.core.async.impl.channels.t19948.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t19948";
    cljs.core.async.impl.channels.t19948.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
      return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async.impl.channels/t19948");
    };
    cljs.core.async.impl.channels.t19948.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t19948.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19950) {
      var self__ = this;
      var _19950__$1 = this;
      return self__.meta19949;
    };
    cljs.core.async.impl.channels.t19948.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19950, meta19949__$1) {
      var self__ = this;
      var _19950__$1 = this;
      return new cljs.core.async.impl.channels.t19948(self__.val, self__.box, meta19949__$1);
    };
    cljs.core.async.impl.channels.__GT_t19948 = function __GT_t19948(val__$1, box__$1, meta19949) {
      return new cljs.core.async.impl.channels.t19948(val__$1, box__$1, meta19949);
    };
  }
  return new cljs.core.async.impl.channels.t19948(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4111__auto__, writer__4112__auto__, opts__4113__auto__) {
  return cljs.core._write.call(null, writer__4112__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_19951 = self__.takes.pop();
      if (taker_19951 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_19951)) {
          var take_cb_19952 = cljs.core.async.impl.protocols.commit.call(null, taker_19951);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_19952, taker_19951, this$__$1) {
            return function() {
              return take_cb_19952.call(null, null);
            };
          }(take_cb_19952, taker_19951, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        var putter_19953 = self__.puts.pop();
        if (!(putter_19953 == null)) {
          var put_handler_19954 = putter_19953.handler;
          var val_19955 = putter_19953.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_19954)) {
            var put_cb_19956 = cljs.core.async.impl.protocols.commit.call(null, put_handler_19954);
            var __19957__$1 = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb_19956, __19957__$1, put_handler_19954, val_19955, putter_19953, _, retval, this$__$1) {
              return function() {
                return put_cb_19956.call(null, true);
              };
            }(put_cb_19956, __19957__$1, put_handler_19954, val_19955, putter_19953, _, retval, this$__$1));
            cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val_19955);
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      return retval;
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb, _, put_handler, val, putter, this$__$1) {
              return function() {
                return put_cb.call(null, true);
              };
            }(put_cb, _, put_handler, val, putter, this$__$1));
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null)))));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null)))));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__19906 = level + 1;
        level = G__19906;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_19907 = 0;
    while (true) {
      if (i_19907 < arr.length) {
        arr[i_19907] = null;
        var G__19908 = i_19907 + 1;
        i_19907 = G__19908;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__19909 = x_SINGLEQUOTE_;
                x__$1 = G__19909;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__19910 = x__$1;
        var G__19911 = k;
        var G__19912 = level - 1;
        var G__19913 = update;
        x = G__19910;
        k = G__19911;
        level = G__19912;
        update = G__19913;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_19914 = self__.level + 1;
      while (true) {
        if (i_19914 <= new_level + 1) {
          update[i_19914] = self__.header;
          var G__19915 = i_19914 + 1;
          i_19914 = G__19915;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_19916 = 0;
    while (true) {
      if (i_19916 <= self__.level) {
        var links_19917 = update[i_19916].forward;
        if (links_19917[i_19916] === x__$1) {
          links_19917[i_19916] = x__$1.forward[i_19916];
          var G__19918 = i_19916 + 1;
          i_19916 = G__19918;
          continue;
        } else {
          var G__19919 = i_19916 + 1;
          i_19916 = G__19919;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__19920 = x_SINGLEQUOTE_;
              x__$1 = G__19920;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__19921 = nx;
        var G__19922 = level__$1 - 1;
        x = G__19921;
        level__$1 = G__19922;
        continue;
      } else {
        var G__19923 = x;
        var G__19924 = level__$1 - 1;
        x = G__19923;
        level__$1 = G__19924;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__19925 = x_SINGLEQUOTE_;
              x__$1 = G__19925;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__19926 = nx;
        var G__19927 = level__$1 - 1;
        x = G__19926;
        level__$1 = G__19927;
        continue;
      } else {
        var G__19928 = x;
        var G__19929 = level__$1 - 1;
        x = G__19928;
        level__$1 = G__19929;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3541__auto__ = cljs.core.truth_(function() {
    var and__3529__auto__ = me;
    if (cljs.core.truth_(and__3529__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3529__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3541__auto__)) {
    return or__3541__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3541__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3541__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t17257 !== "undefined") {
  } else {
    cljs.core.async.t17257 = function(f, fn_handler, meta17258) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta17258 = meta17258;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17257.cljs$lang$type = true;
    cljs.core.async.t17257.cljs$lang$ctorStr = "cljs.core.async/t17257";
    cljs.core.async.t17257.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
      return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async/t17257");
    };
    cljs.core.async.t17257.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17257.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t17257.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t17257.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17259) {
      var self__ = this;
      var _17259__$1 = this;
      return self__.meta17258;
    };
    cljs.core.async.t17257.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17259, meta17258__$1) {
      var self__ = this;
      var _17259__$1 = this;
      return new cljs.core.async.t17257(self__.f, self__.fn_handler, meta17258__$1);
    };
    cljs.core.async.__GT_t17257 = function __GT_t17257(f__$1, fn_handler__$1, meta17258) {
      return new cljs.core.async.t17257(f__$1, fn_handler__$1, meta17258);
    };
  }
  return new cljs.core.async.t17257(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__17261 = buff;
  if (G__17261) {
    var bit__4191__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3541__auto__ = bit__4191__auto__;
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return G__17261.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__17261.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__17261);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__17261);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3c! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_17262 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_17262);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_17262, ret) {
          return function() {
            return fn1.call(null, val_17262);
          };
        }(val_17262, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3e! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var ret = temp__4090__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4090__auto__)) {
      var retb = temp__4090__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4090__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4090__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4397__auto___17263 = n;
  var x_17264 = 0;
  while (true) {
    if (x_17264 < n__4397__auto___17263) {
      a[x_17264] = 0;
      var G__17265 = x_17264 + 1;
      x_17264 = G__17265;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__17266 = i + 1;
      i = G__17266;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t17270 !== "undefined") {
  } else {
    cljs.core.async.t17270 = function(flag, alt_flag, meta17271) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta17271 = meta17271;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17270.cljs$lang$type = true;
    cljs.core.async.t17270.cljs$lang$ctorStr = "cljs.core.async/t17270";
    cljs.core.async.t17270.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
        return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async/t17270");
      };
    }(flag);
    cljs.core.async.t17270.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17270.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t17270.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t17270.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_17272) {
        var self__ = this;
        var _17272__$1 = this;
        return self__.meta17271;
      };
    }(flag);
    cljs.core.async.t17270.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_17272, meta17271__$1) {
        var self__ = this;
        var _17272__$1 = this;
        return new cljs.core.async.t17270(self__.flag, self__.alt_flag, meta17271__$1);
      };
    }(flag);
    cljs.core.async.__GT_t17270 = function(flag) {
      return function __GT_t17270(flag__$1, alt_flag__$1, meta17271) {
        return new cljs.core.async.t17270(flag__$1, alt_flag__$1, meta17271);
      };
    }(flag);
  }
  return new cljs.core.async.t17270(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t17276 !== "undefined") {
  } else {
    cljs.core.async.t17276 = function(cb, flag, alt_handler, meta17277) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta17277 = meta17277;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17276.cljs$lang$type = true;
    cljs.core.async.t17276.cljs$lang$ctorStr = "cljs.core.async/t17276";
    cljs.core.async.t17276.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
      return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async/t17276");
    };
    cljs.core.async.t17276.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17276.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t17276.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t17276.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17278) {
      var self__ = this;
      var _17278__$1 = this;
      return self__.meta17277;
    };
    cljs.core.async.t17276.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17278, meta17277__$1) {
      var self__ = this;
      var _17278__$1 = this;
      return new cljs.core.async.t17276(self__.cb, self__.flag, self__.alt_handler, meta17277__$1);
    };
    cljs.core.async.__GT_t17276 = function __GT_t17276(cb__$1, flag__$1, alt_handler__$1, meta17277) {
      return new cljs.core.async.t17276(cb__$1, flag__$1, alt_handler__$1, meta17277);
    };
  }
  return new cljs.core.async.t17276(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__17279_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__17279_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__17280_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__17280_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3541__auto__ = wport;
            if (cljs.core.truth_(or__3541__auto__)) {
              return or__3541__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__17281 = i + 1;
          i = G__17281;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3541__auto__ = ret;
  if (cljs.core.truth_(or__3541__auto__)) {
    return or__3541__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3529__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3529__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3529__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__17282) {
    var map__17284 = p__17282;
    var map__17284__$1 = cljs.core.seq_QMARK_.call(null, map__17284) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17284) : map__17284;
    var opts = map__17284__$1;
    if (null) {
      return null;
    } else {
      throw new Error("Assert failed: alts! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__17282 = null;
    if (arguments.length > 1) {
      p__17282 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__17282);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__17285) {
    var ports = cljs.core.first(arglist__17285);
    var p__17282 = cljs.core.rest(arglist__17285);
    return alts_BANG___delegate(ports, p__17282);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t17293 !== "undefined") {
  } else {
    cljs.core.async.t17293 = function(ch, f, map_LT_, meta17294) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta17294 = meta17294;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17293.cljs$lang$type = true;
    cljs.core.async.t17293.cljs$lang$ctorStr = "cljs.core.async/t17293";
    cljs.core.async.t17293.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
      return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async/t17293");
    };
    cljs.core.async.t17293.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17293.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t17293.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17293.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t17296 !== "undefined") {
        } else {
          cljs.core.async.t17296 = function(fn1, _, meta17294, ch, f, map_LT_, meta17297) {
            this.fn1 = fn1;
            this._ = _;
            this.meta17294 = meta17294;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta17297 = meta17297;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t17296.cljs$lang$type = true;
          cljs.core.async.t17296.cljs$lang$ctorStr = "cljs.core.async/t17296";
          cljs.core.async.t17296.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async/t17296");
            };
          }(___$1);
          cljs.core.async.t17296.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t17296.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t17296.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t17296.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__17286_SHARP_) {
                  return f1.call(null, p1__17286_SHARP_ == null ? null : self__.f.call(null, p1__17286_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t17296.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_17298) {
              var self__ = this;
              var _17298__$1 = this;
              return self__.meta17297;
            };
          }(___$1);
          cljs.core.async.t17296.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_17298, meta17297__$1) {
              var self__ = this;
              var _17298__$1 = this;
              return new cljs.core.async.t17296(self__.fn1, self__._, self__.meta17294, self__.ch, self__.f, self__.map_LT_, meta17297__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t17296 = function(___$1) {
            return function __GT_t17296(fn1__$1, ___$2, meta17294__$1, ch__$2, f__$2, map_LT___$2, meta17297) {
              return new cljs.core.async.t17296(fn1__$1, ___$2, meta17294__$1, ch__$2, f__$2, map_LT___$2, meta17297);
            };
          }(___$1);
        }
        return new cljs.core.async.t17296(fn1, ___$1, self__.meta17294, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3529__auto__ = ret;
        if (cljs.core.truth_(and__3529__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3529__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t17293.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17293.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17293.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t17293.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17295) {
      var self__ = this;
      var _17295__$1 = this;
      return self__.meta17294;
    };
    cljs.core.async.t17293.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17295, meta17294__$1) {
      var self__ = this;
      var _17295__$1 = this;
      return new cljs.core.async.t17293(self__.ch, self__.f, self__.map_LT_, meta17294__$1);
    };
    cljs.core.async.__GT_t17293 = function __GT_t17293(ch__$1, f__$1, map_LT___$1, meta17294) {
      return new cljs.core.async.t17293(ch__$1, f__$1, map_LT___$1, meta17294);
    };
  }
  return new cljs.core.async.t17293(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t17302 !== "undefined") {
  } else {
    cljs.core.async.t17302 = function(ch, f, map_GT_, meta17303) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta17303 = meta17303;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17302.cljs$lang$type = true;
    cljs.core.async.t17302.cljs$lang$ctorStr = "cljs.core.async/t17302";
    cljs.core.async.t17302.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
      return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async/t17302");
    };
    cljs.core.async.t17302.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17302.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t17302.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17302.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t17302.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17302.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17302.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17304) {
      var self__ = this;
      var _17304__$1 = this;
      return self__.meta17303;
    };
    cljs.core.async.t17302.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17304, meta17303__$1) {
      var self__ = this;
      var _17304__$1 = this;
      return new cljs.core.async.t17302(self__.ch, self__.f, self__.map_GT_, meta17303__$1);
    };
    cljs.core.async.__GT_t17302 = function __GT_t17302(ch__$1, f__$1, map_GT___$1, meta17303) {
      return new cljs.core.async.t17302(ch__$1, f__$1, map_GT___$1, meta17303);
    };
  }
  return new cljs.core.async.t17302(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t17308 !== "undefined") {
  } else {
    cljs.core.async.t17308 = function(ch, p, filter_GT_, meta17309) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta17309 = meta17309;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17308.cljs$lang$type = true;
    cljs.core.async.t17308.cljs$lang$ctorStr = "cljs.core.async/t17308";
    cljs.core.async.t17308.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
      return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async/t17308");
    };
    cljs.core.async.t17308.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17308.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t17308.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17308.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t17308.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17308.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17308.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t17308.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17310) {
      var self__ = this;
      var _17310__$1 = this;
      return self__.meta17309;
    };
    cljs.core.async.t17308.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17310, meta17309__$1) {
      var self__ = this;
      var _17310__$1 = this;
      return new cljs.core.async.t17308(self__.ch, self__.p, self__.filter_GT_, meta17309__$1);
    };
    cljs.core.async.__GT_t17308 = function __GT_t17308(ch__$1, p__$1, filter_GT___$1, meta17309) {
      return new cljs.core.async.t17308(ch__$1, p__$1, filter_GT___$1, meta17309);
    };
  }
  return new cljs.core.async.t17308(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10470__auto___17393 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___17393, out) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto___17393, out) {
            return function(state_17372) {
              var state_val_17373 = state_17372[1];
              if (state_val_17373 === 1) {
                var state_17372__$1 = state_17372;
                var statearr_17374_17394 = state_17372__$1;
                statearr_17374_17394[2] = null;
                statearr_17374_17394[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_17373 === 2) {
                  var state_17372__$1 = state_17372;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17372__$1, 4, ch);
                } else {
                  if (state_val_17373 === 3) {
                    var inst_17370 = state_17372[2];
                    var state_17372__$1 = state_17372;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17372__$1, inst_17370);
                  } else {
                    if (state_val_17373 === 4) {
                      var inst_17354 = state_17372[7];
                      var inst_17354__$1 = state_17372[2];
                      var inst_17355 = inst_17354__$1 == null;
                      var state_17372__$1 = function() {
                        var statearr_17375 = state_17372;
                        statearr_17375[7] = inst_17354__$1;
                        return statearr_17375;
                      }();
                      if (cljs.core.truth_(inst_17355)) {
                        var statearr_17376_17395 = state_17372__$1;
                        statearr_17376_17395[1] = 5;
                      } else {
                        var statearr_17377_17396 = state_17372__$1;
                        statearr_17377_17396[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17373 === 5) {
                        var inst_17357 = cljs.core.async.close_BANG_.call(null, out);
                        var state_17372__$1 = state_17372;
                        var statearr_17378_17397 = state_17372__$1;
                        statearr_17378_17397[2] = inst_17357;
                        statearr_17378_17397[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17373 === 6) {
                          var inst_17354 = state_17372[7];
                          var inst_17359 = p.call(null, inst_17354);
                          var state_17372__$1 = state_17372;
                          if (cljs.core.truth_(inst_17359)) {
                            var statearr_17379_17398 = state_17372__$1;
                            statearr_17379_17398[1] = 8;
                          } else {
                            var statearr_17380_17399 = state_17372__$1;
                            statearr_17380_17399[1] = 9;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17373 === 7) {
                            var inst_17368 = state_17372[2];
                            var state_17372__$1 = state_17372;
                            var statearr_17381_17400 = state_17372__$1;
                            statearr_17381_17400[2] = inst_17368;
                            statearr_17381_17400[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17373 === 8) {
                              var inst_17354 = state_17372[7];
                              var state_17372__$1 = state_17372;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17372__$1, 11, out, inst_17354);
                            } else {
                              if (state_val_17373 === 9) {
                                var state_17372__$1 = state_17372;
                                var statearr_17382_17401 = state_17372__$1;
                                statearr_17382_17401[2] = null;
                                statearr_17382_17401[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_17373 === 10) {
                                  var inst_17365 = state_17372[2];
                                  var state_17372__$1 = function() {
                                    var statearr_17383 = state_17372;
                                    statearr_17383[8] = inst_17365;
                                    return statearr_17383;
                                  }();
                                  var statearr_17384_17402 = state_17372__$1;
                                  statearr_17384_17402[2] = null;
                                  statearr_17384_17402[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17373 === 11) {
                                    var inst_17362 = state_17372[2];
                                    var state_17372__$1 = state_17372;
                                    var statearr_17385_17403 = state_17372__$1;
                                    statearr_17385_17403[2] = inst_17362;
                                    statearr_17385_17403[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto___17393, out);
          return function(switch__10455__auto__, c__10470__auto___17393, out) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_17389 = [null, null, null, null, null, null, null, null, null];
                statearr_17389[0] = state_machine__10456__auto__;
                statearr_17389[1] = 1;
                return statearr_17389;
              };
              var state_machine__10456__auto____1 = function(state_17372) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_17372);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e17390) {
                      if (e17390 instanceof Object) {
                        var ex__10459__auto__ = e17390;
                        var statearr_17391_17404 = state_17372;
                        statearr_17391_17404[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17372);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e17390;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__17405 = state_17372;
                    state_17372 = G__17405;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_17372) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_17372);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto___17393, out);
        }();
        var state__10472__auto__ = function() {
          var statearr_17392 = f__10471__auto__.call(null);
          statearr_17392[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___17393;
          return statearr_17392;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto___17393, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto__) {
          return function(state_17571) {
            var state_val_17572 = state_17571[1];
            if (state_val_17572 === 1) {
              var state_17571__$1 = state_17571;
              var statearr_17573_17614 = state_17571__$1;
              statearr_17573_17614[2] = null;
              statearr_17573_17614[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_17572 === 2) {
                var state_17571__$1 = state_17571;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17571__$1, 4, in$);
              } else {
                if (state_val_17572 === 3) {
                  var inst_17569 = state_17571[2];
                  var state_17571__$1 = state_17571;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17571__$1, inst_17569);
                } else {
                  if (state_val_17572 === 4) {
                    var inst_17512 = state_17571[7];
                    var inst_17512__$1 = state_17571[2];
                    var inst_17513 = inst_17512__$1 == null;
                    var state_17571__$1 = function() {
                      var statearr_17574 = state_17571;
                      statearr_17574[7] = inst_17512__$1;
                      return statearr_17574;
                    }();
                    if (cljs.core.truth_(inst_17513)) {
                      var statearr_17575_17615 = state_17571__$1;
                      statearr_17575_17615[1] = 5;
                    } else {
                      var statearr_17576_17616 = state_17571__$1;
                      statearr_17576_17616[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_17572 === 5) {
                      var inst_17515 = cljs.core.async.close_BANG_.call(null, out);
                      var state_17571__$1 = state_17571;
                      var statearr_17577_17617 = state_17571__$1;
                      statearr_17577_17617[2] = inst_17515;
                      statearr_17577_17617[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17572 === 6) {
                        var inst_17512 = state_17571[7];
                        var inst_17521 = f.call(null, inst_17512);
                        var inst_17522 = cljs.core.seq.call(null, inst_17521);
                        var inst_17523 = inst_17522;
                        var inst_17524 = null;
                        var inst_17525 = 0;
                        var inst_17526 = 0;
                        var state_17571__$1 = function() {
                          var statearr_17578 = state_17571;
                          statearr_17578[8] = inst_17526;
                          statearr_17578[9] = inst_17525;
                          statearr_17578[10] = inst_17524;
                          statearr_17578[11] = inst_17523;
                          return statearr_17578;
                        }();
                        var statearr_17579_17618 = state_17571__$1;
                        statearr_17579_17618[2] = null;
                        statearr_17579_17618[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17572 === 7) {
                          var inst_17567 = state_17571[2];
                          var state_17571__$1 = state_17571;
                          var statearr_17580_17619 = state_17571__$1;
                          statearr_17580_17619[2] = inst_17567;
                          statearr_17580_17619[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17572 === 8) {
                            var inst_17526 = state_17571[8];
                            var inst_17525 = state_17571[9];
                            var inst_17528 = inst_17526 < inst_17525;
                            var inst_17529 = inst_17528;
                            var state_17571__$1 = state_17571;
                            if (cljs.core.truth_(inst_17529)) {
                              var statearr_17581_17620 = state_17571__$1;
                              statearr_17581_17620[1] = 10;
                            } else {
                              var statearr_17582_17621 = state_17571__$1;
                              statearr_17582_17621[1] = 11;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17572 === 9) {
                              var inst_17559 = state_17571[2];
                              var inst_17560 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                              var state_17571__$1 = function() {
                                var statearr_17583 = state_17571;
                                statearr_17583[12] = inst_17559;
                                return statearr_17583;
                              }();
                              if (cljs.core.truth_(inst_17560)) {
                                var statearr_17584_17622 = state_17571__$1;
                                statearr_17584_17622[1] = 21;
                              } else {
                                var statearr_17585_17623 = state_17571__$1;
                                statearr_17585_17623[1] = 22;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17572 === 10) {
                                var inst_17526 = state_17571[8];
                                var inst_17524 = state_17571[10];
                                var inst_17531 = cljs.core._nth.call(null, inst_17524, inst_17526);
                                var state_17571__$1 = state_17571;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17571__$1, 13, out, inst_17531);
                              } else {
                                if (state_val_17572 === 11) {
                                  var inst_17523 = state_17571[11];
                                  var inst_17537 = state_17571[13];
                                  var inst_17537__$1 = cljs.core.seq.call(null, inst_17523);
                                  var state_17571__$1 = function() {
                                    var statearr_17589 = state_17571;
                                    statearr_17589[13] = inst_17537__$1;
                                    return statearr_17589;
                                  }();
                                  if (inst_17537__$1) {
                                    var statearr_17590_17624 = state_17571__$1;
                                    statearr_17590_17624[1] = 14;
                                  } else {
                                    var statearr_17591_17625 = state_17571__$1;
                                    statearr_17591_17625[1] = 15;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17572 === 12) {
                                    var inst_17557 = state_17571[2];
                                    var state_17571__$1 = state_17571;
                                    var statearr_17592_17626 = state_17571__$1;
                                    statearr_17592_17626[2] = inst_17557;
                                    statearr_17592_17626[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_17572 === 13) {
                                      var inst_17526 = state_17571[8];
                                      var inst_17525 = state_17571[9];
                                      var inst_17524 = state_17571[10];
                                      var inst_17523 = state_17571[11];
                                      var inst_17533 = state_17571[2];
                                      var inst_17534 = inst_17526 + 1;
                                      var tmp17586 = inst_17525;
                                      var tmp17587 = inst_17524;
                                      var tmp17588 = inst_17523;
                                      var inst_17523__$1 = tmp17588;
                                      var inst_17524__$1 = tmp17587;
                                      var inst_17525__$1 = tmp17586;
                                      var inst_17526__$1 = inst_17534;
                                      var state_17571__$1 = function() {
                                        var statearr_17593 = state_17571;
                                        statearr_17593[8] = inst_17526__$1;
                                        statearr_17593[9] = inst_17525__$1;
                                        statearr_17593[10] = inst_17524__$1;
                                        statearr_17593[11] = inst_17523__$1;
                                        statearr_17593[14] = inst_17533;
                                        return statearr_17593;
                                      }();
                                      var statearr_17594_17627 = state_17571__$1;
                                      statearr_17594_17627[2] = null;
                                      statearr_17594_17627[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_17572 === 14) {
                                        var inst_17537 = state_17571[13];
                                        var inst_17539 = cljs.core.chunked_seq_QMARK_.call(null, inst_17537);
                                        var state_17571__$1 = state_17571;
                                        if (inst_17539) {
                                          var statearr_17595_17628 = state_17571__$1;
                                          statearr_17595_17628[1] = 17;
                                        } else {
                                          var statearr_17596_17629 = state_17571__$1;
                                          statearr_17596_17629[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17572 === 15) {
                                          var state_17571__$1 = state_17571;
                                          var statearr_17597_17630 = state_17571__$1;
                                          statearr_17597_17630[2] = null;
                                          statearr_17597_17630[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_17572 === 16) {
                                            var inst_17555 = state_17571[2];
                                            var state_17571__$1 = state_17571;
                                            var statearr_17598_17631 = state_17571__$1;
                                            statearr_17598_17631[2] = inst_17555;
                                            statearr_17598_17631[1] = 12;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_17572 === 17) {
                                              var inst_17537 = state_17571[13];
                                              var inst_17541 = cljs.core.chunk_first.call(null, inst_17537);
                                              var inst_17542 = cljs.core.chunk_rest.call(null, inst_17537);
                                              var inst_17543 = cljs.core.count.call(null, inst_17541);
                                              var inst_17523 = inst_17542;
                                              var inst_17524 = inst_17541;
                                              var inst_17525 = inst_17543;
                                              var inst_17526 = 0;
                                              var state_17571__$1 = function() {
                                                var statearr_17599 = state_17571;
                                                statearr_17599[8] = inst_17526;
                                                statearr_17599[9] = inst_17525;
                                                statearr_17599[10] = inst_17524;
                                                statearr_17599[11] = inst_17523;
                                                return statearr_17599;
                                              }();
                                              var statearr_17600_17632 = state_17571__$1;
                                              statearr_17600_17632[2] = null;
                                              statearr_17600_17632[1] = 8;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_17572 === 18) {
                                                var inst_17537 = state_17571[13];
                                                var inst_17546 = cljs.core.first.call(null, inst_17537);
                                                var state_17571__$1 = state_17571;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17571__$1, 20, out, inst_17546);
                                              } else {
                                                if (state_val_17572 === 19) {
                                                  var inst_17552 = state_17571[2];
                                                  var state_17571__$1 = state_17571;
                                                  var statearr_17601_17633 = state_17571__$1;
                                                  statearr_17601_17633[2] = inst_17552;
                                                  statearr_17601_17633[1] = 16;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_17572 === 20) {
                                                    var inst_17537 = state_17571[13];
                                                    var inst_17548 = state_17571[2];
                                                    var inst_17549 = cljs.core.next.call(null, inst_17537);
                                                    var inst_17523 = inst_17549;
                                                    var inst_17524 = null;
                                                    var inst_17525 = 0;
                                                    var inst_17526 = 0;
                                                    var state_17571__$1 = function() {
                                                      var statearr_17602 = state_17571;
                                                      statearr_17602[8] = inst_17526;
                                                      statearr_17602[9] = inst_17525;
                                                      statearr_17602[10] = inst_17524;
                                                      statearr_17602[11] = inst_17523;
                                                      statearr_17602[15] = inst_17548;
                                                      return statearr_17602;
                                                    }();
                                                    var statearr_17603_17634 = state_17571__$1;
                                                    statearr_17603_17634[2] = null;
                                                    statearr_17603_17634[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_17572 === 21) {
                                                      var state_17571__$1 = state_17571;
                                                      var statearr_17604_17635 = state_17571__$1;
                                                      statearr_17604_17635[2] = null;
                                                      statearr_17604_17635[1] = 23;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_17572 === 22) {
                                                        var state_17571__$1 = state_17571;
                                                        var statearr_17605_17636 = state_17571__$1;
                                                        statearr_17605_17636[2] = null;
                                                        statearr_17605_17636[1] = 2;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_17572 === 23) {
                                                          var inst_17565 = state_17571[2];
                                                          var state_17571__$1 = state_17571;
                                                          var statearr_17606_17637 = state_17571__$1;
                                                          statearr_17606_17637[2] = inst_17565;
                                                          statearr_17606_17637[1] = 7;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto__);
        return function(switch__10455__auto__, c__10470__auto__) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_17610 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17610[0] = state_machine__10456__auto__;
              statearr_17610[1] = 1;
              return statearr_17610;
            };
            var state_machine__10456__auto____1 = function(state_17571) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_17571);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e17611) {
                    if (e17611 instanceof Object) {
                      var ex__10459__auto__ = e17611;
                      var statearr_17612_17638 = state_17571;
                      statearr_17612_17638[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17571);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e17611;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__17639 = state_17571;
                  state_17571 = G__17639;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_17571) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_17571);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto__);
      }();
      var state__10472__auto__ = function() {
        var statearr_17613 = f__10471__auto__.call(null);
        statearr_17613[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
        return statearr_17613;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto__));
  return c__10470__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__10470__auto___17734 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___17734) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto___17734) {
            return function(state_17710) {
              var state_val_17711 = state_17710[1];
              if (state_val_17711 === 1) {
                var state_17710__$1 = state_17710;
                var statearr_17712_17735 = state_17710__$1;
                statearr_17712_17735[2] = null;
                statearr_17712_17735[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_17711 === 2) {
                  var state_17710__$1 = state_17710;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17710__$1, 4, from);
                } else {
                  if (state_val_17711 === 3) {
                    var inst_17708 = state_17710[2];
                    var state_17710__$1 = state_17710;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17710__$1, inst_17708);
                  } else {
                    if (state_val_17711 === 4) {
                      var inst_17689 = state_17710[7];
                      var inst_17689__$1 = state_17710[2];
                      var inst_17690 = inst_17689__$1 == null;
                      var state_17710__$1 = function() {
                        var statearr_17713 = state_17710;
                        statearr_17713[7] = inst_17689__$1;
                        return statearr_17713;
                      }();
                      if (cljs.core.truth_(inst_17690)) {
                        var statearr_17714_17736 = state_17710__$1;
                        statearr_17714_17736[1] = 5;
                      } else {
                        var statearr_17715_17737 = state_17710__$1;
                        statearr_17715_17737[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17711 === 5) {
                        var state_17710__$1 = state_17710;
                        if (cljs.core.truth_(close_QMARK_)) {
                          var statearr_17716_17738 = state_17710__$1;
                          statearr_17716_17738[1] = 8;
                        } else {
                          var statearr_17717_17739 = state_17710__$1;
                          statearr_17717_17739[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17711 === 6) {
                          var inst_17689 = state_17710[7];
                          var state_17710__$1 = state_17710;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17710__$1, 11, to, inst_17689);
                        } else {
                          if (state_val_17711 === 7) {
                            var inst_17706 = state_17710[2];
                            var state_17710__$1 = state_17710;
                            var statearr_17718_17740 = state_17710__$1;
                            statearr_17718_17740[2] = inst_17706;
                            statearr_17718_17740[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17711 === 8) {
                              var inst_17693 = cljs.core.async.close_BANG_.call(null, to);
                              var state_17710__$1 = state_17710;
                              var statearr_17719_17741 = state_17710__$1;
                              statearr_17719_17741[2] = inst_17693;
                              statearr_17719_17741[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17711 === 9) {
                                var state_17710__$1 = state_17710;
                                var statearr_17720_17742 = state_17710__$1;
                                statearr_17720_17742[2] = null;
                                statearr_17720_17742[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_17711 === 10) {
                                  var inst_17696 = state_17710[2];
                                  var state_17710__$1 = state_17710;
                                  var statearr_17721_17743 = state_17710__$1;
                                  statearr_17721_17743[2] = inst_17696;
                                  statearr_17721_17743[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17711 === 11) {
                                    var inst_17699 = state_17710[2];
                                    var state_17710__$1 = state_17710;
                                    if (cljs.core.truth_(inst_17699)) {
                                      var statearr_17722_17744 = state_17710__$1;
                                      statearr_17722_17744[1] = 12;
                                    } else {
                                      var statearr_17723_17745 = state_17710__$1;
                                      statearr_17723_17745[1] = 13;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_17711 === 12) {
                                      var state_17710__$1 = state_17710;
                                      var statearr_17724_17746 = state_17710__$1;
                                      statearr_17724_17746[2] = null;
                                      statearr_17724_17746[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_17711 === 13) {
                                        var state_17710__$1 = state_17710;
                                        var statearr_17725_17747 = state_17710__$1;
                                        statearr_17725_17747[2] = null;
                                        statearr_17725_17747[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17711 === 14) {
                                          var inst_17704 = state_17710[2];
                                          var state_17710__$1 = state_17710;
                                          var statearr_17726_17748 = state_17710__$1;
                                          statearr_17726_17748[2] = inst_17704;
                                          statearr_17726_17748[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto___17734);
          return function(switch__10455__auto__, c__10470__auto___17734) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_17730 = [null, null, null, null, null, null, null, null];
                statearr_17730[0] = state_machine__10456__auto__;
                statearr_17730[1] = 1;
                return statearr_17730;
              };
              var state_machine__10456__auto____1 = function(state_17710) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_17710);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e17731) {
                      if (e17731 instanceof Object) {
                        var ex__10459__auto__ = e17731;
                        var statearr_17732_17749 = state_17710;
                        statearr_17732_17749[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17710);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e17731;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__17750 = state_17710;
                    state_17710 = G__17750;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_17710) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_17710);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto___17734);
        }();
        var state__10472__auto__ = function() {
          var statearr_17733 = f__10471__auto__.call(null);
          statearr_17733[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___17734;
          return statearr_17733;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto___17734));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__10470__auto___17851 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___17851, tc, fc) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto___17851, tc, fc) {
            return function(state_17826) {
              var state_val_17827 = state_17826[1];
              if (state_val_17827 === 1) {
                var state_17826__$1 = state_17826;
                var statearr_17828_17852 = state_17826__$1;
                statearr_17828_17852[2] = null;
                statearr_17828_17852[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_17827 === 2) {
                  var state_17826__$1 = state_17826;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17826__$1, 4, ch);
                } else {
                  if (state_val_17827 === 3) {
                    var inst_17824 = state_17826[2];
                    var state_17826__$1 = state_17826;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17826__$1, inst_17824);
                  } else {
                    if (state_val_17827 === 4) {
                      var inst_17803 = state_17826[7];
                      var inst_17803__$1 = state_17826[2];
                      var inst_17804 = inst_17803__$1 == null;
                      var state_17826__$1 = function() {
                        var statearr_17829 = state_17826;
                        statearr_17829[7] = inst_17803__$1;
                        return statearr_17829;
                      }();
                      if (cljs.core.truth_(inst_17804)) {
                        var statearr_17830_17853 = state_17826__$1;
                        statearr_17830_17853[1] = 5;
                      } else {
                        var statearr_17831_17854 = state_17826__$1;
                        statearr_17831_17854[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17827 === 5) {
                        var inst_17806 = cljs.core.async.close_BANG_.call(null, tc);
                        var inst_17807 = cljs.core.async.close_BANG_.call(null, fc);
                        var state_17826__$1 = function() {
                          var statearr_17832 = state_17826;
                          statearr_17832[8] = inst_17806;
                          return statearr_17832;
                        }();
                        var statearr_17833_17855 = state_17826__$1;
                        statearr_17833_17855[2] = inst_17807;
                        statearr_17833_17855[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17827 === 6) {
                          var inst_17803 = state_17826[7];
                          var inst_17809 = p.call(null, inst_17803);
                          var state_17826__$1 = state_17826;
                          if (cljs.core.truth_(inst_17809)) {
                            var statearr_17834_17856 = state_17826__$1;
                            statearr_17834_17856[1] = 9;
                          } else {
                            var statearr_17835_17857 = state_17826__$1;
                            statearr_17835_17857[1] = 10;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17827 === 7) {
                            var inst_17822 = state_17826[2];
                            var state_17826__$1 = state_17826;
                            var statearr_17836_17858 = state_17826__$1;
                            statearr_17836_17858[2] = inst_17822;
                            statearr_17836_17858[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17827 === 8) {
                              var inst_17815 = state_17826[2];
                              var state_17826__$1 = state_17826;
                              if (cljs.core.truth_(inst_17815)) {
                                var statearr_17837_17859 = state_17826__$1;
                                statearr_17837_17859[1] = 12;
                              } else {
                                var statearr_17838_17860 = state_17826__$1;
                                statearr_17838_17860[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17827 === 9) {
                                var state_17826__$1 = state_17826;
                                var statearr_17839_17861 = state_17826__$1;
                                statearr_17839_17861[2] = tc;
                                statearr_17839_17861[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_17827 === 10) {
                                  var state_17826__$1 = state_17826;
                                  var statearr_17840_17862 = state_17826__$1;
                                  statearr_17840_17862[2] = fc;
                                  statearr_17840_17862[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17827 === 11) {
                                    var inst_17803 = state_17826[7];
                                    var inst_17813 = state_17826[2];
                                    var state_17826__$1 = state_17826;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17826__$1, 8, inst_17813, inst_17803);
                                  } else {
                                    if (state_val_17827 === 12) {
                                      var state_17826__$1 = state_17826;
                                      var statearr_17841_17863 = state_17826__$1;
                                      statearr_17841_17863[2] = null;
                                      statearr_17841_17863[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_17827 === 13) {
                                        var state_17826__$1 = state_17826;
                                        var statearr_17842_17864 = state_17826__$1;
                                        statearr_17842_17864[2] = null;
                                        statearr_17842_17864[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17827 === 14) {
                                          var inst_17820 = state_17826[2];
                                          var state_17826__$1 = state_17826;
                                          var statearr_17843_17865 = state_17826__$1;
                                          statearr_17843_17865[2] = inst_17820;
                                          statearr_17843_17865[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto___17851, tc, fc);
          return function(switch__10455__auto__, c__10470__auto___17851, tc, fc) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_17847 = [null, null, null, null, null, null, null, null, null];
                statearr_17847[0] = state_machine__10456__auto__;
                statearr_17847[1] = 1;
                return statearr_17847;
              };
              var state_machine__10456__auto____1 = function(state_17826) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_17826);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e17848) {
                      if (e17848 instanceof Object) {
                        var ex__10459__auto__ = e17848;
                        var statearr_17849_17866 = state_17826;
                        statearr_17849_17866[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17826);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e17848;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__17867 = state_17826;
                    state_17826 = G__17867;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_17826) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_17826);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto___17851, tc, fc);
        }();
        var state__10472__auto__ = function() {
          var statearr_17850 = f__10471__auto__.call(null);
          statearr_17850[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___17851;
          return statearr_17850;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto___17851, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto__) {
          return function(state_17914) {
            var state_val_17915 = state_17914[1];
            if (state_val_17915 === 7) {
              var inst_17910 = state_17914[2];
              var state_17914__$1 = state_17914;
              var statearr_17916_17932 = state_17914__$1;
              statearr_17916_17932[2] = inst_17910;
              statearr_17916_17932[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_17915 === 6) {
                var inst_17903 = state_17914[7];
                var inst_17900 = state_17914[8];
                var inst_17907 = f.call(null, inst_17900, inst_17903);
                var inst_17900__$1 = inst_17907;
                var state_17914__$1 = function() {
                  var statearr_17917 = state_17914;
                  statearr_17917[8] = inst_17900__$1;
                  return statearr_17917;
                }();
                var statearr_17918_17933 = state_17914__$1;
                statearr_17918_17933[2] = null;
                statearr_17918_17933[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_17915 === 5) {
                  var inst_17900 = state_17914[8];
                  var state_17914__$1 = state_17914;
                  var statearr_17919_17934 = state_17914__$1;
                  statearr_17919_17934[2] = inst_17900;
                  statearr_17919_17934[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_17915 === 4) {
                    var inst_17903 = state_17914[7];
                    var inst_17903__$1 = state_17914[2];
                    var inst_17904 = inst_17903__$1 == null;
                    var state_17914__$1 = function() {
                      var statearr_17920 = state_17914;
                      statearr_17920[7] = inst_17903__$1;
                      return statearr_17920;
                    }();
                    if (cljs.core.truth_(inst_17904)) {
                      var statearr_17921_17935 = state_17914__$1;
                      statearr_17921_17935[1] = 5;
                    } else {
                      var statearr_17922_17936 = state_17914__$1;
                      statearr_17922_17936[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_17915 === 3) {
                      var inst_17912 = state_17914[2];
                      var state_17914__$1 = state_17914;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17914__$1, inst_17912);
                    } else {
                      if (state_val_17915 === 2) {
                        var state_17914__$1 = state_17914;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17914__$1, 4, ch);
                      } else {
                        if (state_val_17915 === 1) {
                          var inst_17900 = init;
                          var state_17914__$1 = function() {
                            var statearr_17923 = state_17914;
                            statearr_17923[8] = inst_17900;
                            return statearr_17923;
                          }();
                          var statearr_17924_17937 = state_17914__$1;
                          statearr_17924_17937[2] = null;
                          statearr_17924_17937[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto__);
        return function(switch__10455__auto__, c__10470__auto__) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_17928 = [null, null, null, null, null, null, null, null, null];
              statearr_17928[0] = state_machine__10456__auto__;
              statearr_17928[1] = 1;
              return statearr_17928;
            };
            var state_machine__10456__auto____1 = function(state_17914) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_17914);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e17929) {
                    if (e17929 instanceof Object) {
                      var ex__10459__auto__ = e17929;
                      var statearr_17930_17938 = state_17914;
                      statearr_17930_17938[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17914);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e17929;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__17939 = state_17914;
                  state_17914 = G__17939;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_17914) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_17914);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto__);
      }();
      var state__10472__auto__ = function() {
        var statearr_17931 = f__10471__auto__.call(null);
        statearr_17931[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
        return statearr_17931;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto__));
  return c__10470__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto__) {
            return function(state_18013) {
              var state_val_18014 = state_18013[1];
              if (state_val_18014 === 1) {
                var inst_17989 = cljs.core.seq.call(null, coll);
                var inst_17990 = inst_17989;
                var state_18013__$1 = function() {
                  var statearr_18015 = state_18013;
                  statearr_18015[7] = inst_17990;
                  return statearr_18015;
                }();
                var statearr_18016_18038 = state_18013__$1;
                statearr_18016_18038[2] = null;
                statearr_18016_18038[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_18014 === 2) {
                  var inst_17990 = state_18013[7];
                  var state_18013__$1 = state_18013;
                  if (cljs.core.truth_(inst_17990)) {
                    var statearr_18017_18039 = state_18013__$1;
                    statearr_18017_18039[1] = 4;
                  } else {
                    var statearr_18018_18040 = state_18013__$1;
                    statearr_18018_18040[1] = 5;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_18014 === 3) {
                    var inst_18011 = state_18013[2];
                    var state_18013__$1 = state_18013;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18013__$1, inst_18011);
                  } else {
                    if (state_val_18014 === 4) {
                      var inst_17990 = state_18013[7];
                      var inst_17993 = cljs.core.first.call(null, inst_17990);
                      var state_18013__$1 = state_18013;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18013__$1, 7, ch, inst_17993);
                    } else {
                      if (state_val_18014 === 5) {
                        var inst_17990 = state_18013[7];
                        var state_18013__$1 = state_18013;
                        var statearr_18019_18041 = state_18013__$1;
                        statearr_18019_18041[2] = inst_17990;
                        statearr_18019_18041[1] = 6;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_18014 === 6) {
                          var inst_17998 = state_18013[2];
                          var state_18013__$1 = state_18013;
                          if (cljs.core.truth_(inst_17998)) {
                            var statearr_18020_18042 = state_18013__$1;
                            statearr_18020_18042[1] = 8;
                          } else {
                            var statearr_18021_18043 = state_18013__$1;
                            statearr_18021_18043[1] = 9;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_18014 === 7) {
                            var inst_17995 = state_18013[2];
                            var state_18013__$1 = state_18013;
                            var statearr_18022_18044 = state_18013__$1;
                            statearr_18022_18044[2] = inst_17995;
                            statearr_18022_18044[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_18014 === 8) {
                              var inst_17990 = state_18013[7];
                              var inst_18000 = cljs.core.next.call(null, inst_17990);
                              var inst_17990__$1 = inst_18000;
                              var state_18013__$1 = function() {
                                var statearr_18023 = state_18013;
                                statearr_18023[7] = inst_17990__$1;
                                return statearr_18023;
                              }();
                              var statearr_18024_18045 = state_18013__$1;
                              statearr_18024_18045[2] = null;
                              statearr_18024_18045[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_18014 === 9) {
                                var state_18013__$1 = state_18013;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_18025_18046 = state_18013__$1;
                                  statearr_18025_18046[1] = 11;
                                } else {
                                  var statearr_18026_18047 = state_18013__$1;
                                  statearr_18026_18047[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_18014 === 10) {
                                  var inst_18009 = state_18013[2];
                                  var state_18013__$1 = state_18013;
                                  var statearr_18027_18048 = state_18013__$1;
                                  statearr_18027_18048[2] = inst_18009;
                                  statearr_18027_18048[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_18014 === 11) {
                                    var inst_18004 = cljs.core.async.close_BANG_.call(null, ch);
                                    var state_18013__$1 = state_18013;
                                    var statearr_18028_18049 = state_18013__$1;
                                    statearr_18028_18049[2] = inst_18004;
                                    statearr_18028_18049[1] = 13;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_18014 === 12) {
                                      var state_18013__$1 = state_18013;
                                      var statearr_18029_18050 = state_18013__$1;
                                      statearr_18029_18050[2] = null;
                                      statearr_18029_18050[1] = 13;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_18014 === 13) {
                                        var inst_18007 = state_18013[2];
                                        var state_18013__$1 = state_18013;
                                        var statearr_18030_18051 = state_18013__$1;
                                        statearr_18030_18051[2] = inst_18007;
                                        statearr_18030_18051[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto__);
          return function(switch__10455__auto__, c__10470__auto__) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_18034 = [null, null, null, null, null, null, null, null];
                statearr_18034[0] = state_machine__10456__auto__;
                statearr_18034[1] = 1;
                return statearr_18034;
              };
              var state_machine__10456__auto____1 = function(state_18013) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_18013);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e18035) {
                      if (e18035 instanceof Object) {
                        var ex__10459__auto__ = e18035;
                        var statearr_18036_18052 = state_18013;
                        statearr_18036_18052[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18013);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e18035;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__18053 = state_18013;
                    state_18013 = G__18053;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_18013) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_18013);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto__);
        }();
        var state__10472__auto__ = function() {
          var statearr_18037 = f__10471__auto__.call(null);
          statearr_18037[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
          return statearr_18037;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto__));
    return c__10470__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj18055 = {};
  return obj18055;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3529__auto__ = _;
    if (and__3529__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4168__auto__ = _ == null ? null : _;
    return function() {
      var or__3541__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj18057 = {};
  return obj18057;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3529__auto__ = m;
    if (and__3529__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4168__auto__ = m == null ? null : m;
    return function() {
      var or__3541__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3529__auto__ = m;
    if (and__3529__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4168__auto__ = m == null ? null : m;
    return function() {
      var or__3541__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3529__auto__ = m;
    if (and__3529__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4168__auto__ = m == null ? null : m;
    return function() {
      var or__3541__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t18279 !== "undefined") {
    } else {
      cljs.core.async.t18279 = function(cs, ch, mult, meta18280) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta18280 = meta18280;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t18279.cljs$lang$type = true;
      cljs.core.async.t18279.cljs$lang$ctorStr = "cljs.core.async/t18279";
      cljs.core.async.t18279.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
          return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async/t18279");
        };
      }(cs);
      cljs.core.async.t18279.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t18279.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t18279.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t18279.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t18279.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t18279.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t18279.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_18281) {
          var self__ = this;
          var _18281__$1 = this;
          return self__.meta18280;
        };
      }(cs);
      cljs.core.async.t18279.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_18281, meta18280__$1) {
          var self__ = this;
          var _18281__$1 = this;
          return new cljs.core.async.t18279(self__.cs, self__.ch, self__.mult, meta18280__$1);
        };
      }(cs);
      cljs.core.async.__GT_t18279 = function(cs) {
        return function __GT_t18279(cs__$1, ch__$1, mult__$1, meta18280) {
          return new cljs.core.async.t18279(cs__$1, ch__$1, mult__$1, meta18280);
        };
      }(cs);
    }
    return new cljs.core.async.t18279(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__10470__auto___18500 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___18500, cs, m, dchan, dctr, done) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto___18500, cs, m, dchan, dctr, done) {
          return function(state_18412) {
            var state_val_18413 = state_18412[1];
            if (state_val_18413 === 32) {
              var inst_18353 = state_18412[7];
              var inst_18352 = state_18412[8];
              var inst_18355 = state_18412[9];
              var inst_18354 = state_18412[10];
              var inst_18367 = state_18412[2];
              var inst_18368 = inst_18355 + 1;
              var tmp18414 = inst_18353;
              var tmp18415 = inst_18352;
              var tmp18416 = inst_18354;
              var inst_18352__$1 = tmp18415;
              var inst_18353__$1 = tmp18414;
              var inst_18354__$1 = tmp18416;
              var inst_18355__$1 = inst_18368;
              var state_18412__$1 = function() {
                var statearr_18417 = state_18412;
                statearr_18417[11] = inst_18367;
                statearr_18417[7] = inst_18353__$1;
                statearr_18417[8] = inst_18352__$1;
                statearr_18417[9] = inst_18355__$1;
                statearr_18417[10] = inst_18354__$1;
                return statearr_18417;
              }();
              var statearr_18418_18501 = state_18412__$1;
              statearr_18418_18501[2] = null;
              statearr_18418_18501[1] = 25;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_18413 === 1) {
                var state_18412__$1 = state_18412;
                var statearr_18419_18502 = state_18412__$1;
                statearr_18419_18502[2] = null;
                statearr_18419_18502[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_18413 === 33) {
                  var inst_18371 = state_18412[12];
                  var inst_18373 = cljs.core.chunked_seq_QMARK_.call(null, inst_18371);
                  var state_18412__$1 = state_18412;
                  if (inst_18373) {
                    var statearr_18420_18503 = state_18412__$1;
                    statearr_18420_18503[1] = 36;
                  } else {
                    var statearr_18421_18504 = state_18412__$1;
                    statearr_18421_18504[1] = 37;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_18413 === 2) {
                    var state_18412__$1 = state_18412;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18412__$1, 4, ch);
                  } else {
                    if (state_val_18413 === 34) {
                      var state_18412__$1 = state_18412;
                      var statearr_18422_18505 = state_18412__$1;
                      statearr_18422_18505[2] = null;
                      statearr_18422_18505[1] = 35;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_18413 === 3) {
                        var inst_18410 = state_18412[2];
                        var state_18412__$1 = state_18412;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18412__$1, inst_18410);
                      } else {
                        if (state_val_18413 === 35) {
                          var inst_18394 = state_18412[2];
                          var state_18412__$1 = state_18412;
                          var statearr_18423_18506 = state_18412__$1;
                          statearr_18423_18506[2] = inst_18394;
                          statearr_18423_18506[1] = 29;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_18413 === 4) {
                            var inst_18284 = state_18412[13];
                            var inst_18284__$1 = state_18412[2];
                            var inst_18285 = inst_18284__$1 == null;
                            var state_18412__$1 = function() {
                              var statearr_18424 = state_18412;
                              statearr_18424[13] = inst_18284__$1;
                              return statearr_18424;
                            }();
                            if (cljs.core.truth_(inst_18285)) {
                              var statearr_18425_18507 = state_18412__$1;
                              statearr_18425_18507[1] = 5;
                            } else {
                              var statearr_18426_18508 = state_18412__$1;
                              statearr_18426_18508[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_18413 === 36) {
                              var inst_18371 = state_18412[12];
                              var inst_18375 = cljs.core.chunk_first.call(null, inst_18371);
                              var inst_18376 = cljs.core.chunk_rest.call(null, inst_18371);
                              var inst_18377 = cljs.core.count.call(null, inst_18375);
                              var inst_18352 = inst_18376;
                              var inst_18353 = inst_18375;
                              var inst_18354 = inst_18377;
                              var inst_18355 = 0;
                              var state_18412__$1 = function() {
                                var statearr_18427 = state_18412;
                                statearr_18427[7] = inst_18353;
                                statearr_18427[8] = inst_18352;
                                statearr_18427[9] = inst_18355;
                                statearr_18427[10] = inst_18354;
                                return statearr_18427;
                              }();
                              var statearr_18428_18509 = state_18412__$1;
                              statearr_18428_18509[2] = null;
                              statearr_18428_18509[1] = 25;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_18413 === 5) {
                                var inst_18291 = cljs.core.deref.call(null, cs);
                                var inst_18292 = cljs.core.seq.call(null, inst_18291);
                                var inst_18293 = inst_18292;
                                var inst_18294 = null;
                                var inst_18295 = 0;
                                var inst_18296 = 0;
                                var state_18412__$1 = function() {
                                  var statearr_18429 = state_18412;
                                  statearr_18429[14] = inst_18293;
                                  statearr_18429[15] = inst_18294;
                                  statearr_18429[16] = inst_18295;
                                  statearr_18429[17] = inst_18296;
                                  return statearr_18429;
                                }();
                                var statearr_18430_18510 = state_18412__$1;
                                statearr_18430_18510[2] = null;
                                statearr_18430_18510[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_18413 === 37) {
                                  var inst_18380 = state_18412[18];
                                  var inst_18371 = state_18412[12];
                                  var inst_18284 = state_18412[13];
                                  var inst_18380__$1 = cljs.core.first.call(null, inst_18371);
                                  var inst_18381 = cljs.core.async.put_BANG_.call(null, inst_18380__$1, inst_18284, done);
                                  var state_18412__$1 = function() {
                                    var statearr_18431 = state_18412;
                                    statearr_18431[18] = inst_18380__$1;
                                    return statearr_18431;
                                  }();
                                  if (cljs.core.truth_(inst_18381)) {
                                    var statearr_18432_18511 = state_18412__$1;
                                    statearr_18432_18511[1] = 39;
                                  } else {
                                    var statearr_18433_18512 = state_18412__$1;
                                    statearr_18433_18512[1] = 40;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_18413 === 6) {
                                    var inst_18344 = state_18412[19];
                                    var inst_18343 = cljs.core.deref.call(null, cs);
                                    var inst_18344__$1 = cljs.core.keys.call(null, inst_18343);
                                    var inst_18345 = cljs.core.count.call(null, inst_18344__$1);
                                    var inst_18346 = cljs.core.reset_BANG_.call(null, dctr, inst_18345);
                                    var inst_18351 = cljs.core.seq.call(null, inst_18344__$1);
                                    var inst_18352 = inst_18351;
                                    var inst_18353 = null;
                                    var inst_18354 = 0;
                                    var inst_18355 = 0;
                                    var state_18412__$1 = function() {
                                      var statearr_18434 = state_18412;
                                      statearr_18434[20] = inst_18346;
                                      statearr_18434[19] = inst_18344__$1;
                                      statearr_18434[7] = inst_18353;
                                      statearr_18434[8] = inst_18352;
                                      statearr_18434[9] = inst_18355;
                                      statearr_18434[10] = inst_18354;
                                      return statearr_18434;
                                    }();
                                    var statearr_18435_18513 = state_18412__$1;
                                    statearr_18435_18513[2] = null;
                                    statearr_18435_18513[1] = 25;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_18413 === 38) {
                                      var inst_18391 = state_18412[2];
                                      var state_18412__$1 = state_18412;
                                      var statearr_18436_18514 = state_18412__$1;
                                      statearr_18436_18514[2] = inst_18391;
                                      statearr_18436_18514[1] = 35;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_18413 === 7) {
                                        var inst_18408 = state_18412[2];
                                        var state_18412__$1 = state_18412;
                                        var statearr_18437_18515 = state_18412__$1;
                                        statearr_18437_18515[2] = inst_18408;
                                        statearr_18437_18515[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_18413 === 39) {
                                          var state_18412__$1 = state_18412;
                                          var statearr_18438_18516 = state_18412__$1;
                                          statearr_18438_18516[2] = null;
                                          statearr_18438_18516[1] = 41;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_18413 === 8) {
                                            var inst_18295 = state_18412[16];
                                            var inst_18296 = state_18412[17];
                                            var inst_18298 = inst_18296 < inst_18295;
                                            var inst_18299 = inst_18298;
                                            var state_18412__$1 = state_18412;
                                            if (cljs.core.truth_(inst_18299)) {
                                              var statearr_18439_18517 = state_18412__$1;
                                              statearr_18439_18517[1] = 10;
                                            } else {
                                              var statearr_18440_18518 = state_18412__$1;
                                              statearr_18440_18518[1] = 11;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_18413 === 40) {
                                              var inst_18380 = state_18412[18];
                                              var inst_18384 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                              var inst_18385 = cljs.core.async.untap_STAR_.call(null, m, inst_18380);
                                              var state_18412__$1 = function() {
                                                var statearr_18441 = state_18412;
                                                statearr_18441[21] = inst_18384;
                                                return statearr_18441;
                                              }();
                                              var statearr_18442_18519 = state_18412__$1;
                                              statearr_18442_18519[2] = inst_18385;
                                              statearr_18442_18519[1] = 41;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_18413 === 9) {
                                                var inst_18341 = state_18412[2];
                                                var state_18412__$1 = state_18412;
                                                var statearr_18443_18520 = state_18412__$1;
                                                statearr_18443_18520[2] = inst_18341;
                                                statearr_18443_18520[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_18413 === 41) {
                                                  var inst_18371 = state_18412[12];
                                                  var inst_18387 = state_18412[2];
                                                  var inst_18388 = cljs.core.next.call(null, inst_18371);
                                                  var inst_18352 = inst_18388;
                                                  var inst_18353 = null;
                                                  var inst_18354 = 0;
                                                  var inst_18355 = 0;
                                                  var state_18412__$1 = function() {
                                                    var statearr_18444 = state_18412;
                                                    statearr_18444[22] = inst_18387;
                                                    statearr_18444[7] = inst_18353;
                                                    statearr_18444[8] = inst_18352;
                                                    statearr_18444[9] = inst_18355;
                                                    statearr_18444[10] = inst_18354;
                                                    return statearr_18444;
                                                  }();
                                                  var statearr_18445_18521 = state_18412__$1;
                                                  statearr_18445_18521[2] = null;
                                                  statearr_18445_18521[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_18413 === 10) {
                                                    var inst_18294 = state_18412[15];
                                                    var inst_18296 = state_18412[17];
                                                    var inst_18302 = cljs.core._nth.call(null, inst_18294, inst_18296);
                                                    var inst_18303 = cljs.core.nth.call(null, inst_18302, 0, null);
                                                    var inst_18304 = cljs.core.nth.call(null, inst_18302, 1, null);
                                                    var state_18412__$1 = function() {
                                                      var statearr_18446 = state_18412;
                                                      statearr_18446[23] = inst_18303;
                                                      return statearr_18446;
                                                    }();
                                                    if (cljs.core.truth_(inst_18304)) {
                                                      var statearr_18447_18522 = state_18412__$1;
                                                      statearr_18447_18522[1] = 13;
                                                    } else {
                                                      var statearr_18448_18523 = state_18412__$1;
                                                      statearr_18448_18523[1] = 14;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_18413 === 42) {
                                                      var state_18412__$1 = state_18412;
                                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18412__$1, 45, dchan);
                                                    } else {
                                                      if (state_val_18413 === 11) {
                                                        var inst_18293 = state_18412[14];
                                                        var inst_18313 = state_18412[24];
                                                        var inst_18313__$1 = cljs.core.seq.call(null, inst_18293);
                                                        var state_18412__$1 = function() {
                                                          var statearr_18449 = state_18412;
                                                          statearr_18449[24] = inst_18313__$1;
                                                          return statearr_18449;
                                                        }();
                                                        if (inst_18313__$1) {
                                                          var statearr_18450_18524 = state_18412__$1;
                                                          statearr_18450_18524[1] = 16;
                                                        } else {
                                                          var statearr_18451_18525 = state_18412__$1;
                                                          statearr_18451_18525[1] = 17;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_18413 === 43) {
                                                          var state_18412__$1 = state_18412;
                                                          var statearr_18452_18526 = state_18412__$1;
                                                          statearr_18452_18526[2] = null;
                                                          statearr_18452_18526[1] = 44;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_18413 === 12) {
                                                            var inst_18339 = state_18412[2];
                                                            var state_18412__$1 = state_18412;
                                                            var statearr_18453_18527 = state_18412__$1;
                                                            statearr_18453_18527[2] = inst_18339;
                                                            statearr_18453_18527[1] = 9;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_18413 === 44) {
                                                              var inst_18405 = state_18412[2];
                                                              var state_18412__$1 = function() {
                                                                var statearr_18454 = state_18412;
                                                                statearr_18454[25] = inst_18405;
                                                                return statearr_18454;
                                                              }();
                                                              var statearr_18455_18528 = state_18412__$1;
                                                              statearr_18455_18528[2] = null;
                                                              statearr_18455_18528[1] = 2;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_18413 === 13) {
                                                                var inst_18303 = state_18412[23];
                                                                var inst_18306 = cljs.core.async.close_BANG_.call(null, inst_18303);
                                                                var state_18412__$1 = state_18412;
                                                                var statearr_18456_18529 = state_18412__$1;
                                                                statearr_18456_18529[2] = inst_18306;
                                                                statearr_18456_18529[1] = 15;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_18413 === 45) {
                                                                  var inst_18402 = state_18412[2];
                                                                  var state_18412__$1 = state_18412;
                                                                  var statearr_18460_18530 = state_18412__$1;
                                                                  statearr_18460_18530[2] = inst_18402;
                                                                  statearr_18460_18530[1] = 44;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_18413 === 14) {
                                                                    var state_18412__$1 = state_18412;
                                                                    var statearr_18461_18531 = state_18412__$1;
                                                                    statearr_18461_18531[2] = null;
                                                                    statearr_18461_18531[1] = 15;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_18413 === 15) {
                                                                      var inst_18293 = state_18412[14];
                                                                      var inst_18294 = state_18412[15];
                                                                      var inst_18295 = state_18412[16];
                                                                      var inst_18296 = state_18412[17];
                                                                      var inst_18309 = state_18412[2];
                                                                      var inst_18310 = inst_18296 + 1;
                                                                      var tmp18457 = inst_18293;
                                                                      var tmp18458 = inst_18294;
                                                                      var tmp18459 = inst_18295;
                                                                      var inst_18293__$1 = tmp18457;
                                                                      var inst_18294__$1 = tmp18458;
                                                                      var inst_18295__$1 = tmp18459;
                                                                      var inst_18296__$1 = inst_18310;
                                                                      var state_18412__$1 = function() {
                                                                        var statearr_18462 = state_18412;
                                                                        statearr_18462[14] = inst_18293__$1;
                                                                        statearr_18462[15] = inst_18294__$1;
                                                                        statearr_18462[16] = inst_18295__$1;
                                                                        statearr_18462[17] = inst_18296__$1;
                                                                        statearr_18462[26] = inst_18309;
                                                                        return statearr_18462;
                                                                      }();
                                                                      var statearr_18463_18532 = state_18412__$1;
                                                                      statearr_18463_18532[2] = null;
                                                                      statearr_18463_18532[1] = 8;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_18413 === 16) {
                                                                        var inst_18313 = state_18412[24];
                                                                        var inst_18315 = cljs.core.chunked_seq_QMARK_.call(null, inst_18313);
                                                                        var state_18412__$1 = state_18412;
                                                                        if (inst_18315) {
                                                                          var statearr_18464_18533 = state_18412__$1;
                                                                          statearr_18464_18533[1] = 19;
                                                                        } else {
                                                                          var statearr_18465_18534 = state_18412__$1;
                                                                          statearr_18465_18534[1] = 20;
                                                                        }
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_18413 === 17) {
                                                                          var state_18412__$1 = state_18412;
                                                                          var statearr_18466_18535 = state_18412__$1;
                                                                          statearr_18466_18535[2] = null;
                                                                          statearr_18466_18535[1] = 18;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_18413 === 18) {
                                                                            var inst_18337 = state_18412[2];
                                                                            var state_18412__$1 = state_18412;
                                                                            var statearr_18467_18536 = state_18412__$1;
                                                                            statearr_18467_18536[2] = inst_18337;
                                                                            statearr_18467_18536[1] = 12;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_18413 === 19) {
                                                                              var inst_18313 = state_18412[24];
                                                                              var inst_18317 = cljs.core.chunk_first.call(null, inst_18313);
                                                                              var inst_18318 = cljs.core.chunk_rest.call(null, inst_18313);
                                                                              var inst_18319 = cljs.core.count.call(null, inst_18317);
                                                                              var inst_18293 = inst_18318;
                                                                              var inst_18294 = inst_18317;
                                                                              var inst_18295 = inst_18319;
                                                                              var inst_18296 = 0;
                                                                              var state_18412__$1 = function() {
                                                                                var statearr_18468 = state_18412;
                                                                                statearr_18468[14] = inst_18293;
                                                                                statearr_18468[15] = inst_18294;
                                                                                statearr_18468[16] = inst_18295;
                                                                                statearr_18468[17] = inst_18296;
                                                                                return statearr_18468;
                                                                              }();
                                                                              var statearr_18469_18537 = state_18412__$1;
                                                                              statearr_18469_18537[2] = null;
                                                                              statearr_18469_18537[1] = 8;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_18413 === 20) {
                                                                                var inst_18313 = state_18412[24];
                                                                                var inst_18323 = cljs.core.first.call(null, inst_18313);
                                                                                var inst_18324 = cljs.core.nth.call(null, inst_18323, 0, null);
                                                                                var inst_18325 = cljs.core.nth.call(null, inst_18323, 1, null);
                                                                                var state_18412__$1 = function() {
                                                                                  var statearr_18470 = state_18412;
                                                                                  statearr_18470[27] = inst_18324;
                                                                                  return statearr_18470;
                                                                                }();
                                                                                if (cljs.core.truth_(inst_18325)) {
                                                                                  var statearr_18471_18538 = state_18412__$1;
                                                                                  statearr_18471_18538[1] = 22;
                                                                                } else {
                                                                                  var statearr_18472_18539 = state_18412__$1;
                                                                                  statearr_18472_18539[1] = 23;
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_18413 === 21) {
                                                                                  var inst_18334 = state_18412[2];
                                                                                  var state_18412__$1 = state_18412;
                                                                                  var statearr_18473_18540 = state_18412__$1;
                                                                                  statearr_18473_18540[2] = inst_18334;
                                                                                  statearr_18473_18540[1] = 18;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                } else {
                                                                                  if (state_val_18413 === 22) {
                                                                                    var inst_18324 = state_18412[27];
                                                                                    var inst_18327 = cljs.core.async.close_BANG_.call(null, inst_18324);
                                                                                    var state_18412__$1 = state_18412;
                                                                                    var statearr_18474_18541 = state_18412__$1;
                                                                                    statearr_18474_18541[2] = inst_18327;
                                                                                    statearr_18474_18541[1] = 24;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_18413 === 23) {
                                                                                      var state_18412__$1 = state_18412;
                                                                                      var statearr_18475_18542 = state_18412__$1;
                                                                                      statearr_18475_18542[2] = null;
                                                                                      statearr_18475_18542[1] = 24;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_18413 === 24) {
                                                                                        var inst_18313 = state_18412[24];
                                                                                        var inst_18330 = state_18412[2];
                                                                                        var inst_18331 = cljs.core.next.call(null, inst_18313);
                                                                                        var inst_18293 = inst_18331;
                                                                                        var inst_18294 = null;
                                                                                        var inst_18295 = 0;
                                                                                        var inst_18296 = 0;
                                                                                        var state_18412__$1 = function() {
                                                                                          var statearr_18476 = state_18412;
                                                                                          statearr_18476[28] = inst_18330;
                                                                                          statearr_18476[14] = inst_18293;
                                                                                          statearr_18476[15] = inst_18294;
                                                                                          statearr_18476[16] = inst_18295;
                                                                                          statearr_18476[17] = inst_18296;
                                                                                          return statearr_18476;
                                                                                        }();
                                                                                        var statearr_18477_18543 = state_18412__$1;
                                                                                        statearr_18477_18543[2] = null;
                                                                                        statearr_18477_18543[1] = 8;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_18413 === 25) {
                                                                                          var inst_18355 = state_18412[9];
                                                                                          var inst_18354 = state_18412[10];
                                                                                          var inst_18357 = inst_18355 < inst_18354;
                                                                                          var inst_18358 = inst_18357;
                                                                                          var state_18412__$1 = state_18412;
                                                                                          if (cljs.core.truth_(inst_18358)) {
                                                                                            var statearr_18478_18544 = state_18412__$1;
                                                                                            statearr_18478_18544[1] = 27;
                                                                                          } else {
                                                                                            var statearr_18479_18545 = state_18412__$1;
                                                                                            statearr_18479_18545[1] = 28;
                                                                                          }
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_18413 === 26) {
                                                                                            var inst_18344 = state_18412[19];
                                                                                            var inst_18398 = state_18412[2];
                                                                                            var inst_18399 = cljs.core.seq.call(null, inst_18344);
                                                                                            var state_18412__$1 = function() {
                                                                                              var statearr_18480 = state_18412;
                                                                                              statearr_18480[29] = inst_18398;
                                                                                              return statearr_18480;
                                                                                            }();
                                                                                            if (inst_18399) {
                                                                                              var statearr_18481_18546 = state_18412__$1;
                                                                                              statearr_18481_18546[1] = 42;
                                                                                            } else {
                                                                                              var statearr_18482_18547 = state_18412__$1;
                                                                                              statearr_18482_18547[1] = 43;
                                                                                            }
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            if (state_val_18413 === 27) {
                                                                                              var inst_18360 = state_18412[30];
                                                                                              var inst_18284 = state_18412[13];
                                                                                              var inst_18353 = state_18412[7];
                                                                                              var inst_18355 = state_18412[9];
                                                                                              var inst_18360__$1 = cljs.core._nth.call(null, inst_18353, inst_18355);
                                                                                              var inst_18361 = cljs.core.async.put_BANG_.call(null, inst_18360__$1, inst_18284, done);
                                                                                              var state_18412__$1 = function() {
                                                                                                var statearr_18483 = state_18412;
                                                                                                statearr_18483[30] = inst_18360__$1;
                                                                                                return statearr_18483;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_18361)) {
                                                                                                var statearr_18484_18548 = state_18412__$1;
                                                                                                statearr_18484_18548[1] = 30;
                                                                                              } else {
                                                                                                var statearr_18485_18549 = state_18412__$1;
                                                                                                statearr_18485_18549[1] = 31;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                            } else {
                                                                                              if (state_val_18413 === 28) {
                                                                                                var inst_18371 = state_18412[12];
                                                                                                var inst_18352 = state_18412[8];
                                                                                                var inst_18371__$1 = cljs.core.seq.call(null, inst_18352);
                                                                                                var state_18412__$1 = function() {
                                                                                                  var statearr_18486 = state_18412;
                                                                                                  statearr_18486[12] = inst_18371__$1;
                                                                                                  return statearr_18486;
                                                                                                }();
                                                                                                if (inst_18371__$1) {
                                                                                                  var statearr_18487_18550 = state_18412__$1;
                                                                                                  statearr_18487_18550[1] = 33;
                                                                                                } else {
                                                                                                  var statearr_18488_18551 = state_18412__$1;
                                                                                                  statearr_18488_18551[1] = 34;
                                                                                                }
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                              } else {
                                                                                                if (state_val_18413 === 29) {
                                                                                                  var inst_18396 = state_18412[2];
                                                                                                  var state_18412__$1 = state_18412;
                                                                                                  var statearr_18489_18552 = state_18412__$1;
                                                                                                  statearr_18489_18552[2] = inst_18396;
                                                                                                  statearr_18489_18552[1] = 26;
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                } else {
                                                                                                  if (state_val_18413 === 30) {
                                                                                                    var state_18412__$1 = state_18412;
                                                                                                    var statearr_18490_18553 = state_18412__$1;
                                                                                                    statearr_18490_18553[2] = null;
                                                                                                    statearr_18490_18553[1] = 32;
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                  } else {
                                                                                                    if (state_val_18413 === 31) {
                                                                                                      var inst_18360 = state_18412[30];
                                                                                                      var inst_18364 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                                      var inst_18365 = cljs.core.async.untap_STAR_.call(null, m, inst_18360);
                                                                                                      var state_18412__$1 = function() {
                                                                                                        var statearr_18491 = state_18412;
                                                                                                        statearr_18491[31] = inst_18364;
                                                                                                        return statearr_18491;
                                                                                                      }();
                                                                                                      var statearr_18492_18554 = state_18412__$1;
                                                                                                      statearr_18492_18554[2] = inst_18365;
                                                                                                      statearr_18492_18554[1] = 32;
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto___18500, cs, m, dchan, dctr, done);
        return function(switch__10455__auto__, c__10470__auto___18500, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_18496 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18496[0] = state_machine__10456__auto__;
              statearr_18496[1] = 1;
              return statearr_18496;
            };
            var state_machine__10456__auto____1 = function(state_18412) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_18412);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e18497) {
                    if (e18497 instanceof Object) {
                      var ex__10459__auto__ = e18497;
                      var statearr_18498_18555 = state_18412;
                      statearr_18498_18555[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18412);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e18497;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__18556 = state_18412;
                  state_18412 = G__18556;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_18412) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_18412);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto___18500, cs, m, dchan, dctr, done);
      }();
      var state__10472__auto__ = function() {
        var statearr_18499 = f__10471__auto__.call(null);
        statearr_18499[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___18500;
        return statearr_18499;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto___18500, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj18558 = {};
  return obj18558;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3529__auto__ = m;
    if (and__3529__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4168__auto__ = m == null ? null : m;
    return function() {
      var or__3541__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3529__auto__ = m;
    if (and__3529__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4168__auto__ = m == null ? null : m;
    return function() {
      var or__3541__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3529__auto__ = m;
    if (and__3529__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4168__auto__ = m == null ? null : m;
    return function() {
      var or__3541__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3529__auto__ = m;
    if (and__3529__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4168__auto__ = m == null ? null : m;
    return function() {
      var or__3541__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3529__auto__ = m;
    if (and__3529__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4168__auto__ = m == null ? null : m;
    return function() {
      var or__3541__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t18678 !== "undefined") {
    } else {
      cljs.core.async.t18678 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta18679) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta18679 = meta18679;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t18678.cljs$lang$type = true;
      cljs.core.async.t18678.cljs$lang$ctorStr = "cljs.core.async/t18678";
      cljs.core.async.t18678.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
          return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async/t18678");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18678.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t18678.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18678.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18678.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18678.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18678.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18678.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t18678.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18678.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18680) {
          var self__ = this;
          var _18680__$1 = this;
          return self__.meta18679;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18678.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18680, meta18679__$1) {
          var self__ = this;
          var _18680__$1 = this;
          return new cljs.core.async.t18678(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta18679__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t18678 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t18678(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta18679) {
          return new cljs.core.async.t18678(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta18679);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t18678(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__10470__auto___18797 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___18797, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto___18797, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_18750) {
            var state_val_18751 = state_18750[1];
            if (state_val_18751 === 1) {
              var inst_18684 = state_18750[7];
              var inst_18684__$1 = calc_state.call(null);
              var inst_18685 = cljs.core.seq_QMARK_.call(null, inst_18684__$1);
              var state_18750__$1 = function() {
                var statearr_18752 = state_18750;
                statearr_18752[7] = inst_18684__$1;
                return statearr_18752;
              }();
              if (inst_18685) {
                var statearr_18753_18798 = state_18750__$1;
                statearr_18753_18798[1] = 2;
              } else {
                var statearr_18754_18799 = state_18750__$1;
                statearr_18754_18799[1] = 3;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_18751 === 2) {
                var inst_18684 = state_18750[7];
                var inst_18687 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18684);
                var state_18750__$1 = state_18750;
                var statearr_18755_18800 = state_18750__$1;
                statearr_18755_18800[2] = inst_18687;
                statearr_18755_18800[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_18751 === 3) {
                  var inst_18684 = state_18750[7];
                  var state_18750__$1 = state_18750;
                  var statearr_18756_18801 = state_18750__$1;
                  statearr_18756_18801[2] = inst_18684;
                  statearr_18756_18801[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_18751 === 4) {
                    var inst_18684 = state_18750[7];
                    var inst_18690 = state_18750[2];
                    var inst_18691 = cljs.core.get.call(null, inst_18690, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                    var inst_18692 = cljs.core.get.call(null, inst_18690, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                    var inst_18693 = cljs.core.get.call(null, inst_18690, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                    var inst_18694 = inst_18684;
                    var state_18750__$1 = function() {
                      var statearr_18757 = state_18750;
                      statearr_18757[8] = inst_18694;
                      statearr_18757[9] = inst_18693;
                      statearr_18757[10] = inst_18691;
                      statearr_18757[11] = inst_18692;
                      return statearr_18757;
                    }();
                    var statearr_18758_18802 = state_18750__$1;
                    statearr_18758_18802[2] = null;
                    statearr_18758_18802[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_18751 === 5) {
                      var inst_18694 = state_18750[8];
                      var inst_18697 = cljs.core.seq_QMARK_.call(null, inst_18694);
                      var state_18750__$1 = state_18750;
                      if (inst_18697) {
                        var statearr_18759_18803 = state_18750__$1;
                        statearr_18759_18803[1] = 7;
                      } else {
                        var statearr_18760_18804 = state_18750__$1;
                        statearr_18760_18804[1] = 8;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_18751 === 6) {
                        var inst_18748 = state_18750[2];
                        var state_18750__$1 = state_18750;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18750__$1, inst_18748);
                      } else {
                        if (state_val_18751 === 7) {
                          var inst_18694 = state_18750[8];
                          var inst_18699 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18694);
                          var state_18750__$1 = state_18750;
                          var statearr_18761_18805 = state_18750__$1;
                          statearr_18761_18805[2] = inst_18699;
                          statearr_18761_18805[1] = 9;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_18751 === 8) {
                            var inst_18694 = state_18750[8];
                            var state_18750__$1 = state_18750;
                            var statearr_18762_18806 = state_18750__$1;
                            statearr_18762_18806[2] = inst_18694;
                            statearr_18762_18806[1] = 9;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_18751 === 9) {
                              var inst_18702 = state_18750[12];
                              var inst_18702__$1 = state_18750[2];
                              var inst_18703 = cljs.core.get.call(null, inst_18702__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                              var inst_18704 = cljs.core.get.call(null, inst_18702__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                              var inst_18705 = cljs.core.get.call(null, inst_18702__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                              var state_18750__$1 = function() {
                                var statearr_18763 = state_18750;
                                statearr_18763[13] = inst_18705;
                                statearr_18763[14] = inst_18704;
                                statearr_18763[12] = inst_18702__$1;
                                return statearr_18763;
                              }();
                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_18750__$1, 10, inst_18703);
                            } else {
                              if (state_val_18751 === 10) {
                                var inst_18709 = state_18750[15];
                                var inst_18710 = state_18750[16];
                                var inst_18708 = state_18750[2];
                                var inst_18709__$1 = cljs.core.nth.call(null, inst_18708, 0, null);
                                var inst_18710__$1 = cljs.core.nth.call(null, inst_18708, 1, null);
                                var inst_18711 = inst_18709__$1 == null;
                                var inst_18712 = cljs.core._EQ_.call(null, inst_18710__$1, change);
                                var inst_18713 = inst_18711 || inst_18712;
                                var state_18750__$1 = function() {
                                  var statearr_18764 = state_18750;
                                  statearr_18764[15] = inst_18709__$1;
                                  statearr_18764[16] = inst_18710__$1;
                                  return statearr_18764;
                                }();
                                if (cljs.core.truth_(inst_18713)) {
                                  var statearr_18765_18807 = state_18750__$1;
                                  statearr_18765_18807[1] = 11;
                                } else {
                                  var statearr_18766_18808 = state_18750__$1;
                                  statearr_18766_18808[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_18751 === 11) {
                                  var inst_18709 = state_18750[15];
                                  var inst_18715 = inst_18709 == null;
                                  var state_18750__$1 = state_18750;
                                  if (cljs.core.truth_(inst_18715)) {
                                    var statearr_18767_18809 = state_18750__$1;
                                    statearr_18767_18809[1] = 14;
                                  } else {
                                    var statearr_18768_18810 = state_18750__$1;
                                    statearr_18768_18810[1] = 15;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_18751 === 12) {
                                    var inst_18724 = state_18750[17];
                                    var inst_18705 = state_18750[13];
                                    var inst_18710 = state_18750[16];
                                    var inst_18724__$1 = inst_18705.call(null, inst_18710);
                                    var state_18750__$1 = function() {
                                      var statearr_18769 = state_18750;
                                      statearr_18769[17] = inst_18724__$1;
                                      return statearr_18769;
                                    }();
                                    if (cljs.core.truth_(inst_18724__$1)) {
                                      var statearr_18770_18811 = state_18750__$1;
                                      statearr_18770_18811[1] = 17;
                                    } else {
                                      var statearr_18771_18812 = state_18750__$1;
                                      statearr_18771_18812[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_18751 === 13) {
                                      var inst_18746 = state_18750[2];
                                      var state_18750__$1 = state_18750;
                                      var statearr_18772_18813 = state_18750__$1;
                                      statearr_18772_18813[2] = inst_18746;
                                      statearr_18772_18813[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_18751 === 14) {
                                        var inst_18710 = state_18750[16];
                                        var inst_18717 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_18710);
                                        var state_18750__$1 = state_18750;
                                        var statearr_18773_18814 = state_18750__$1;
                                        statearr_18773_18814[2] = inst_18717;
                                        statearr_18773_18814[1] = 16;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_18751 === 15) {
                                          var state_18750__$1 = state_18750;
                                          var statearr_18774_18815 = state_18750__$1;
                                          statearr_18774_18815[2] = null;
                                          statearr_18774_18815[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_18751 === 16) {
                                            var inst_18720 = state_18750[2];
                                            var inst_18721 = calc_state.call(null);
                                            var inst_18694 = inst_18721;
                                            var state_18750__$1 = function() {
                                              var statearr_18775 = state_18750;
                                              statearr_18775[18] = inst_18720;
                                              statearr_18775[8] = inst_18694;
                                              return statearr_18775;
                                            }();
                                            var statearr_18776_18816 = state_18750__$1;
                                            statearr_18776_18816[2] = null;
                                            statearr_18776_18816[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_18751 === 17) {
                                              var inst_18724 = state_18750[17];
                                              var state_18750__$1 = state_18750;
                                              var statearr_18777_18817 = state_18750__$1;
                                              statearr_18777_18817[2] = inst_18724;
                                              statearr_18777_18817[1] = 19;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_18751 === 18) {
                                                var inst_18705 = state_18750[13];
                                                var inst_18710 = state_18750[16];
                                                var inst_18704 = state_18750[14];
                                                var inst_18727 = cljs.core.empty_QMARK_.call(null, inst_18705);
                                                var inst_18728 = inst_18704.call(null, inst_18710);
                                                var inst_18729 = cljs.core.not.call(null, inst_18728);
                                                var inst_18730 = inst_18727 && inst_18729;
                                                var state_18750__$1 = state_18750;
                                                var statearr_18778_18818 = state_18750__$1;
                                                statearr_18778_18818[2] = inst_18730;
                                                statearr_18778_18818[1] = 19;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_18751 === 19) {
                                                  var inst_18732 = state_18750[2];
                                                  var state_18750__$1 = state_18750;
                                                  if (cljs.core.truth_(inst_18732)) {
                                                    var statearr_18779_18819 = state_18750__$1;
                                                    statearr_18779_18819[1] = 20;
                                                  } else {
                                                    var statearr_18780_18820 = state_18750__$1;
                                                    statearr_18780_18820[1] = 21;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_18751 === 20) {
                                                    var inst_18709 = state_18750[15];
                                                    var state_18750__$1 = state_18750;
                                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18750__$1, 23, out, inst_18709);
                                                  } else {
                                                    if (state_val_18751 === 21) {
                                                      var inst_18702 = state_18750[12];
                                                      var inst_18694 = inst_18702;
                                                      var state_18750__$1 = function() {
                                                        var statearr_18781 = state_18750;
                                                        statearr_18781[8] = inst_18694;
                                                        return statearr_18781;
                                                      }();
                                                      var statearr_18782_18821 = state_18750__$1;
                                                      statearr_18782_18821[2] = null;
                                                      statearr_18782_18821[1] = 5;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_18751 === 22) {
                                                        var inst_18744 = state_18750[2];
                                                        var state_18750__$1 = state_18750;
                                                        var statearr_18783_18822 = state_18750__$1;
                                                        statearr_18783_18822[2] = inst_18744;
                                                        statearr_18783_18822[1] = 13;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_18751 === 23) {
                                                          var inst_18735 = state_18750[2];
                                                          var state_18750__$1 = state_18750;
                                                          if (cljs.core.truth_(inst_18735)) {
                                                            var statearr_18784_18823 = state_18750__$1;
                                                            statearr_18784_18823[1] = 24;
                                                          } else {
                                                            var statearr_18785_18824 = state_18750__$1;
                                                            statearr_18785_18824[1] = 25;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_18751 === 24) {
                                                            var inst_18702 = state_18750[12];
                                                            var inst_18694 = inst_18702;
                                                            var state_18750__$1 = function() {
                                                              var statearr_18786 = state_18750;
                                                              statearr_18786[8] = inst_18694;
                                                              return statearr_18786;
                                                            }();
                                                            var statearr_18787_18825 = state_18750__$1;
                                                            statearr_18787_18825[2] = null;
                                                            statearr_18787_18825[1] = 5;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_18751 === 25) {
                                                              var state_18750__$1 = state_18750;
                                                              var statearr_18788_18826 = state_18750__$1;
                                                              statearr_18788_18826[2] = null;
                                                              statearr_18788_18826[1] = 26;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_18751 === 26) {
                                                                var inst_18740 = state_18750[2];
                                                                var state_18750__$1 = state_18750;
                                                                var statearr_18789_18827 = state_18750__$1;
                                                                statearr_18789_18827[2] = inst_18740;
                                                                statearr_18789_18827[1] = 22;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto___18797, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__10455__auto__, c__10470__auto___18797, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_18793 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18793[0] = state_machine__10456__auto__;
              statearr_18793[1] = 1;
              return statearr_18793;
            };
            var state_machine__10456__auto____1 = function(state_18750) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_18750);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e18794) {
                    if (e18794 instanceof Object) {
                      var ex__10459__auto__ = e18794;
                      var statearr_18795_18828 = state_18750;
                      statearr_18795_18828[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18750);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e18794;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__18829 = state_18750;
                  state_18750 = G__18829;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_18750) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_18750);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto___18797, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__10472__auto__ = function() {
        var statearr_18796 = f__10471__auto__.call(null);
        statearr_18796[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___18797;
        return statearr_18796;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto___18797, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj18831 = {};
  return obj18831;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3529__auto__ = p;
    if (and__3529__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4168__auto__ = p == null ? null : p;
    return function() {
      var or__3541__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3529__auto__ = p;
    if (and__3529__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4168__auto__ = p == null ? null : p;
    return function() {
      var or__3541__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3529__auto__ = p;
      if (and__3529__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4168__auto__ = p == null ? null : p;
      return function() {
        var or__3541__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3529__auto__ = p;
      if (and__3529__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3529__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4168__auto__ = p == null ? null : p;
      return function() {
        var or__3541__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4168__auto__)];
        if (or__3541__auto__) {
          return or__3541__auto__;
        } else {
          var or__3541__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3541__auto____$1) {
            return or__3541__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3541__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3541__auto__)) {
          return or__3541__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3541__auto__, mults) {
            return function(p1__18832_SHARP_) {
              if (cljs.core.truth_(p1__18832_SHARP_.call(null, topic))) {
                return p1__18832_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__18832_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3541__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t18955 !== "undefined") {
      } else {
        cljs.core.async.t18955 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta18956) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta18956 = meta18956;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t18955.cljs$lang$type = true;
        cljs.core.async.t18955.cljs$lang$ctorStr = "cljs.core.async/t18955";
        cljs.core.async.t18955.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
            return cljs.core._write.call(null, writer__4109__auto__, "cljs.core.async/t18955");
          };
        }(mults, ensure_mult);
        cljs.core.async.t18955.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t18955.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18955.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t18955.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18955.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18955.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t18955.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t18955.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_18957) {
            var self__ = this;
            var _18957__$1 = this;
            return self__.meta18956;
          };
        }(mults, ensure_mult);
        cljs.core.async.t18955.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_18957, meta18956__$1) {
            var self__ = this;
            var _18957__$1 = this;
            return new cljs.core.async.t18955(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta18956__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t18955 = function(mults, ensure_mult) {
          return function __GT_t18955(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta18956) {
            return new cljs.core.async.t18955(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta18956);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t18955(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__10470__auto___19077 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___19077, mults, ensure_mult, p) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto___19077, mults, ensure_mult, p) {
            return function(state_19029) {
              var state_val_19030 = state_19029[1];
              if (state_val_19030 === 1) {
                var state_19029__$1 = state_19029;
                var statearr_19031_19078 = state_19029__$1;
                statearr_19031_19078[2] = null;
                statearr_19031_19078[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19030 === 2) {
                  var state_19029__$1 = state_19029;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19029__$1, 4, ch);
                } else {
                  if (state_val_19030 === 3) {
                    var inst_19027 = state_19029[2];
                    var state_19029__$1 = state_19029;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19029__$1, inst_19027);
                  } else {
                    if (state_val_19030 === 4) {
                      var inst_18960 = state_19029[7];
                      var inst_18960__$1 = state_19029[2];
                      var inst_18961 = inst_18960__$1 == null;
                      var state_19029__$1 = function() {
                        var statearr_19032 = state_19029;
                        statearr_19032[7] = inst_18960__$1;
                        return statearr_19032;
                      }();
                      if (cljs.core.truth_(inst_18961)) {
                        var statearr_19033_19079 = state_19029__$1;
                        statearr_19033_19079[1] = 5;
                      } else {
                        var statearr_19034_19080 = state_19029__$1;
                        statearr_19034_19080[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_19030 === 5) {
                        var inst_18967 = cljs.core.deref.call(null, mults);
                        var inst_18968 = cljs.core.vals.call(null, inst_18967);
                        var inst_18969 = cljs.core.seq.call(null, inst_18968);
                        var inst_18970 = inst_18969;
                        var inst_18971 = null;
                        var inst_18972 = 0;
                        var inst_18973 = 0;
                        var state_19029__$1 = function() {
                          var statearr_19035 = state_19029;
                          statearr_19035[8] = inst_18972;
                          statearr_19035[9] = inst_18973;
                          statearr_19035[10] = inst_18971;
                          statearr_19035[11] = inst_18970;
                          return statearr_19035;
                        }();
                        var statearr_19036_19081 = state_19029__$1;
                        statearr_19036_19081[2] = null;
                        statearr_19036_19081[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_19030 === 6) {
                          var inst_18960 = state_19029[7];
                          var inst_19008 = state_19029[12];
                          var inst_19010 = state_19029[13];
                          var inst_19008__$1 = topic_fn.call(null, inst_18960);
                          var inst_19009 = cljs.core.deref.call(null, mults);
                          var inst_19010__$1 = cljs.core.get.call(null, inst_19009, inst_19008__$1);
                          var state_19029__$1 = function() {
                            var statearr_19037 = state_19029;
                            statearr_19037[12] = inst_19008__$1;
                            statearr_19037[13] = inst_19010__$1;
                            return statearr_19037;
                          }();
                          if (cljs.core.truth_(inst_19010__$1)) {
                            var statearr_19038_19082 = state_19029__$1;
                            statearr_19038_19082[1] = 19;
                          } else {
                            var statearr_19039_19083 = state_19029__$1;
                            statearr_19039_19083[1] = 20;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_19030 === 7) {
                            var inst_19025 = state_19029[2];
                            var state_19029__$1 = state_19029;
                            var statearr_19040_19084 = state_19029__$1;
                            statearr_19040_19084[2] = inst_19025;
                            statearr_19040_19084[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19030 === 8) {
                              var inst_18972 = state_19029[8];
                              var inst_18973 = state_19029[9];
                              var inst_18975 = inst_18973 < inst_18972;
                              var inst_18976 = inst_18975;
                              var state_19029__$1 = state_19029;
                              if (cljs.core.truth_(inst_18976)) {
                                var statearr_19044_19085 = state_19029__$1;
                                statearr_19044_19085[1] = 10;
                              } else {
                                var statearr_19045_19086 = state_19029__$1;
                                statearr_19045_19086[1] = 11;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_19030 === 9) {
                                var inst_19006 = state_19029[2];
                                var state_19029__$1 = state_19029;
                                var statearr_19046_19087 = state_19029__$1;
                                statearr_19046_19087[2] = inst_19006;
                                statearr_19046_19087[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_19030 === 10) {
                                  var inst_18972 = state_19029[8];
                                  var inst_18973 = state_19029[9];
                                  var inst_18971 = state_19029[10];
                                  var inst_18970 = state_19029[11];
                                  var inst_18978 = cljs.core._nth.call(null, inst_18971, inst_18973);
                                  var inst_18979 = cljs.core.async.muxch_STAR_.call(null, inst_18978);
                                  var inst_18980 = cljs.core.async.close_BANG_.call(null, inst_18979);
                                  var inst_18981 = inst_18973 + 1;
                                  var tmp19041 = inst_18972;
                                  var tmp19042 = inst_18971;
                                  var tmp19043 = inst_18970;
                                  var inst_18970__$1 = tmp19043;
                                  var inst_18971__$1 = tmp19042;
                                  var inst_18972__$1 = tmp19041;
                                  var inst_18973__$1 = inst_18981;
                                  var state_19029__$1 = function() {
                                    var statearr_19047 = state_19029;
                                    statearr_19047[8] = inst_18972__$1;
                                    statearr_19047[9] = inst_18973__$1;
                                    statearr_19047[10] = inst_18971__$1;
                                    statearr_19047[11] = inst_18970__$1;
                                    statearr_19047[14] = inst_18980;
                                    return statearr_19047;
                                  }();
                                  var statearr_19048_19088 = state_19029__$1;
                                  statearr_19048_19088[2] = null;
                                  statearr_19048_19088[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_19030 === 11) {
                                    var inst_18970 = state_19029[11];
                                    var inst_18984 = state_19029[15];
                                    var inst_18984__$1 = cljs.core.seq.call(null, inst_18970);
                                    var state_19029__$1 = function() {
                                      var statearr_19049 = state_19029;
                                      statearr_19049[15] = inst_18984__$1;
                                      return statearr_19049;
                                    }();
                                    if (inst_18984__$1) {
                                      var statearr_19050_19089 = state_19029__$1;
                                      statearr_19050_19089[1] = 13;
                                    } else {
                                      var statearr_19051_19090 = state_19029__$1;
                                      statearr_19051_19090[1] = 14;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_19030 === 12) {
                                      var inst_19004 = state_19029[2];
                                      var state_19029__$1 = state_19029;
                                      var statearr_19052_19091 = state_19029__$1;
                                      statearr_19052_19091[2] = inst_19004;
                                      statearr_19052_19091[1] = 9;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_19030 === 13) {
                                        var inst_18984 = state_19029[15];
                                        var inst_18986 = cljs.core.chunked_seq_QMARK_.call(null, inst_18984);
                                        var state_19029__$1 = state_19029;
                                        if (inst_18986) {
                                          var statearr_19053_19092 = state_19029__$1;
                                          statearr_19053_19092[1] = 16;
                                        } else {
                                          var statearr_19054_19093 = state_19029__$1;
                                          statearr_19054_19093[1] = 17;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_19030 === 14) {
                                          var state_19029__$1 = state_19029;
                                          var statearr_19055_19094 = state_19029__$1;
                                          statearr_19055_19094[2] = null;
                                          statearr_19055_19094[1] = 15;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_19030 === 15) {
                                            var inst_19002 = state_19029[2];
                                            var state_19029__$1 = state_19029;
                                            var statearr_19056_19095 = state_19029__$1;
                                            statearr_19056_19095[2] = inst_19002;
                                            statearr_19056_19095[1] = 12;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_19030 === 16) {
                                              var inst_18984 = state_19029[15];
                                              var inst_18988 = cljs.core.chunk_first.call(null, inst_18984);
                                              var inst_18989 = cljs.core.chunk_rest.call(null, inst_18984);
                                              var inst_18990 = cljs.core.count.call(null, inst_18988);
                                              var inst_18970 = inst_18989;
                                              var inst_18971 = inst_18988;
                                              var inst_18972 = inst_18990;
                                              var inst_18973 = 0;
                                              var state_19029__$1 = function() {
                                                var statearr_19057 = state_19029;
                                                statearr_19057[8] = inst_18972;
                                                statearr_19057[9] = inst_18973;
                                                statearr_19057[10] = inst_18971;
                                                statearr_19057[11] = inst_18970;
                                                return statearr_19057;
                                              }();
                                              var statearr_19058_19096 = state_19029__$1;
                                              statearr_19058_19096[2] = null;
                                              statearr_19058_19096[1] = 8;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_19030 === 17) {
                                                var inst_18984 = state_19029[15];
                                                var inst_18993 = cljs.core.first.call(null, inst_18984);
                                                var inst_18994 = cljs.core.async.muxch_STAR_.call(null, inst_18993);
                                                var inst_18995 = cljs.core.async.close_BANG_.call(null, inst_18994);
                                                var inst_18996 = cljs.core.next.call(null, inst_18984);
                                                var inst_18970 = inst_18996;
                                                var inst_18971 = null;
                                                var inst_18972 = 0;
                                                var inst_18973 = 0;
                                                var state_19029__$1 = function() {
                                                  var statearr_19059 = state_19029;
                                                  statearr_19059[8] = inst_18972;
                                                  statearr_19059[9] = inst_18973;
                                                  statearr_19059[10] = inst_18971;
                                                  statearr_19059[11] = inst_18970;
                                                  statearr_19059[16] = inst_18995;
                                                  return statearr_19059;
                                                }();
                                                var statearr_19060_19097 = state_19029__$1;
                                                statearr_19060_19097[2] = null;
                                                statearr_19060_19097[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_19030 === 18) {
                                                  var inst_18999 = state_19029[2];
                                                  var state_19029__$1 = state_19029;
                                                  var statearr_19061_19098 = state_19029__$1;
                                                  statearr_19061_19098[2] = inst_18999;
                                                  statearr_19061_19098[1] = 15;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_19030 === 19) {
                                                    var inst_18960 = state_19029[7];
                                                    var inst_19010 = state_19029[13];
                                                    var inst_19012 = cljs.core.async.muxch_STAR_.call(null, inst_19010);
                                                    var state_19029__$1 = state_19029;
                                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19029__$1, 22, inst_19012, inst_18960);
                                                  } else {
                                                    if (state_val_19030 === 20) {
                                                      var state_19029__$1 = state_19029;
                                                      var statearr_19062_19099 = state_19029__$1;
                                                      statearr_19062_19099[2] = null;
                                                      statearr_19062_19099[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_19030 === 21) {
                                                        var inst_19022 = state_19029[2];
                                                        var state_19029__$1 = function() {
                                                          var statearr_19063 = state_19029;
                                                          statearr_19063[17] = inst_19022;
                                                          return statearr_19063;
                                                        }();
                                                        var statearr_19064_19100 = state_19029__$1;
                                                        statearr_19064_19100[2] = null;
                                                        statearr_19064_19100[1] = 2;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_19030 === 22) {
                                                          var inst_19014 = state_19029[2];
                                                          var state_19029__$1 = state_19029;
                                                          if (cljs.core.truth_(inst_19014)) {
                                                            var statearr_19065_19101 = state_19029__$1;
                                                            statearr_19065_19101[1] = 23;
                                                          } else {
                                                            var statearr_19066_19102 = state_19029__$1;
                                                            statearr_19066_19102[1] = 24;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_19030 === 23) {
                                                            var state_19029__$1 = state_19029;
                                                            var statearr_19067_19103 = state_19029__$1;
                                                            statearr_19067_19103[2] = null;
                                                            statearr_19067_19103[1] = 25;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_19030 === 24) {
                                                              var inst_19008 = state_19029[12];
                                                              var inst_19017 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_19008);
                                                              var state_19029__$1 = state_19029;
                                                              var statearr_19068_19104 = state_19029__$1;
                                                              statearr_19068_19104[2] = inst_19017;
                                                              statearr_19068_19104[1] = 25;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_19030 === 25) {
                                                                var inst_19019 = state_19029[2];
                                                                var state_19029__$1 = state_19029;
                                                                var statearr_19069_19105 = state_19029__$1;
                                                                statearr_19069_19105[2] = inst_19019;
                                                                statearr_19069_19105[1] = 21;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto___19077, mults, ensure_mult, p);
          return function(switch__10455__auto__, c__10470__auto___19077, mults, ensure_mult, p) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_19073 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19073[0] = state_machine__10456__auto__;
                statearr_19073[1] = 1;
                return statearr_19073;
              };
              var state_machine__10456__auto____1 = function(state_19029) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_19029);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e19074) {
                      if (e19074 instanceof Object) {
                        var ex__10459__auto__ = e19074;
                        var statearr_19075_19106 = state_19029;
                        statearr_19075_19106[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19029);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e19074;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__19107 = state_19029;
                    state_19029 = G__19107;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_19029) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_19029);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto___19077, mults, ensure_mult, p);
        }();
        var state__10472__auto__ = function() {
          var statearr_19076 = f__10471__auto__.call(null);
          statearr_19076[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___19077;
          return statearr_19076;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto___19077, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__10470__auto___19244 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___19244, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto___19244, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_19214) {
              var state_val_19215 = state_19214[1];
              if (state_val_19215 === 1) {
                var state_19214__$1 = state_19214;
                var statearr_19216_19245 = state_19214__$1;
                statearr_19216_19245[2] = null;
                statearr_19216_19245[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19215 === 2) {
                  var inst_19177 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                  var inst_19178 = 0;
                  var state_19214__$1 = function() {
                    var statearr_19217 = state_19214;
                    statearr_19217[7] = inst_19178;
                    statearr_19217[8] = inst_19177;
                    return statearr_19217;
                  }();
                  var statearr_19218_19246 = state_19214__$1;
                  statearr_19218_19246[2] = null;
                  statearr_19218_19246[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_19215 === 3) {
                    var inst_19212 = state_19214[2];
                    var state_19214__$1 = state_19214;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19214__$1, inst_19212);
                  } else {
                    if (state_val_19215 === 4) {
                      var inst_19178 = state_19214[7];
                      var inst_19180 = inst_19178 < cnt;
                      var state_19214__$1 = state_19214;
                      if (cljs.core.truth_(inst_19180)) {
                        var statearr_19219_19247 = state_19214__$1;
                        statearr_19219_19247[1] = 6;
                      } else {
                        var statearr_19220_19248 = state_19214__$1;
                        statearr_19220_19248[1] = 7;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_19215 === 5) {
                        var inst_19198 = state_19214[2];
                        var state_19214__$1 = function() {
                          var statearr_19221 = state_19214;
                          statearr_19221[9] = inst_19198;
                          return statearr_19221;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19214__$1, 12, dchan);
                      } else {
                        if (state_val_19215 === 6) {
                          var state_19214__$1 = state_19214;
                          var statearr_19222_19249 = state_19214__$1;
                          statearr_19222_19249[2] = null;
                          statearr_19222_19249[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_19215 === 7) {
                            var state_19214__$1 = state_19214;
                            var statearr_19223_19250 = state_19214__$1;
                            statearr_19223_19250[2] = null;
                            statearr_19223_19250[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19215 === 8) {
                              var inst_19196 = state_19214[2];
                              var state_19214__$1 = state_19214;
                              var statearr_19224_19251 = state_19214__$1;
                              statearr_19224_19251[2] = inst_19196;
                              statearr_19224_19251[1] = 5;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_19215 === 9) {
                                var inst_19178 = state_19214[7];
                                var inst_19191 = state_19214[2];
                                var inst_19192 = inst_19178 + 1;
                                var inst_19178__$1 = inst_19192;
                                var state_19214__$1 = function() {
                                  var statearr_19225 = state_19214;
                                  statearr_19225[7] = inst_19178__$1;
                                  statearr_19225[10] = inst_19191;
                                  return statearr_19225;
                                }();
                                var statearr_19226_19252 = state_19214__$1;
                                statearr_19226_19252[2] = null;
                                statearr_19226_19252[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_19215 === 10) {
                                  var inst_19182 = state_19214[2];
                                  var inst_19183 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                  var state_19214__$1 = function() {
                                    var statearr_19227 = state_19214;
                                    statearr_19227[11] = inst_19182;
                                    return statearr_19227;
                                  }();
                                  var statearr_19228_19253 = state_19214__$1;
                                  statearr_19228_19253[2] = inst_19183;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19214__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_19215 === 11) {
                                    var inst_19178 = state_19214[7];
                                    var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_19214, 10, Object, null, 9);
                                    var inst_19187 = chs__$1.call(null, inst_19178);
                                    var inst_19188 = done.call(null, inst_19178);
                                    var inst_19189 = cljs.core.async.take_BANG_.call(null, inst_19187, inst_19188);
                                    var state_19214__$1 = state_19214;
                                    var statearr_19229_19254 = state_19214__$1;
                                    statearr_19229_19254[2] = inst_19189;
                                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19214__$1);
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_19215 === 12) {
                                      var inst_19200 = state_19214[12];
                                      var inst_19200__$1 = state_19214[2];
                                      var inst_19201 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_19200__$1);
                                      var state_19214__$1 = function() {
                                        var statearr_19230 = state_19214;
                                        statearr_19230[12] = inst_19200__$1;
                                        return statearr_19230;
                                      }();
                                      if (cljs.core.truth_(inst_19201)) {
                                        var statearr_19231_19255 = state_19214__$1;
                                        statearr_19231_19255[1] = 13;
                                      } else {
                                        var statearr_19232_19256 = state_19214__$1;
                                        statearr_19232_19256[1] = 14;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_19215 === 13) {
                                        var inst_19203 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_19214__$1 = state_19214;
                                        var statearr_19233_19257 = state_19214__$1;
                                        statearr_19233_19257[2] = inst_19203;
                                        statearr_19233_19257[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_19215 === 14) {
                                          var inst_19200 = state_19214[12];
                                          var inst_19205 = cljs.core.apply.call(null, f, inst_19200);
                                          var state_19214__$1 = state_19214;
                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19214__$1, 16, out, inst_19205);
                                        } else {
                                          if (state_val_19215 === 15) {
                                            var inst_19210 = state_19214[2];
                                            var state_19214__$1 = state_19214;
                                            var statearr_19234_19258 = state_19214__$1;
                                            statearr_19234_19258[2] = inst_19210;
                                            statearr_19234_19258[1] = 3;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_19215 === 16) {
                                              var inst_19207 = state_19214[2];
                                              var state_19214__$1 = function() {
                                                var statearr_19235 = state_19214;
                                                statearr_19235[13] = inst_19207;
                                                return statearr_19235;
                                              }();
                                              var statearr_19236_19259 = state_19214__$1;
                                              statearr_19236_19259[2] = null;
                                              statearr_19236_19259[1] = 2;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto___19244, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__10455__auto__, c__10470__auto___19244, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_19240 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19240[0] = state_machine__10456__auto__;
                statearr_19240[1] = 1;
                return statearr_19240;
              };
              var state_machine__10456__auto____1 = function(state_19214) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_19214);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e19241) {
                      if (e19241 instanceof Object) {
                        var ex__10459__auto__ = e19241;
                        var statearr_19242_19260 = state_19214;
                        statearr_19242_19260[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19214);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e19241;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__19261 = state_19214;
                    state_19214 = G__19261;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_19214) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_19214);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto___19244, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__10472__auto__ = function() {
          var statearr_19243 = f__10471__auto__.call(null);
          statearr_19243[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___19244;
          return statearr_19243;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto___19244, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10470__auto___19369 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___19369, out) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto___19369, out) {
            return function(state_19345) {
              var state_val_19346 = state_19345[1];
              if (state_val_19346 === 1) {
                var inst_19316 = cljs.core.vec.call(null, chs);
                var inst_19317 = inst_19316;
                var state_19345__$1 = function() {
                  var statearr_19347 = state_19345;
                  statearr_19347[7] = inst_19317;
                  return statearr_19347;
                }();
                var statearr_19348_19370 = state_19345__$1;
                statearr_19348_19370[2] = null;
                statearr_19348_19370[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19346 === 2) {
                  var inst_19317 = state_19345[7];
                  var inst_19319 = cljs.core.count.call(null, inst_19317);
                  var inst_19320 = inst_19319 > 0;
                  var state_19345__$1 = state_19345;
                  if (cljs.core.truth_(inst_19320)) {
                    var statearr_19349_19371 = state_19345__$1;
                    statearr_19349_19371[1] = 4;
                  } else {
                    var statearr_19350_19372 = state_19345__$1;
                    statearr_19350_19372[1] = 5;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_19346 === 3) {
                    var inst_19343 = state_19345[2];
                    var state_19345__$1 = state_19345;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19345__$1, inst_19343);
                  } else {
                    if (state_val_19346 === 4) {
                      var inst_19317 = state_19345[7];
                      var state_19345__$1 = state_19345;
                      return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_19345__$1, 7, inst_19317);
                    } else {
                      if (state_val_19346 === 5) {
                        var inst_19339 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19345__$1 = state_19345;
                        var statearr_19351_19373 = state_19345__$1;
                        statearr_19351_19373[2] = inst_19339;
                        statearr_19351_19373[1] = 6;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_19346 === 6) {
                          var inst_19341 = state_19345[2];
                          var state_19345__$1 = state_19345;
                          var statearr_19352_19374 = state_19345__$1;
                          statearr_19352_19374[2] = inst_19341;
                          statearr_19352_19374[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_19346 === 7) {
                            var inst_19324 = state_19345[8];
                            var inst_19325 = state_19345[9];
                            var inst_19324__$1 = state_19345[2];
                            var inst_19325__$1 = cljs.core.nth.call(null, inst_19324__$1, 0, null);
                            var inst_19326 = cljs.core.nth.call(null, inst_19324__$1, 1, null);
                            var inst_19327 = inst_19325__$1 == null;
                            var state_19345__$1 = function() {
                              var statearr_19353 = state_19345;
                              statearr_19353[10] = inst_19326;
                              statearr_19353[8] = inst_19324__$1;
                              statearr_19353[9] = inst_19325__$1;
                              return statearr_19353;
                            }();
                            if (cljs.core.truth_(inst_19327)) {
                              var statearr_19354_19375 = state_19345__$1;
                              statearr_19354_19375[1] = 8;
                            } else {
                              var statearr_19355_19376 = state_19345__$1;
                              statearr_19355_19376[1] = 9;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19346 === 8) {
                              var inst_19326 = state_19345[10];
                              var inst_19324 = state_19345[8];
                              var inst_19325 = state_19345[9];
                              var inst_19317 = state_19345[7];
                              var inst_19329 = function() {
                                var c = inst_19326;
                                var v = inst_19325;
                                var vec__19322 = inst_19324;
                                var cs = inst_19317;
                                return function(c, v, vec__19322, cs, inst_19326, inst_19324, inst_19325, inst_19317, state_val_19346, c__10470__auto___19369, out) {
                                  return function(p1__19262_SHARP_) {
                                    return cljs.core.not_EQ_.call(null, c, p1__19262_SHARP_);
                                  };
                                }(c, v, vec__19322, cs, inst_19326, inst_19324, inst_19325, inst_19317, state_val_19346, c__10470__auto___19369, out);
                              }();
                              var inst_19330 = cljs.core.filterv.call(null, inst_19329, inst_19317);
                              var inst_19317__$1 = inst_19330;
                              var state_19345__$1 = function() {
                                var statearr_19356 = state_19345;
                                statearr_19356[7] = inst_19317__$1;
                                return statearr_19356;
                              }();
                              var statearr_19357_19377 = state_19345__$1;
                              statearr_19357_19377[2] = null;
                              statearr_19357_19377[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_19346 === 9) {
                                var inst_19325 = state_19345[9];
                                var state_19345__$1 = state_19345;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19345__$1, 11, out, inst_19325);
                              } else {
                                if (state_val_19346 === 10) {
                                  var inst_19337 = state_19345[2];
                                  var state_19345__$1 = state_19345;
                                  var statearr_19359_19378 = state_19345__$1;
                                  statearr_19359_19378[2] = inst_19337;
                                  statearr_19359_19378[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_19346 === 11) {
                                    var inst_19317 = state_19345[7];
                                    var inst_19334 = state_19345[2];
                                    var tmp19358 = inst_19317;
                                    var inst_19317__$1 = tmp19358;
                                    var state_19345__$1 = function() {
                                      var statearr_19360 = state_19345;
                                      statearr_19360[11] = inst_19334;
                                      statearr_19360[7] = inst_19317__$1;
                                      return statearr_19360;
                                    }();
                                    var statearr_19361_19379 = state_19345__$1;
                                    statearr_19361_19379[2] = null;
                                    statearr_19361_19379[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto___19369, out);
          return function(switch__10455__auto__, c__10470__auto___19369, out) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_19365 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19365[0] = state_machine__10456__auto__;
                statearr_19365[1] = 1;
                return statearr_19365;
              };
              var state_machine__10456__auto____1 = function(state_19345) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_19345);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e19366) {
                      if (e19366 instanceof Object) {
                        var ex__10459__auto__ = e19366;
                        var statearr_19367_19380 = state_19345;
                        statearr_19367_19380[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19345);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e19366;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__19381 = state_19345;
                    state_19345 = G__19381;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_19345) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_19345);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto___19369, out);
        }();
        var state__10472__auto__ = function() {
          var statearr_19368 = f__10471__auto__.call(null);
          statearr_19368[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___19369;
          return statearr_19368;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto___19369, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10470__auto___19474 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___19474, out) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto___19474, out) {
            return function(state_19451) {
              var state_val_19452 = state_19451[1];
              if (state_val_19452 === 1) {
                var inst_19428 = 0;
                var state_19451__$1 = function() {
                  var statearr_19453 = state_19451;
                  statearr_19453[7] = inst_19428;
                  return statearr_19453;
                }();
                var statearr_19454_19475 = state_19451__$1;
                statearr_19454_19475[2] = null;
                statearr_19454_19475[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19452 === 2) {
                  var inst_19428 = state_19451[7];
                  var inst_19430 = inst_19428 < n;
                  var state_19451__$1 = state_19451;
                  if (cljs.core.truth_(inst_19430)) {
                    var statearr_19455_19476 = state_19451__$1;
                    statearr_19455_19476[1] = 4;
                  } else {
                    var statearr_19456_19477 = state_19451__$1;
                    statearr_19456_19477[1] = 5;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_19452 === 3) {
                    var inst_19448 = state_19451[2];
                    var inst_19449 = cljs.core.async.close_BANG_.call(null, out);
                    var state_19451__$1 = function() {
                      var statearr_19457 = state_19451;
                      statearr_19457[8] = inst_19448;
                      return statearr_19457;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19451__$1, inst_19449);
                  } else {
                    if (state_val_19452 === 4) {
                      var state_19451__$1 = state_19451;
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19451__$1, 7, ch);
                    } else {
                      if (state_val_19452 === 5) {
                        var state_19451__$1 = state_19451;
                        var statearr_19458_19478 = state_19451__$1;
                        statearr_19458_19478[2] = null;
                        statearr_19458_19478[1] = 6;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_19452 === 6) {
                          var inst_19446 = state_19451[2];
                          var state_19451__$1 = state_19451;
                          var statearr_19459_19479 = state_19451__$1;
                          statearr_19459_19479[2] = inst_19446;
                          statearr_19459_19479[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_19452 === 7) {
                            var inst_19433 = state_19451[9];
                            var inst_19433__$1 = state_19451[2];
                            var inst_19434 = inst_19433__$1 == null;
                            var inst_19435 = cljs.core.not.call(null, inst_19434);
                            var state_19451__$1 = function() {
                              var statearr_19460 = state_19451;
                              statearr_19460[9] = inst_19433__$1;
                              return statearr_19460;
                            }();
                            if (inst_19435) {
                              var statearr_19461_19480 = state_19451__$1;
                              statearr_19461_19480[1] = 8;
                            } else {
                              var statearr_19462_19481 = state_19451__$1;
                              statearr_19462_19481[1] = 9;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19452 === 8) {
                              var inst_19433 = state_19451[9];
                              var state_19451__$1 = state_19451;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19451__$1, 11, out, inst_19433);
                            } else {
                              if (state_val_19452 === 9) {
                                var state_19451__$1 = state_19451;
                                var statearr_19463_19482 = state_19451__$1;
                                statearr_19463_19482[2] = null;
                                statearr_19463_19482[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_19452 === 10) {
                                  var inst_19443 = state_19451[2];
                                  var state_19451__$1 = state_19451;
                                  var statearr_19464_19483 = state_19451__$1;
                                  statearr_19464_19483[2] = inst_19443;
                                  statearr_19464_19483[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_19452 === 11) {
                                    var inst_19428 = state_19451[7];
                                    var inst_19438 = state_19451[2];
                                    var inst_19439 = inst_19428 + 1;
                                    var inst_19428__$1 = inst_19439;
                                    var state_19451__$1 = function() {
                                      var statearr_19465 = state_19451;
                                      statearr_19465[7] = inst_19428__$1;
                                      statearr_19465[10] = inst_19438;
                                      return statearr_19465;
                                    }();
                                    var statearr_19466_19484 = state_19451__$1;
                                    statearr_19466_19484[2] = null;
                                    statearr_19466_19484[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto___19474, out);
          return function(switch__10455__auto__, c__10470__auto___19474, out) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_19470 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_19470[0] = state_machine__10456__auto__;
                statearr_19470[1] = 1;
                return statearr_19470;
              };
              var state_machine__10456__auto____1 = function(state_19451) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_19451);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e19471) {
                      if (e19471 instanceof Object) {
                        var ex__10459__auto__ = e19471;
                        var statearr_19472_19485 = state_19451;
                        statearr_19472_19485[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19451);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e19471;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__19486 = state_19451;
                    state_19451 = G__19486;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_19451) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_19451);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto___19474, out);
        }();
        var state__10472__auto__ = function() {
          var statearr_19473 = f__10471__auto__.call(null);
          statearr_19473[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___19474;
          return statearr_19473;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto___19474, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10470__auto___19583 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___19583, out) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto___19583, out) {
            return function(state_19558) {
              var state_val_19559 = state_19558[1];
              if (state_val_19559 === 1) {
                var inst_19535 = null;
                var state_19558__$1 = function() {
                  var statearr_19560 = state_19558;
                  statearr_19560[7] = inst_19535;
                  return statearr_19560;
                }();
                var statearr_19561_19584 = state_19558__$1;
                statearr_19561_19584[2] = null;
                statearr_19561_19584[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19559 === 2) {
                  var state_19558__$1 = state_19558;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19558__$1, 4, ch);
                } else {
                  if (state_val_19559 === 3) {
                    var inst_19555 = state_19558[2];
                    var inst_19556 = cljs.core.async.close_BANG_.call(null, out);
                    var state_19558__$1 = function() {
                      var statearr_19562 = state_19558;
                      statearr_19562[8] = inst_19555;
                      return statearr_19562;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19558__$1, inst_19556);
                  } else {
                    if (state_val_19559 === 4) {
                      var inst_19538 = state_19558[9];
                      var inst_19538__$1 = state_19558[2];
                      var inst_19539 = inst_19538__$1 == null;
                      var inst_19540 = cljs.core.not.call(null, inst_19539);
                      var state_19558__$1 = function() {
                        var statearr_19563 = state_19558;
                        statearr_19563[9] = inst_19538__$1;
                        return statearr_19563;
                      }();
                      if (inst_19540) {
                        var statearr_19564_19585 = state_19558__$1;
                        statearr_19564_19585[1] = 5;
                      } else {
                        var statearr_19565_19586 = state_19558__$1;
                        statearr_19565_19586[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_19559 === 5) {
                        var inst_19535 = state_19558[7];
                        var inst_19538 = state_19558[9];
                        var inst_19542 = cljs.core._EQ_.call(null, inst_19538, inst_19535);
                        var state_19558__$1 = state_19558;
                        if (inst_19542) {
                          var statearr_19566_19587 = state_19558__$1;
                          statearr_19566_19587[1] = 8;
                        } else {
                          var statearr_19567_19588 = state_19558__$1;
                          statearr_19567_19588[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_19559 === 6) {
                          var state_19558__$1 = state_19558;
                          var statearr_19569_19589 = state_19558__$1;
                          statearr_19569_19589[2] = null;
                          statearr_19569_19589[1] = 7;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_19559 === 7) {
                            var inst_19553 = state_19558[2];
                            var state_19558__$1 = state_19558;
                            var statearr_19570_19590 = state_19558__$1;
                            statearr_19570_19590[2] = inst_19553;
                            statearr_19570_19590[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19559 === 8) {
                              var inst_19535 = state_19558[7];
                              var tmp19568 = inst_19535;
                              var inst_19535__$1 = tmp19568;
                              var state_19558__$1 = function() {
                                var statearr_19571 = state_19558;
                                statearr_19571[7] = inst_19535__$1;
                                return statearr_19571;
                              }();
                              var statearr_19572_19591 = state_19558__$1;
                              statearr_19572_19591[2] = null;
                              statearr_19572_19591[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_19559 === 9) {
                                var inst_19538 = state_19558[9];
                                var state_19558__$1 = state_19558;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19558__$1, 11, out, inst_19538);
                              } else {
                                if (state_val_19559 === 10) {
                                  var inst_19550 = state_19558[2];
                                  var state_19558__$1 = state_19558;
                                  var statearr_19573_19592 = state_19558__$1;
                                  statearr_19573_19592[2] = inst_19550;
                                  statearr_19573_19592[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_19559 === 11) {
                                    var inst_19538 = state_19558[9];
                                    var inst_19547 = state_19558[2];
                                    var inst_19535 = inst_19538;
                                    var state_19558__$1 = function() {
                                      var statearr_19574 = state_19558;
                                      statearr_19574[7] = inst_19535;
                                      statearr_19574[10] = inst_19547;
                                      return statearr_19574;
                                    }();
                                    var statearr_19575_19593 = state_19558__$1;
                                    statearr_19575_19593[2] = null;
                                    statearr_19575_19593[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto___19583, out);
          return function(switch__10455__auto__, c__10470__auto___19583, out) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_19579 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_19579[0] = state_machine__10456__auto__;
                statearr_19579[1] = 1;
                return statearr_19579;
              };
              var state_machine__10456__auto____1 = function(state_19558) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_19558);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e19580) {
                      if (e19580 instanceof Object) {
                        var ex__10459__auto__ = e19580;
                        var statearr_19581_19594 = state_19558;
                        statearr_19581_19594[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19558);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e19580;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__19595 = state_19558;
                    state_19558 = G__19595;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_19558) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_19558);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto___19583, out);
        }();
        var state__10472__auto__ = function() {
          var statearr_19582 = f__10471__auto__.call(null);
          statearr_19582[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___19583;
          return statearr_19582;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto___19583, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10470__auto___19730 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___19730, out) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto___19730, out) {
            return function(state_19700) {
              var state_val_19701 = state_19700[1];
              if (state_val_19701 === 1) {
                var inst_19663 = new Array(n);
                var inst_19664 = inst_19663;
                var inst_19665 = 0;
                var state_19700__$1 = function() {
                  var statearr_19702 = state_19700;
                  statearr_19702[7] = inst_19665;
                  statearr_19702[8] = inst_19664;
                  return statearr_19702;
                }();
                var statearr_19703_19731 = state_19700__$1;
                statearr_19703_19731[2] = null;
                statearr_19703_19731[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19701 === 2) {
                  var state_19700__$1 = state_19700;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19700__$1, 4, ch);
                } else {
                  if (state_val_19701 === 3) {
                    var inst_19698 = state_19700[2];
                    var state_19700__$1 = state_19700;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19700__$1, inst_19698);
                  } else {
                    if (state_val_19701 === 4) {
                      var inst_19668 = state_19700[9];
                      var inst_19668__$1 = state_19700[2];
                      var inst_19669 = inst_19668__$1 == null;
                      var inst_19670 = cljs.core.not.call(null, inst_19669);
                      var state_19700__$1 = function() {
                        var statearr_19704 = state_19700;
                        statearr_19704[9] = inst_19668__$1;
                        return statearr_19704;
                      }();
                      if (inst_19670) {
                        var statearr_19705_19732 = state_19700__$1;
                        statearr_19705_19732[1] = 5;
                      } else {
                        var statearr_19706_19733 = state_19700__$1;
                        statearr_19706_19733[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_19701 === 5) {
                        var inst_19668 = state_19700[9];
                        var inst_19665 = state_19700[7];
                        var inst_19664 = state_19700[8];
                        var inst_19673 = state_19700[10];
                        var inst_19672 = inst_19664[inst_19665] = inst_19668;
                        var inst_19673__$1 = inst_19665 + 1;
                        var inst_19674 = inst_19673__$1 < n;
                        var state_19700__$1 = function() {
                          var statearr_19707 = state_19700;
                          statearr_19707[10] = inst_19673__$1;
                          statearr_19707[11] = inst_19672;
                          return statearr_19707;
                        }();
                        if (cljs.core.truth_(inst_19674)) {
                          var statearr_19708_19734 = state_19700__$1;
                          statearr_19708_19734[1] = 8;
                        } else {
                          var statearr_19709_19735 = state_19700__$1;
                          statearr_19709_19735[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_19701 === 6) {
                          var inst_19665 = state_19700[7];
                          var inst_19686 = inst_19665 > 0;
                          var state_19700__$1 = state_19700;
                          if (cljs.core.truth_(inst_19686)) {
                            var statearr_19711_19736 = state_19700__$1;
                            statearr_19711_19736[1] = 12;
                          } else {
                            var statearr_19712_19737 = state_19700__$1;
                            statearr_19712_19737[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_19701 === 7) {
                            var inst_19696 = state_19700[2];
                            var state_19700__$1 = state_19700;
                            var statearr_19713_19738 = state_19700__$1;
                            statearr_19713_19738[2] = inst_19696;
                            statearr_19713_19738[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19701 === 8) {
                              var inst_19664 = state_19700[8];
                              var inst_19673 = state_19700[10];
                              var tmp19710 = inst_19664;
                              var inst_19664__$1 = tmp19710;
                              var inst_19665 = inst_19673;
                              var state_19700__$1 = function() {
                                var statearr_19714 = state_19700;
                                statearr_19714[7] = inst_19665;
                                statearr_19714[8] = inst_19664__$1;
                                return statearr_19714;
                              }();
                              var statearr_19715_19739 = state_19700__$1;
                              statearr_19715_19739[2] = null;
                              statearr_19715_19739[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_19701 === 9) {
                                var inst_19664 = state_19700[8];
                                var inst_19678 = cljs.core.vec.call(null, inst_19664);
                                var state_19700__$1 = state_19700;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19700__$1, 11, out, inst_19678);
                              } else {
                                if (state_val_19701 === 10) {
                                  var inst_19684 = state_19700[2];
                                  var state_19700__$1 = state_19700;
                                  var statearr_19716_19740 = state_19700__$1;
                                  statearr_19716_19740[2] = inst_19684;
                                  statearr_19716_19740[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_19701 === 11) {
                                    var inst_19680 = state_19700[2];
                                    var inst_19681 = new Array(n);
                                    var inst_19664 = inst_19681;
                                    var inst_19665 = 0;
                                    var state_19700__$1 = function() {
                                      var statearr_19717 = state_19700;
                                      statearr_19717[12] = inst_19680;
                                      statearr_19717[7] = inst_19665;
                                      statearr_19717[8] = inst_19664;
                                      return statearr_19717;
                                    }();
                                    var statearr_19718_19741 = state_19700__$1;
                                    statearr_19718_19741[2] = null;
                                    statearr_19718_19741[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_19701 === 12) {
                                      var inst_19664 = state_19700[8];
                                      var inst_19688 = cljs.core.vec.call(null, inst_19664);
                                      var state_19700__$1 = state_19700;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19700__$1, 15, out, inst_19688);
                                    } else {
                                      if (state_val_19701 === 13) {
                                        var state_19700__$1 = state_19700;
                                        var statearr_19719_19742 = state_19700__$1;
                                        statearr_19719_19742[2] = null;
                                        statearr_19719_19742[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_19701 === 14) {
                                          var inst_19693 = state_19700[2];
                                          var inst_19694 = cljs.core.async.close_BANG_.call(null, out);
                                          var state_19700__$1 = function() {
                                            var statearr_19720 = state_19700;
                                            statearr_19720[13] = inst_19693;
                                            return statearr_19720;
                                          }();
                                          var statearr_19721_19743 = state_19700__$1;
                                          statearr_19721_19743[2] = inst_19694;
                                          statearr_19721_19743[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_19701 === 15) {
                                            var inst_19690 = state_19700[2];
                                            var state_19700__$1 = state_19700;
                                            var statearr_19722_19744 = state_19700__$1;
                                            statearr_19722_19744[2] = inst_19690;
                                            statearr_19722_19744[1] = 14;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto___19730, out);
          return function(switch__10455__auto__, c__10470__auto___19730, out) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_19726 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19726[0] = state_machine__10456__auto__;
                statearr_19726[1] = 1;
                return statearr_19726;
              };
              var state_machine__10456__auto____1 = function(state_19700) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_19700);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e19727) {
                      if (e19727 instanceof Object) {
                        var ex__10459__auto__ = e19727;
                        var statearr_19728_19745 = state_19700;
                        statearr_19728_19745[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19700);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e19727;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__19746 = state_19700;
                    state_19700 = G__19746;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_19700) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_19700);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto___19730, out);
        }();
        var state__10472__auto__ = function() {
          var statearr_19729 = f__10471__auto__.call(null);
          statearr_19729[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___19730;
          return statearr_19729;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto___19730, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10470__auto___19889 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___19889, out) {
      return function() {
        var f__10471__auto__ = function() {
          var switch__10455__auto__ = function(c__10470__auto___19889, out) {
            return function(state_19859) {
              var state_val_19860 = state_19859[1];
              if (state_val_19860 === 1) {
                var inst_19818 = [];
                var inst_19819 = inst_19818;
                var inst_19820 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538);
                var state_19859__$1 = function() {
                  var statearr_19861 = state_19859;
                  statearr_19861[7] = inst_19819;
                  statearr_19861[8] = inst_19820;
                  return statearr_19861;
                }();
                var statearr_19862_19890 = state_19859__$1;
                statearr_19862_19890[2] = null;
                statearr_19862_19890[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19860 === 2) {
                  var state_19859__$1 = state_19859;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19859__$1, 4, ch);
                } else {
                  if (state_val_19860 === 3) {
                    var inst_19857 = state_19859[2];
                    var state_19859__$1 = state_19859;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19859__$1, inst_19857);
                  } else {
                    if (state_val_19860 === 4) {
                      var inst_19823 = state_19859[9];
                      var inst_19823__$1 = state_19859[2];
                      var inst_19824 = inst_19823__$1 == null;
                      var inst_19825 = cljs.core.not.call(null, inst_19824);
                      var state_19859__$1 = function() {
                        var statearr_19863 = state_19859;
                        statearr_19863[9] = inst_19823__$1;
                        return statearr_19863;
                      }();
                      if (inst_19825) {
                        var statearr_19864_19891 = state_19859__$1;
                        statearr_19864_19891[1] = 5;
                      } else {
                        var statearr_19865_19892 = state_19859__$1;
                        statearr_19865_19892[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_19860 === 5) {
                        var inst_19823 = state_19859[9];
                        var inst_19820 = state_19859[8];
                        var inst_19827 = state_19859[10];
                        var inst_19827__$1 = f.call(null, inst_19823);
                        var inst_19828 = cljs.core._EQ_.call(null, inst_19827__$1, inst_19820);
                        var inst_19829 = cljs.core.keyword_identical_QMARK_.call(null, inst_19820, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538));
                        var inst_19830 = inst_19828 || inst_19829;
                        var state_19859__$1 = function() {
                          var statearr_19866 = state_19859;
                          statearr_19866[10] = inst_19827__$1;
                          return statearr_19866;
                        }();
                        if (cljs.core.truth_(inst_19830)) {
                          var statearr_19867_19893 = state_19859__$1;
                          statearr_19867_19893[1] = 8;
                        } else {
                          var statearr_19868_19894 = state_19859__$1;
                          statearr_19868_19894[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_19860 === 6) {
                          var inst_19819 = state_19859[7];
                          var inst_19844 = inst_19819.length;
                          var inst_19845 = inst_19844 > 0;
                          var state_19859__$1 = state_19859;
                          if (cljs.core.truth_(inst_19845)) {
                            var statearr_19870_19895 = state_19859__$1;
                            statearr_19870_19895[1] = 12;
                          } else {
                            var statearr_19871_19896 = state_19859__$1;
                            statearr_19871_19896[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_19860 === 7) {
                            var inst_19855 = state_19859[2];
                            var state_19859__$1 = state_19859;
                            var statearr_19872_19897 = state_19859__$1;
                            statearr_19872_19897[2] = inst_19855;
                            statearr_19872_19897[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19860 === 8) {
                              var inst_19819 = state_19859[7];
                              var inst_19823 = state_19859[9];
                              var inst_19827 = state_19859[10];
                              var inst_19832 = inst_19819.push(inst_19823);
                              var tmp19869 = inst_19819;
                              var inst_19819__$1 = tmp19869;
                              var inst_19820 = inst_19827;
                              var state_19859__$1 = function() {
                                var statearr_19873 = state_19859;
                                statearr_19873[7] = inst_19819__$1;
                                statearr_19873[8] = inst_19820;
                                statearr_19873[11] = inst_19832;
                                return statearr_19873;
                              }();
                              var statearr_19874_19898 = state_19859__$1;
                              statearr_19874_19898[2] = null;
                              statearr_19874_19898[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_19860 === 9) {
                                var inst_19819 = state_19859[7];
                                var inst_19835 = cljs.core.vec.call(null, inst_19819);
                                var state_19859__$1 = state_19859;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19859__$1, 11, out, inst_19835);
                              } else {
                                if (state_val_19860 === 10) {
                                  var inst_19842 = state_19859[2];
                                  var state_19859__$1 = state_19859;
                                  var statearr_19875_19899 = state_19859__$1;
                                  statearr_19875_19899[2] = inst_19842;
                                  statearr_19875_19899[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_19860 === 11) {
                                    var inst_19823 = state_19859[9];
                                    var inst_19827 = state_19859[10];
                                    var inst_19837 = state_19859[2];
                                    var inst_19838 = [];
                                    var inst_19839 = inst_19838.push(inst_19823);
                                    var inst_19819 = inst_19838;
                                    var inst_19820 = inst_19827;
                                    var state_19859__$1 = function() {
                                      var statearr_19876 = state_19859;
                                      statearr_19876[7] = inst_19819;
                                      statearr_19876[8] = inst_19820;
                                      statearr_19876[12] = inst_19839;
                                      statearr_19876[13] = inst_19837;
                                      return statearr_19876;
                                    }();
                                    var statearr_19877_19900 = state_19859__$1;
                                    statearr_19877_19900[2] = null;
                                    statearr_19877_19900[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_19860 === 12) {
                                      var inst_19819 = state_19859[7];
                                      var inst_19847 = cljs.core.vec.call(null, inst_19819);
                                      var state_19859__$1 = state_19859;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19859__$1, 15, out, inst_19847);
                                    } else {
                                      if (state_val_19860 === 13) {
                                        var state_19859__$1 = state_19859;
                                        var statearr_19878_19901 = state_19859__$1;
                                        statearr_19878_19901[2] = null;
                                        statearr_19878_19901[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_19860 === 14) {
                                          var inst_19852 = state_19859[2];
                                          var inst_19853 = cljs.core.async.close_BANG_.call(null, out);
                                          var state_19859__$1 = function() {
                                            var statearr_19879 = state_19859;
                                            statearr_19879[14] = inst_19852;
                                            return statearr_19879;
                                          }();
                                          var statearr_19880_19902 = state_19859__$1;
                                          statearr_19880_19902[2] = inst_19853;
                                          statearr_19880_19902[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_19860 === 15) {
                                            var inst_19849 = state_19859[2];
                                            var state_19859__$1 = state_19859;
                                            var statearr_19881_19903 = state_19859__$1;
                                            statearr_19881_19903[2] = inst_19849;
                                            statearr_19881_19903[1] = 14;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10470__auto___19889, out);
          return function(switch__10455__auto__, c__10470__auto___19889, out) {
            return function() {
              var state_machine__10456__auto__ = null;
              var state_machine__10456__auto____0 = function() {
                var statearr_19885 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19885[0] = state_machine__10456__auto__;
                statearr_19885[1] = 1;
                return statearr_19885;
              };
              var state_machine__10456__auto____1 = function(state_19859) {
                while (true) {
                  var ret_value__10457__auto__ = function() {
                    try {
                      while (true) {
                        var result__10458__auto__ = switch__10455__auto__.call(null, state_19859);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10458__auto__;
                        }
                        break;
                      }
                    } catch (e19886) {
                      if (e19886 instanceof Object) {
                        var ex__10459__auto__ = e19886;
                        var statearr_19887_19904 = state_19859;
                        statearr_19887_19904[5] = ex__10459__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19859);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e19886;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__19905 = state_19859;
                    state_19859 = G__19905;
                    continue;
                  } else {
                    return ret_value__10457__auto__;
                  }
                  break;
                }
              };
              state_machine__10456__auto__ = function(state_19859) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10456__auto____0.call(this);
                  case 1:
                    return state_machine__10456__auto____1.call(this, state_19859);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
              state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
              return state_machine__10456__auto__;
            }();
          }(switch__10455__auto__, c__10470__auto___19889, out);
        }();
        var state__10472__auto__ = function() {
          var statearr_19888 = f__10471__auto__.call(null);
          statearr_19888[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___19889;
          return statearr_19888;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
      };
    }(c__10470__auto___19889, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("dream.x");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("om_tools.core");
goog.require("cljs.core.async");
goog.require("goog.debug");
goog.require("om_tools.dom");
goog.require("om.core");
goog.require("om.core");
goog.require("hiccups.runtime");
goog.require("hiccups.runtime");
goog.require("om_tools.dom");
goog.require("cljs.core.async");
goog.require("goog.debug");
cljs.core.enable_console_print_BANG_.call(null);
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  try {
    return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
  } catch (e) {
    return false;
  }
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope))) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || (goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || (goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", 
INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", ORIENTATIONCHANGE:"orientationchange", 
READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), 
TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", 
MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", 
COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type, proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(opt_obj, opt_type) {
  if (!opt_obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(opt_obj)) {
    return opt_obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((opt_obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  for (var type in listenerMap.listeners) {
    if (!opt_type || type == opt_type) {
      var listeners = goog.array.clone(listenerMap.listeners[type]);
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type];
    if (listenerArray) {
      listenerArray = goog.array.clone(listenerArray);
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && (listener.capture == capture && !listener.removed)) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = goog.array.clone(listenerArray);
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && (!listener.removed && listener.capture == capture)) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.WebSocket");
goog.provide("goog.net.WebSocket.ErrorEvent");
goog.provide("goog.net.WebSocket.EventType");
goog.provide("goog.net.WebSocket.MessageEvent");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventTarget");
goog.require("goog.log");
goog.net.WebSocket = function(opt_autoReconnect, opt_getNextReconnect) {
  goog.net.WebSocket.base(this, "constructor");
  this.autoReconnect_ = goog.isDef(opt_autoReconnect) ? opt_autoReconnect : true;
  this.getNextReconnect_ = opt_getNextReconnect || goog.net.WebSocket.EXPONENTIAL_BACKOFF_;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.inherits(goog.net.WebSocket, goog.events.EventTarget);
goog.net.WebSocket.prototype.webSocket_ = null;
goog.net.WebSocket.prototype.url_ = null;
goog.net.WebSocket.prototype.protocol_ = undefined;
goog.net.WebSocket.prototype.closeExpected_ = false;
goog.net.WebSocket.prototype.reconnectAttempt_ = 0;
goog.net.WebSocket.prototype.logger_ = goog.log.getLogger("goog.net.WebSocket");
goog.net.WebSocket.EventType = {CLOSED:goog.events.getUniqueId("closed"), ERROR:goog.events.getUniqueId("error"), MESSAGE:goog.events.getUniqueId("message"), OPENED:goog.events.getUniqueId("opened")};
goog.net.WebSocket.ReadyState_ = {CONNECTING:0, OPEN:1, CLOSING:2, CLOSED:3};
goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_ = 60 * 1E3;
goog.net.WebSocket.EXPONENTIAL_BACKOFF_ = function(attempt) {
  var time = Math.pow(2, attempt) * 1E3;
  return Math.min(time, goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_);
};
goog.net.WebSocket.protectEntryPoints = function(errorHandler) {
  goog.net.WebSocket.prototype.onOpen_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onError_);
};
goog.net.WebSocket.prototype.open = function(url, opt_protocol) {
  goog.asserts.assert(goog.global["WebSocket"], "This browser does not support WebSocket");
  goog.asserts.assert(!this.isOpen(), "The WebSocket is already open");
  this.clearReconnectTimer_();
  this.url_ = url;
  this.protocol_ = opt_protocol;
  if (this.protocol_) {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_ + " with protocol " + this.protocol_);
    this.webSocket_ = new WebSocket(this.url_, this.protocol_);
  } else {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_);
    this.webSocket_ = new WebSocket(this.url_);
  }
  this.webSocket_.onopen = goog.bind(this.onOpen_, this);
  this.webSocket_.onclose = goog.bind(this.onClose_, this);
  this.webSocket_.onmessage = goog.bind(this.onMessage_, this);
  this.webSocket_.onerror = goog.bind(this.onError_, this);
};
goog.net.WebSocket.prototype.close = function() {
  this.clearReconnectTimer_();
  if (this.webSocket_) {
    goog.log.info(this.logger_, "Closing the WebSocket.");
    this.closeExpected_ = true;
    this.webSocket_.close();
    this.webSocket_ = null;
  }
};
goog.net.WebSocket.prototype.send = function(message) {
  goog.asserts.assert(this.isOpen(), "Cannot send without an open socket");
  this.webSocket_.send(message);
};
goog.net.WebSocket.prototype.isOpen = function() {
  return!!this.webSocket_ && this.webSocket_.readyState == goog.net.WebSocket.ReadyState_.OPEN;
};
goog.net.WebSocket.prototype.onOpen_ = function() {
  goog.log.info(this.logger_, "WebSocket opened on " + this.url_);
  this.dispatchEvent(goog.net.WebSocket.EventType.OPENED);
  this.reconnectAttempt_ = 0;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.net.WebSocket.prototype.onClose_ = function(event) {
  goog.log.info(this.logger_, "The WebSocket on " + this.url_ + " closed.");
  this.dispatchEvent(goog.net.WebSocket.EventType.CLOSED);
  this.webSocket_ = null;
  if (this.closeExpected_) {
    goog.log.info(this.logger_, "The WebSocket closed normally.");
    this.url_ = null;
    this.protocol_ = undefined;
  } else {
    goog.log.error(this.logger_, "The WebSocket disconnected unexpectedly: " + event.data);
    if (this.autoReconnect_) {
      var seconds = Math.floor(this.nextReconnect_ / 1E3);
      goog.log.info(this.logger_, "Seconds until next reconnect attempt: " + seconds);
      this.reconnectTimer_ = goog.Timer.callOnce(goog.bind(this.open, this, this.url_, this.protocol_), this.nextReconnect_, this);
      this.reconnectAttempt_++;
      this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
    }
  }
  this.closeExpected_ = false;
};
goog.net.WebSocket.prototype.onMessage_ = function(event) {
  var message = (event.data);
  this.dispatchEvent(new goog.net.WebSocket.MessageEvent(message));
};
goog.net.WebSocket.prototype.onError_ = function(event) {
  var data = (event.data);
  goog.log.error(this.logger_, "An error occurred: " + data);
  this.dispatchEvent(new goog.net.WebSocket.ErrorEvent(data));
};
goog.net.WebSocket.prototype.clearReconnectTimer_ = function() {
  if (goog.isDefAndNotNull(this.reconnectTimer_)) {
    goog.Timer.clear(this.reconnectTimer_);
  }
  this.reconnectTimer_ = null;
};
goog.net.WebSocket.prototype.disposeInternal = function() {
  goog.net.WebSocket.base(this, "disposeInternal");
  this.close();
};
goog.net.WebSocket.MessageEvent = function(message) {
  goog.net.WebSocket.MessageEvent.base(this, "constructor", goog.net.WebSocket.EventType.MESSAGE);
  this.message = message;
};
goog.inherits(goog.net.WebSocket.MessageEvent, goog.events.Event);
goog.net.WebSocket.ErrorEvent = function(data) {
  goog.net.WebSocket.ErrorEvent.base(this, "constructor", goog.net.WebSocket.EventType.ERROR);
  this.data = data;
};
goog.inherits(goog.net.WebSocket.ErrorEvent, goog.events.Event);
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.WebSocket.prototype.onOpen_ = transformer(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = transformer(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = transformer(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = transformer(goog.net.WebSocket.prototype.onError_);
});
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || (goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1")), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || (goog.userAgent.OPERA || goog.userAgent.WEBKIT), 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.history.EventType");
goog.history.EventType = {NAVIGATE:"navigate"};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classes");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var vh = goog.dom.getViewportSize_(win).height;
    var body = doc.body;
    var docEl = doc.documentElement;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || (goog.global || window);
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && (goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop)) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && (attributes && (attributes.name || attributes.type))) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        goog.dom.classes.add.apply(null, [element].concat(attributes));
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && (goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10"));
    if (!(isIe9 && (goog.global["SVGElement"] && element instanceof goog.global["SVGElement"]))) {
      return element.parentElement;
    }
  }
  var parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && (index >= 0 && index < 32768);
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || (element.tagName == goog.dom.TagName.INPUT || (element.tagName == goog.dom.TagName.TEXTAREA || (element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON)));
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && (rect.height > 0 && rect.width > 0);
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(0.75) || (goog.dom.matchesPixelRatio_(1.5) || (goog.dom.matchesPixelRatio_(2) || (goog.dom.matchesPixelRatio_(3) || 1)));
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || (goog.global.document || document);
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj17143 = {};
  return obj17143;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3529__auto__ = reader;
    if (and__3529__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4168__auto__ = reader == null ? null : reader;
    return function() {
      var or__3541__auto__ = cljs.reader.read_char[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.reader.read_char["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3529__auto__ = reader;
    if (and__3529__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3529__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4168__auto__ = reader == null ? null : reader;
    return function() {
      var or__3541__auto__ = cljs.reader.unread[goog.typeOf(x__4168__auto__)];
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.reader.unread["_"];
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
  return cljs.core._write.call(null, writer__4109__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3541__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3541__auto__)) {
    return or__3541__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__17144) {
    var rdr = cljs.core.first(arglist__17144);
    var msg = cljs.core.rest(arglist__17144);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3529__auto__ = !(ch === "#");
  if (and__3529__auto__) {
    var and__3529__auto____$1 = !(ch === "'");
    if (and__3529__auto____$1) {
      var and__3529__auto____$2 = !(ch === ":");
      if (and__3529__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3529__auto____$2;
      }
    } else {
      return and__3529__auto____$1;
    }
  } else {
    return and__3529__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__17145 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__17146 = cljs.reader.read_char.call(null, rdr);
      sb = G__17145;
      ch = G__17146;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var zero = groups[2];
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : new cljs.core.Keyword(null, "else", "else", 1017020587) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__17147 = cljs.reader.read_char.call(null, rdr);
      ch = G__17147;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__17148 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__17148;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__17149 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__17149;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3541__auto__ = ch == null;
      if (or__3541__auto__) {
        return or__3541__auto__;
      } else {
        var or__3541__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3541__auto____$1) {
          return or__3541__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3541__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__17150 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__17151 = cljs.reader.read_char.call(null, reader);
      buffer = G__17150;
      ch = G__17151;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__17152 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__17153 = cljs.reader.read_char.call(null, reader);
        buffer = G__17152;
        ch = G__17153;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__17154 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__17155 = cljs.reader.read_char.call(null, reader);
            buffer = G__17154;
            ch = G__17155;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__17157 = o;
    if (G__17157) {
      var bit__4191__auto__ = G__17157.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4191__auto__ || G__17157.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__17157.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__17157);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__17157);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__17158 = reader;
        var G__17159 = eof_is_error;
        var G__17160 = sentinel;
        var G__17161 = is_recursive;
        reader = G__17158;
        eof_is_error = G__17159;
        sentinel = G__17160;
        is_recursive = G__17161;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__17162 = cljs.reader.read_comment.call(null, reader, ch);
          var G__17163 = eof_is_error;
          var G__17164 = sentinel;
          var G__17165 = is_recursive;
          reader = G__17162;
          eof_is_error = G__17163;
          sentinel = G__17164;
          is_recursive = G__17165;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__17166 = reader;
              var G__17167 = eof_is_error;
              var G__17168 = sentinel;
              var G__17169 = is_recursive;
              reader = G__17166;
              eof_is_error = G__17167;
              sentinel = G__17168;
              is_recursive = G__17169;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__17170 = b.append("0");
            b = G__17170;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__17172 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__17172, 0, null);
  var years = cljs.core.nth.call(null, vec__17172, 1, null);
  var months = cljs.core.nth.call(null, vec__17172, 2, null);
  var days = cljs.core.nth.call(null, vec__17172, 3, null);
  var hours = cljs.core.nth.call(null, vec__17172, 4, null);
  var minutes = cljs.core.nth.call(null, vec__17172, 5, null);
  var seconds = cljs.core.nth.call(null, vec__17172, 6, null);
  var fraction = cljs.core.nth.call(null, vec__17172, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__17172, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__17172, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__17172, 10, null);
  var v = vec__17172;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3541__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3541__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3541__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3541__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3541__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3541__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3541__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3541__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3541__auto__)) {
        return or__3541__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__17174 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__17174, 0, null);
    var months = cljs.core.nth.call(null, vec__17174, 1, null);
    var days = cljs.core.nth.call(null, vec__17174, 2, null);
    var hours = cljs.core.nth.call(null, vec__17174, 3, null);
    var minutes = cljs.core.nth.call(null, vec__17174, 4, null);
    var seconds = cljs.core.nth.call(null, vec__17174, 5, null);
    var ms = cljs.core.nth.call(null, vec__17174, 6, null);
    var offset = cljs.core.nth.call(null, vec__17174, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__17187_17199 = cljs.core.seq.call(null, form);
    var chunk__17188_17200 = null;
    var count__17189_17201 = 0;
    var i__17190_17202 = 0;
    while (true) {
      if (i__17190_17202 < count__17189_17201) {
        var x_17203 = cljs.core._nth.call(null, chunk__17188_17200, i__17190_17202);
        arr.push(x_17203);
        var G__17204 = seq__17187_17199;
        var G__17205 = chunk__17188_17200;
        var G__17206 = count__17189_17201;
        var G__17207 = i__17190_17202 + 1;
        seq__17187_17199 = G__17204;
        chunk__17188_17200 = G__17205;
        count__17189_17201 = G__17206;
        i__17190_17202 = G__17207;
        continue;
      } else {
        var temp__4092__auto___17208 = cljs.core.seq.call(null, seq__17187_17199);
        if (temp__4092__auto___17208) {
          var seq__17187_17209__$1 = temp__4092__auto___17208;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17187_17209__$1)) {
            var c__4297__auto___17210 = cljs.core.chunk_first.call(null, seq__17187_17209__$1);
            var G__17211 = cljs.core.chunk_rest.call(null, seq__17187_17209__$1);
            var G__17212 = c__4297__auto___17210;
            var G__17213 = cljs.core.count.call(null, c__4297__auto___17210);
            var G__17214 = 0;
            seq__17187_17199 = G__17211;
            chunk__17188_17200 = G__17212;
            count__17189_17201 = G__17213;
            i__17190_17202 = G__17214;
            continue;
          } else {
            var x_17215 = cljs.core.first.call(null, seq__17187_17209__$1);
            arr.push(x_17215);
            var G__17216 = cljs.core.next.call(null, seq__17187_17209__$1);
            var G__17217 = null;
            var G__17218 = 0;
            var G__17219 = 0;
            seq__17187_17199 = G__17216;
            chunk__17188_17200 = G__17217;
            count__17189_17201 = G__17218;
            i__17190_17202 = G__17219;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj17192 = {};
        return obj17192;
      }();
      var seq__17193_17220 = cljs.core.seq.call(null, form);
      var chunk__17194_17221 = null;
      var count__17195_17222 = 0;
      var i__17196_17223 = 0;
      while (true) {
        if (i__17196_17223 < count__17195_17222) {
          var vec__17197_17224 = cljs.core._nth.call(null, chunk__17194_17221, i__17196_17223);
          var k_17225 = cljs.core.nth.call(null, vec__17197_17224, 0, null);
          var v_17226 = cljs.core.nth.call(null, vec__17197_17224, 1, null);
          obj[cljs.core.name.call(null, k_17225)] = v_17226;
          var G__17227 = seq__17193_17220;
          var G__17228 = chunk__17194_17221;
          var G__17229 = count__17195_17222;
          var G__17230 = i__17196_17223 + 1;
          seq__17193_17220 = G__17227;
          chunk__17194_17221 = G__17228;
          count__17195_17222 = G__17229;
          i__17196_17223 = G__17230;
          continue;
        } else {
          var temp__4092__auto___17231 = cljs.core.seq.call(null, seq__17193_17220);
          if (temp__4092__auto___17231) {
            var seq__17193_17232__$1 = temp__4092__auto___17231;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__17193_17232__$1)) {
              var c__4297__auto___17233 = cljs.core.chunk_first.call(null, seq__17193_17232__$1);
              var G__17234 = cljs.core.chunk_rest.call(null, seq__17193_17232__$1);
              var G__17235 = c__4297__auto___17233;
              var G__17236 = cljs.core.count.call(null, c__4297__auto___17233);
              var G__17237 = 0;
              seq__17193_17220 = G__17234;
              chunk__17194_17221 = G__17235;
              count__17195_17222 = G__17236;
              i__17196_17223 = G__17237;
              continue;
            } else {
              var vec__17198_17238 = cljs.core.first.call(null, seq__17193_17232__$1);
              var k_17239 = cljs.core.nth.call(null, vec__17198_17238, 0, null);
              var v_17240 = cljs.core.nth.call(null, vec__17198_17238, 1, null);
              obj[cljs.core.name.call(null, k_17239)] = v_17240;
              var G__17241 = cljs.core.next.call(null, seq__17193_17232__$1);
              var G__17242 = null;
              var G__17243 = 0;
              var G__17244 = 0;
              seq__17193_17220 = G__17241;
              chunk__17194_17221 = G__17242;
              count__17195_17222 = G__17243;
              i__17196_17223 = G__17244;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("dream.ani");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("om_tools.core");
goog.require("goog.dom.classes");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.debug");
goog.require("cljs.reader");
goog.require("goog.dom");
goog.require("cljs.reader");
goog.require("om_tools.dom");
goog.require("om.core");
goog.require("goog.dom");
goog.require("om.core");
goog.require("goog.dom.classes");
goog.require("cljs.reader");
goog.require("om_tools.dom");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.debug");
if (typeof navigator !== "undefined") {
} else {
  navigator = {};
}
dream.ani.group = function group(elems) {
  var jselems = cljs.core.clj__GT_js.call(null, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, function(p__14086) {
    var map__14087 = p__14086;
    var map__14087__$1 = cljs.core.seq_QMARK_.call(null, map__14087) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14087) : map__14087;
    var time = cljs.core.get.call(null, map__14087__$1, new cljs.core.Keyword(null, "time", "time", 1017464383));
    var props = cljs.core.get.call(null, map__14087__$1, new cljs.core.Keyword(null, "props", "props", 1120845026));
    var node = cljs.core.get.call(null, map__14087__$1, new cljs.core.Keyword(null, "node", "node", 1017291124));
    cljs.core.print.call(null, props);
    var jsprops = cljs.core.clj__GT_js.call(null, props);
    cljs.core.print.call(null, jsprops);
    return new Animation(node, jsprops, time);
  }, elems)));
  var group__$1 = new AnimationGroup(jselems);
  return document["timeline"].play(group__$1);
};
dream.ani.create_animation = function create_animation(node, props, time) {
  var jsprops = cljs.core.clj__GT_js.call(null, props);
  var timing_dict = cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "duration", "duration", 3316859142), 0.5, new cljs.core.Keyword(null, "iterations", "iterations", 3557286056), 8], null));
  var ani = new Animation(node, jsprops, time);
  cljs.core.print.call(null, jsprops);
  return document["timeline"].play(ani);
};
dream.ani.add_class = function add_class(node, class$) {
  return goog.dom.classes.toggle(node, class$);
};
dream.ani.toggle_class = function toggle_class(node, owner, class$, timeout) {
  goog.dom.classes.toggle(node, class$);
  setTimeout(function() {
    return goog.dom.classes.toggle(node, class$);
  }, timeout);
  return om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "trans", "trans", 1124525594), true);
};
goog.provide("dream.blog");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("om_tools.core");
goog.require("dream.ani");
goog.require("cljs.core.async");
goog.require("goog.debug");
goog.require("om_tools.dom");
goog.require("om.core");
goog.require("dream.ani");
goog.require("om.core");
goog.require("hiccups.runtime");
goog.require("hiccups.runtime");
goog.require("om_tools.dom");
goog.require("cljs.core.async");
goog.require("goog.debug");
dream.blog.resort = function resort(topics, topic) {
  return cljs.core.conj.call(null, cljs.core.filter.call(null, function(p1__48851_SHARP_) {
    return cljs.core.not_EQ_.call(null, p1__48851_SHARP_, topic);
  }, topics), topic);
};
dream.blog.idxer = function idxer(chan, owner, p__48852) {
  var vec__48854 = p__48852;
  var key = cljs.core.nth.call(null, vec__48854, 0, null);
  var val = cljs.core.nth.call(null, vec__48854, 1, null);
  var idx = vec__48854;
  cljs.core.async.put_BANG_.call(null, chan, idx);
  return om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "idx", "idx", 1014008367), val);
};
var ufv___48877 = schema.utils.use_fn_validation;
var output_schema48857_48878 = schema.core.Any;
var input_schema48858_48879 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "data", "data", -1637455517, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null))], null);
var input_checker48859_48880 = schema.core.checker.call(null, input_schema48858_48879);
var output_checker48860_48881 = schema.core.checker.call(null, output_schema48857_48878);
dream.blog.essay = function(ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881) {
  return function essay(G__48861, G__48862) {
    var validate__7247__auto__ = ufv___48877.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___48882 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__48861, G__48862], null);
      var temp__4092__auto___48883 = input_checker48859_48880.call(null, args__7248__auto___48882);
      if (cljs.core.truth_(temp__4092__auto___48883)) {
        var error__7249__auto___48884 = temp__4092__auto___48883;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "essay", "essay", -1543716298, null), cljs.core.pr_str.call(null, error__7249__auto___48884)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___48884, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema48858_48879, new cljs.core.Keyword(null, "value", "value", 
        1125876963), args__7248__auto___48882], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var data = G__48861;
      var owner = G__48862;
      while (true) {
        if (typeof dream.blog.t48870 !== "undefined") {
        } else {
          dream.blog.t48870 = function(essay, ufv__, output_checker48860, data, validate__7247__auto__, output_schema48857, input_checker48859, owner, G__48862, G__48861, input_schema48858, meta48871) {
            this.essay = essay;
            this.ufv__ = ufv__;
            this.output_checker48860 = output_checker48860;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.output_schema48857 = output_schema48857;
            this.input_checker48859 = input_checker48859;
            this.owner = owner;
            this.G__48862 = G__48862;
            this.G__48861 = G__48861;
            this.input_schema48858 = input_schema48858;
            this.meta48871 = meta48871;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.blog.t48870.cljs$lang$type = true;
          dream.blog.t48870.cljs$lang$ctorStr = "dream.blog/t48870";
          dream.blog.t48870.cljs$lang$ctorPrWriter = function(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.blog/t48870");
            };
          }(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881);
          dream.blog.t48870.prototype.om$core$IRenderState$ = true;
          dream.blog.t48870.prototype.om$core$IRenderState$render_state$arity$2 = function(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881) {
            return function(_, p__48873) {
              var self__ = this;
              var map__48874 = p__48873;
              var map__48874__$1 = cljs.core.seq_QMARK_.call(null, map__48874) ? cljs.core.apply.call(null, cljs.core.hash_map, map__48874) : map__48874;
              var c = cljs.core.get.call(null, map__48874__$1, new cljs.core.Keyword(null, "c", "c", 1013904341));
              var ___$1 = this;
              return cljs.core.apply.call(null, React.DOM.div, {"style":{"background":"#DDD6E8", "height":"100%", "width":"90%"}, "className":"figure flex column back", "ref":"modal"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                var padding = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "padding", "padding", 4502531971), "3%"], null);
                var padify = function(padding, ___$1, map__48874, map__48874__$1, c, validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881) {
                  return function(p1__48855_SHARP_) {
                    return cljs.core.assoc.call(null, p1__48855_SHARP_, new cljs.core.Keyword(null, "style", "style", 1123684643), padding);
                  };
                }(padding, ___$1, map__48874, map__48874__$1, c, validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881);
                return cljs.core.apply.call(null, React.DOM.div, {"className":"flex", "style":{"font-size":"8.0vh", "background-color":"white", "width":"90%"}, "ref":"title"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, React.DOM.div, {"style":{"width":"75%", "font-sze":"5vh"}}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.data.call(null, 
                new cljs.core.Keyword(null, "title", "title", 1124275658))], null))), om_tools.dom.element.call(null, React.DOM.div, padify.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class", "class", 1108647146), "fa fa-long-arrow-right", new cljs.core.Keyword(null, "style", "style", 1123684643), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "width", "width", 1127031096), "25%"], null), new cljs.core.Keyword(null, "on-click", "on-click", 
                1416542092), function(padding, padify, ___$1, map__48874, map__48874__$1, c, validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881) {
                  return function() {
                    return cljs.core.async.put_BANG_.call(null, c, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "flip", "flip", 1017050079)], null));
                  };
                }(padding, padify, ___$1, map__48874, map__48874__$1, c, validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881)], null)), cljs.core.PersistentVector.EMPTY)], null)));
              }(), React.DOM.div({"dangerouslySetInnerHTML":{"__html":"" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_html.call(null, self__.data.call(null, new cljs.core.Keyword(null, "content", "content", 1965434859))))}, "ref":"content", "style":{"padding":"5%", "width":"80%", "overflowY":"scroll", "height":"70%"}})], null)));
            };
          }(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881);
          dream.blog.t48870.prototype.om$core$IWillUpdate$ = true;
          dream.blog.t48870.prototype.om$core$IWillUpdate$will_update$arity$3 = function(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881) {
            return function(_, nprops, p__48875) {
              var self__ = this;
              var map__48876 = p__48875;
              var map__48876__$1 = cljs.core.seq_QMARK_.call(null, map__48876) ? cljs.core.apply.call(null, cljs.core.hash_map, map__48876) : map__48876;
              var nstate = map__48876__$1;
              var tophov = cljs.core.get.call(null, map__48876__$1, new cljs.core.Keyword(null, "tophov", "tophov", 4440836684));
              var ___$1 = this;
              var oprops = om.core.get_props.call(null, self__.owner);
              if (cljs.core.not_EQ_.call(null, nprops, oprops)) {
                return dream.ani.group.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "node", "node", 1017291124), om.core.get_node.call(null, self__.owner, "title"), new cljs.core.Keyword(null, "props", "props", 1120845026), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "transform", 
                "transform", 2066570974), "translate3d(0, -100%, 0)"], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "transform", "transform", 2066570974), "translate3d(0, 0, 0)"], null)], null), new cljs.core.Keyword(null, "time", "time", 1017464383), 500], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "node", "node", 1017291124), om.core.get_node.call(null, self__.owner, "content"), new cljs.core.Keyword(null, "props", "props", 1120845026), 
                new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 0], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 1], null)], null), new cljs.core.Keyword(null, "time", "time", 1017464383), 1E3], null)], null));
              } else {
                return null;
              }
            };
          }(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881);
          dream.blog.t48870.prototype.cljs$core$IMeta$_meta$arity$1 = function(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881) {
            return function(_48872) {
              var self__ = this;
              var _48872__$1 = this;
              return self__.meta48871;
            };
          }(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881);
          dream.blog.t48870.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881) {
            return function(_48872, meta48871__$1) {
              var self__ = this;
              var _48872__$1 = this;
              return new dream.blog.t48870(self__.essay, self__.ufv__, self__.output_checker48860, self__.data, self__.validate__7247__auto__, self__.output_schema48857, self__.input_checker48859, self__.owner, self__.G__48862, self__.G__48861, self__.input_schema48858, meta48871__$1);
            };
          }(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881);
          dream.blog.__GT_t48870 = function(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881) {
            return function __GT_t48870(essay__$1, ufv____$1, output_checker48860__$1, data__$1, validate__7247__auto____$1, output_schema48857__$1, input_checker48859__$1, owner__$1, G__48862__$1, G__48861__$1, input_schema48858__$1, meta48871) {
              return new dream.blog.t48870(essay__$1, ufv____$1, output_checker48860__$1, data__$1, validate__7247__auto____$1, output_schema48857__$1, input_checker48859__$1, owner__$1, G__48862__$1, G__48861__$1, input_schema48858__$1, meta48871);
            };
          }(validate__7247__auto__, ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881);
        }
        return new dream.blog.t48870(essay, ufv___48877, output_checker48860_48881, data, validate__7247__auto__, output_schema48857_48878, input_checker48859_48880, owner, G__48862, G__48861, input_schema48858_48879, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___48885 = output_checker48860_48881.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___48885)) {
        var error__7249__auto___48886 = temp__4092__auto___48885;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "essay", "essay", -1543716298, null), cljs.core.pr_str.call(null, error__7249__auto___48886)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___48886, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema48857_48878, new cljs.core.Keyword(null, "value", "value", 
        1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___48877, output_schema48857_48878, input_schema48858_48879, input_checker48859_48880, output_checker48860_48881);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.blog.essay), schema.core.make_fn_schema.call(null, output_schema48857_48878, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48858_48879], null)));
dream.blog.__GT_essay = function() {
  var __GT_essay = null;
  var __GT_essay__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.blog.essay, cursor__9015__auto__);
  };
  var __GT_essay__2 = function(cursor__9015__auto__, m48856) {
    return om.core.build.call(null, dream.blog.essay, cursor__9015__auto__, m48856);
  };
  __GT_essay = function(cursor__9015__auto__, m48856) {
    switch(arguments.length) {
      case 1:
        return __GT_essay__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_essay__2.call(this, cursor__9015__auto__, m48856);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_essay.cljs$core$IFn$_invoke$arity$1 = __GT_essay__1;
  __GT_essay.cljs$core$IFn$_invoke$arity$2 = __GT_essay__2;
  return __GT_essay;
}();
dream.blog.hue_process = function hue_process(owner) {
  var huec = cljs.core.async.chan.call(null);
  var c__10470__auto___48949 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto___48949, huec) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto___48949, huec) {
          return function(state_48935) {
            var state_val_48936 = state_48935[1];
            if (state_val_48936 === 6) {
              var inst_48930 = state_48935[2];
              var inst_48920 = inst_48930;
              var state_48935__$1 = function() {
                var statearr_48937 = state_48935;
                statearr_48937[7] = inst_48920;
                return statearr_48937;
              }();
              var statearr_48938_48950 = state_48935__$1;
              statearr_48938_48950[2] = null;
              statearr_48938_48950[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_48936 === 5) {
                var inst_48920 = state_48935[7];
                var inst_48924 = state_48935[2];
                var inst_48925 = cljs.core.mod.call(null, inst_48920, 255);
                var inst_48926 = om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "hue", "hue", 1014007914), inst_48925);
                var inst_48927 = cljs.core.mod.call(null, inst_48920, 100);
                var inst_48928 = om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "width", "width", 1127031096), inst_48927);
                var state_48935__$1 = function() {
                  var statearr_48939 = state_48935;
                  statearr_48939[8] = inst_48924;
                  statearr_48939[9] = inst_48926;
                  statearr_48939[10] = inst_48928;
                  return statearr_48939;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_48935__$1, 6, huec);
              } else {
                if (state_val_48936 === 4) {
                  var inst_48933 = state_48935[2];
                  var state_48935__$1 = state_48935;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_48935__$1, inst_48933);
                } else {
                  if (state_val_48936 === 3) {
                    var inst_48922 = cljs.core.async.timeout.call(null, 4);
                    var state_48935__$1 = state_48935;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_48935__$1, 5, inst_48922);
                  } else {
                    if (state_val_48936 === 2) {
                      var inst_48919 = state_48935[2];
                      var inst_48920 = inst_48919;
                      var state_48935__$1 = function() {
                        var statearr_48940 = state_48935;
                        statearr_48940[7] = inst_48920;
                        return statearr_48940;
                      }();
                      var statearr_48941_48951 = state_48935__$1;
                      statearr_48941_48951[2] = null;
                      statearr_48941_48951[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_48936 === 1) {
                        var state_48935__$1 = state_48935;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_48935__$1, 2, huec);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto___48949, huec);
        return function(switch__10455__auto__, c__10470__auto___48949, huec) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_48945 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_48945[0] = state_machine__10456__auto__;
              statearr_48945[1] = 1;
              return statearr_48945;
            };
            var state_machine__10456__auto____1 = function(state_48935) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_48935);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e48946) {
                    if (e48946 instanceof Object) {
                      var ex__10459__auto__ = e48946;
                      var statearr_48947_48952 = state_48935;
                      statearr_48947_48952[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_48935);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e48946;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__48953 = state_48935;
                  state_48935 = G__48953;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_48935) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_48935);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto___48949, huec);
      }();
      var state__10472__auto__ = function() {
        var statearr_48948 = f__10471__auto__.call(null);
        statearr_48948[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto___48949;
        return statearr_48948;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto___48949, huec));
  return huec;
};
dream.blog.degreeput = function degreeput(huec) {
  var seq__48958 = cljs.core.seq.call(null, cljs.core.range.call(null, 255));
  var chunk__48959 = null;
  var count__48960 = 0;
  var i__48961 = 0;
  while (true) {
    if (i__48961 < count__48960) {
      var number = cljs.core._nth.call(null, chunk__48959, i__48961);
      cljs.core.async.put_BANG_.call(null, huec, number);
      var G__48962 = seq__48958;
      var G__48963 = chunk__48959;
      var G__48964 = count__48960;
      var G__48965 = i__48961 + 1;
      seq__48958 = G__48962;
      chunk__48959 = G__48963;
      count__48960 = G__48964;
      i__48961 = G__48965;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__48958);
      if (temp__4092__auto__) {
        var seq__48958__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__48958__$1)) {
          var c__4297__auto__ = cljs.core.chunk_first.call(null, seq__48958__$1);
          var G__48966 = cljs.core.chunk_rest.call(null, seq__48958__$1);
          var G__48967 = c__4297__auto__;
          var G__48968 = cljs.core.count.call(null, c__4297__auto__);
          var G__48969 = 0;
          seq__48958 = G__48966;
          chunk__48959 = G__48967;
          count__48960 = G__48968;
          i__48961 = G__48969;
          continue;
        } else {
          var number = cljs.core.first.call(null, seq__48958__$1);
          cljs.core.async.put_BANG_.call(null, huec, number);
          var G__48970 = cljs.core.next.call(null, seq__48958__$1);
          var G__48971 = null;
          var G__48972 = 0;
          var G__48973 = 0;
          seq__48958 = G__48970;
          chunk__48959 = G__48971;
          count__48960 = G__48972;
          i__48961 = G__48973;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
var ufv___48991 = schema.utils.use_fn_validation;
var output_schema48975_48992 = schema.core.Any;
var input_schema48976_48993 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "data", "data", -1637455517, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null))], null);
var input_checker48977_48994 = schema.core.checker.call(null, input_schema48976_48993);
var output_checker48978_48995 = schema.core.checker.call(null, output_schema48975_48992);
dream.blog.esselement = function(ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995) {
  return function esselement(G__48979, G__48980) {
    var validate__7247__auto__ = ufv___48991.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___48996 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__48979, G__48980], null);
      var temp__4092__auto___48997 = input_checker48977_48994.call(null, args__7248__auto___48996);
      if (cljs.core.truth_(temp__4092__auto___48997)) {
        var error__7249__auto___48998 = temp__4092__auto___48997;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "esselement", "esselement", -520536176, null), cljs.core.pr_str.call(null, error__7249__auto___48998)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___48998, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema48976_48993, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), args__7248__auto___48996], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var data = G__48979;
      var owner = G__48980;
      while (true) {
        if (typeof dream.blog.t48986 !== "undefined") {
        } else {
          dream.blog.t48986 = function(ufv__, data, validate__7247__auto__, output_checker48978, input_checker48977, G__48980, owner, esselement, output_schema48975, input_schema48976, G__48979, meta48987) {
            this.ufv__ = ufv__;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.output_checker48978 = output_checker48978;
            this.input_checker48977 = input_checker48977;
            this.G__48980 = G__48980;
            this.owner = owner;
            this.esselement = esselement;
            this.output_schema48975 = output_schema48975;
            this.input_schema48976 = input_schema48976;
            this.G__48979 = G__48979;
            this.meta48987 = meta48987;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.blog.t48986.cljs$lang$type = true;
          dream.blog.t48986.cljs$lang$ctorStr = "dream.blog/t48986";
          dream.blog.t48986.cljs$lang$ctorPrWriter = function(validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.blog/t48986");
            };
          }(validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995);
          dream.blog.t48986.prototype.om$core$IRenderState$ = true;
          dream.blog.t48986.prototype.om$core$IRenderState$render_state$arity$2 = function(validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995) {
            return function(_, p__48989) {
              var self__ = this;
              var map__48990 = p__48989;
              var map__48990__$1 = cljs.core.seq_QMARK_.call(null, map__48990) ? cljs.core.apply.call(null, cljs.core.hash_map, map__48990) : map__48990;
              var width = cljs.core.get.call(null, map__48990__$1, new cljs.core.Keyword(null, "width", "width", 1127031096));
              var hue = cljs.core.get.call(null, map__48990__$1, new cljs.core.Keyword(null, "hue", "hue", 1014007914));
              var c = cljs.core.get.call(null, map__48990__$1, new cljs.core.Keyword(null, "c", "c", 1013904341));
              var ___$1 = this;
              var huec = dream.blog.hue_process.call(null, self__.owner);
              cljs.core.print.call(null, "rerender", hue);
              return cljs.core.apply.call(null, React.DOM.div, {"onClick":function(huec, ___$1, map__48990, map__48990__$1, width, hue, c, validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995) {
                return function() {
                  return cljs.core.async.put_BANG_.call(null, c, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "idxflip", "idxflip", 2689393692), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.data.call(null, new cljs.core.Keyword(null, "topic", "topic", 1124450465)), self__.data.call(null, new cljs.core.Keyword(null, "idx", "idx", 1014008367))], null)], null));
                };
              }(huec, ___$1, map__48990, map__48990__$1, width, hue, c, validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995), "onMouseLeave":function(huec, ___$1, map__48990, map__48990__$1, width, hue, c, validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995) {
                return function() {
                  return om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "hue", "hue", 1014007914), null);
                };
              }(huec, ___$1, map__48990, map__48990__$1, width, hue, c, validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995), "onMouseEnter":function(huec, ___$1, map__48990, map__48990__$1, width, hue, c, validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995) {
                return function() {
                  return dream.blog.degreeput.call(null, huec);
                };
              }(huec, ___$1, map__48990, map__48990__$1, width, hue, c, validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995), "style":{"background-color":"rgb(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
                var or__3541__auto__ = hue;
                if (cljs.core.truth_(or__3541__auto__)) {
                  return or__3541__auto__;
                } else {
                  return 255;
                }
              }()) + "," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
                var or__3541__auto__ = hue;
                if (cljs.core.truth_(or__3541__auto__)) {
                  return or__3541__auto__;
                } else {
                  return 255;
                }
              }()) + ", 255)", "width":"" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(width) + "%", "margin-left":"5.5%"}}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.data.call(null, new cljs.core.Keyword(null, "title", "title", 1124275658)))], null)));
            };
          }(validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995);
          dream.blog.t48986.prototype.cljs$core$IMeta$_meta$arity$1 = function(validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995) {
            return function(_48988) {
              var self__ = this;
              var _48988__$1 = this;
              return self__.meta48987;
            };
          }(validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995);
          dream.blog.t48986.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995) {
            return function(_48988, meta48987__$1) {
              var self__ = this;
              var _48988__$1 = this;
              return new dream.blog.t48986(self__.ufv__, self__.data, self__.validate__7247__auto__, self__.output_checker48978, self__.input_checker48977, self__.G__48980, self__.owner, self__.esselement, self__.output_schema48975, self__.input_schema48976, self__.G__48979, meta48987__$1);
            };
          }(validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995);
          dream.blog.__GT_t48986 = function(validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995) {
            return function __GT_t48986(ufv____$1, data__$1, validate__7247__auto____$1, output_checker48978__$1, input_checker48977__$1, G__48980__$1, owner__$1, esselement__$1, output_schema48975__$1, input_schema48976__$1, G__48979__$1, meta48987) {
              return new dream.blog.t48986(ufv____$1, data__$1, validate__7247__auto____$1, output_checker48978__$1, input_checker48977__$1, G__48980__$1, owner__$1, esselement__$1, output_schema48975__$1, input_schema48976__$1, G__48979__$1, meta48987);
            };
          }(validate__7247__auto__, ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995);
        }
        return new dream.blog.t48986(ufv___48991, data, validate__7247__auto__, output_checker48978_48995, input_checker48977_48994, G__48980, owner, esselement, output_schema48975_48992, input_schema48976_48993, G__48979, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___48999 = output_checker48978_48995.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___48999)) {
        var error__7249__auto___49000 = temp__4092__auto___48999;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "esselement", "esselement", -520536176, null), cljs.core.pr_str.call(null, error__7249__auto___49000)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___49000, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema48975_48992, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___48991, output_schema48975_48992, input_schema48976_48993, input_checker48977_48994, output_checker48978_48995);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.blog.esselement), schema.core.make_fn_schema.call(null, output_schema48975_48992, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48976_48993], null)));
dream.blog.__GT_esselement = function() {
  var __GT_esselement = null;
  var __GT_esselement__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.blog.esselement, cursor__9015__auto__);
  };
  var __GT_esselement__2 = function(cursor__9015__auto__, m48974) {
    return om.core.build.call(null, dream.blog.esselement, cursor__9015__auto__, m48974);
  };
  __GT_esselement = function(cursor__9015__auto__, m48974) {
    switch(arguments.length) {
      case 1:
        return __GT_esselement__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_esselement__2.call(this, cursor__9015__auto__, m48974);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_esselement.cljs$core$IFn$_invoke$arity$1 = __GT_esselement__1;
  __GT_esselement.cljs$core$IFn$_invoke$arity$2 = __GT_esselement__2;
  return __GT_esselement;
}();
var ufv___49026 = schema.utils.use_fn_validation;
var output_schema49002_49027 = schema.core.Any;
var input_schema49003_49028 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "arg0", "arg0", -1637529005, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null))], null);
var input_checker49004_49029 = schema.core.checker.call(null, input_schema49003_49028);
var output_checker49005_49030 = schema.core.checker.call(null, output_schema49002_49027);
dream.blog.topic = function(ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030) {
  return function topic(G__49006, G__49007) {
    var validate__7247__auto__ = ufv___49026.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___49031 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__49006, G__49007], null);
      var temp__4092__auto___49032 = input_checker49004_49029.call(null, args__7248__auto___49031);
      if (cljs.core.truth_(temp__4092__auto___49032)) {
        var error__7249__auto___49033 = temp__4092__auto___49032;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "topic", "topic", -1529985304, null), cljs.core.pr_str.call(null, error__7249__auto___49033)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___49033, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema49003_49028, new cljs.core.Keyword(null, "value", "value", 
        1125876963), args__7248__auto___49031], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var G__49018 = G__49006;
      var vec__49019 = G__49018;
      var topic__$1 = cljs.core.nth.call(null, vec__49019, 0, null);
      var posts = cljs.core.nth.call(null, vec__49019, 1, null);
      var owner = G__49007;
      var G__49018__$1 = G__49018;
      var owner__$1 = owner;
      while (true) {
        var vec__49020 = G__49018__$1;
        var topic__$2 = cljs.core.nth.call(null, vec__49020, 0, null);
        var posts__$1 = cljs.core.nth.call(null, vec__49020, 1, null);
        var owner__$2 = owner__$1;
        if (typeof dream.blog.t49021 !== "undefined") {
        } else {
          dream.blog.t49021 = function(ufv__, G__49018, output_schema49002, validate__7247__auto__, topic, output_checker49005, G__49007, G__49006, input_schema49003, owner, vec__49019, vec__49020, input_checker49004, posts, meta49022) {
            this.ufv__ = ufv__;
            this.G__49018 = G__49018;
            this.output_schema49002 = output_schema49002;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.topic = topic;
            this.output_checker49005 = output_checker49005;
            this.G__49007 = G__49007;
            this.G__49006 = G__49006;
            this.input_schema49003 = input_schema49003;
            this.owner = owner;
            this.vec__49019 = vec__49019;
            this.vec__49020 = vec__49020;
            this.input_checker49004 = input_checker49004;
            this.posts = posts;
            this.meta49022 = meta49022;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.blog.t49021.cljs$lang$type = true;
          dream.blog.t49021.cljs$lang$ctorStr = "dream.blog/t49021";
          dream.blog.t49021.cljs$lang$ctorPrWriter = function(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.blog/t49021");
            };
          }(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030);
          dream.blog.t49021.prototype.om$core$IRenderState$ = true;
          dream.blog.t49021.prototype.om$core$IRenderState$render_state$arity$2 = function(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030) {
            return function(_, p__49024) {
              var self__ = this;
              var map__49025 = p__49024;
              var map__49025__$1 = cljs.core.seq_QMARK_.call(null, map__49025) ? cljs.core.apply.call(null, cljs.core.hash_map, map__49025) : map__49025;
              var c = cljs.core.get.call(null, map__49025__$1, new cljs.core.Keyword(null, "c", "c", 1013904341));
              var ___$1 = this;
              return cljs.core.apply.call(null, React.DOM.div, {"style":{"font-size":"5vh"}}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, React.DOM.span, {"style":{"font-size":"10vh"}}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.topic], null))), om.core.build_all.call(null, dream.blog.esselement, self__.posts, new cljs.core.PersistentArrayMap(null, 
              1, [new cljs.core.Keyword(null, "init-state", "init-state", 4479067398), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "c", "c", 1013904341), c], null)], null))], null)));
            };
          }(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030);
          dream.blog.t49021.prototype.om$core$IWillUpdate$ = true;
          dream.blog.t49021.prototype.om$core$IWillUpdate$will_update$arity$3 = function(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030) {
            return function(_, nprops, nstate) {
              var self__ = this;
              var ___$1 = this;
              var oprops = om.core.get_props.call(null, self__.owner);
              if (cljs.core.not_EQ_.call(null, oprops, nprops)) {
                return dream.ani.create_animation.call(null, om.core.get_node.call(null, self__.owner), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 1], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 0], null)], null), 25);
              } else {
                return null;
              }
            };
          }(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030);
          dream.blog.t49021.prototype.om$core$IDidUpdate$ = true;
          dream.blog.t49021.prototype.om$core$IDidUpdate$did_update$arity$3 = function(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030) {
            return function(_, props, state) {
              var self__ = this;
              var ___$1 = this;
              return dream.ani.create_animation.call(null, om.core.get_node.call(null, self__.owner), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 0], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), 1], null)], null), 35);
            };
          }(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030);
          dream.blog.t49021.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030) {
            return function(_49023) {
              var self__ = this;
              var _49023__$1 = this;
              return self__.meta49022;
            };
          }(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030);
          dream.blog.t49021.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030) {
            return function(_49023, meta49022__$1) {
              var self__ = this;
              var _49023__$1 = this;
              return new dream.blog.t49021(self__.ufv__, self__.G__49018, self__.output_schema49002, self__.validate__7247__auto__, self__.topic, self__.output_checker49005, self__.G__49007, self__.G__49006, self__.input_schema49003, self__.owner, self__.vec__49019, self__.vec__49020, self__.input_checker49004, self__.posts, meta49022__$1);
            };
          }(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030);
          dream.blog.__GT_t49021 = function(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030) {
            return function __GT_t49021(ufv____$1, G__49018__$2, output_schema49002__$1, validate__7247__auto____$1, topic__$3, output_checker49005__$1, G__49007__$1, G__49006__$1, input_schema49003__$1, owner__$3, vec__49019__$1, vec__49020__$1, input_checker49004__$1, posts__$2, meta49022) {
              return new dream.blog.t49021(ufv____$1, G__49018__$2, output_schema49002__$1, validate__7247__auto____$1, topic__$3, output_checker49005__$1, G__49007__$1, G__49006__$1, input_schema49003__$1, owner__$3, vec__49019__$1, vec__49020__$1, input_checker49004__$1, posts__$2, meta49022);
            };
          }(vec__49020, topic__$2, posts__$1, owner__$2, G__49018, vec__49019, topic__$1, posts, owner, validate__7247__auto__, ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030);
        }
        return new dream.blog.t49021(ufv___49026, G__49018__$1, output_schema49002_49027, validate__7247__auto__, topic__$2, output_checker49005_49030, G__49007, G__49006, input_schema49003_49028, owner__$2, vec__49019, vec__49020, input_checker49004_49029, posts__$1, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___49034 = output_checker49005_49030.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___49034)) {
        var error__7249__auto___49035 = temp__4092__auto___49034;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "topic", "topic", -1529985304, null), cljs.core.pr_str.call(null, error__7249__auto___49035)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___49035, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema49002_49027, new cljs.core.Keyword(null, "value", "value", 
        1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___49026, output_schema49002_49027, input_schema49003_49028, input_checker49004_49029, output_checker49005_49030);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.blog.topic), schema.core.make_fn_schema.call(null, output_schema49002_49027, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema49003_49028], null)));
dream.blog.__GT_topic = function() {
  var __GT_topic = null;
  var __GT_topic__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.blog.topic, cursor__9015__auto__);
  };
  var __GT_topic__2 = function(cursor__9015__auto__, m49001) {
    return om.core.build.call(null, dream.blog.topic, cursor__9015__auto__, m49001);
  };
  __GT_topic = function(cursor__9015__auto__, m49001) {
    switch(arguments.length) {
      case 1:
        return __GT_topic__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_topic__2.call(this, cursor__9015__auto__, m49001);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_topic.cljs$core$IFn$_invoke$arity$1 = __GT_topic__1;
  __GT_topic.cljs$core$IFn$_invoke$arity$2 = __GT_topic__2;
  return __GT_topic;
}();
dream.blog.random_thing = function random_thing(chan) {
  var num = 0;
  while (true) {
    if (num > 100) {
      return num;
    } else {
      var G__49036 = function() {
        cljs.core.async.put_BANG_.call(null, chan, num);
        return num + 1;
      }();
      num = G__49036;
      continue;
    }
    break;
  }
};
dream.blog.rand_process = function rand_process(chan, owner) {
  var valfn = function(p1__49037_SHARP_) {
    return om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "opacity", "opacity", 4041665405), p1__49037_SHARP_);
  };
  var precision = function(valfn) {
    return function(p1__49038_SHARP_) {
      return Math.sin(p1__49038_SHARP_ / 100).toPrecision(2);
    };
  }(valfn);
  var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__, valfn, precision) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto__, valfn, precision) {
          return function(state_49083) {
            var state_val_49084 = state_49083[1];
            if (state_val_49084 === 6) {
              var inst_49078 = state_49083[2];
              var inst_49070 = inst_49078;
              var state_49083__$1 = function() {
                var statearr_49085 = state_49083;
                statearr_49085[7] = inst_49070;
                return statearr_49085;
              }();
              var statearr_49086_49097 = state_49083__$1;
              statearr_49086_49097[2] = null;
              statearr_49086_49097[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_49084 === 5) {
                var inst_49070 = state_49083[7];
                var inst_49074 = state_49083[2];
                var inst_49075 = precision.call(null, inst_49070);
                var inst_49076 = valfn.call(null, inst_49075);
                var state_49083__$1 = function() {
                  var statearr_49087 = state_49083;
                  statearr_49087[8] = inst_49074;
                  statearr_49087[9] = inst_49076;
                  return statearr_49087;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_49083__$1, 6, chan);
              } else {
                if (state_val_49084 === 4) {
                  var inst_49081 = state_49083[2];
                  var state_49083__$1 = state_49083;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_49083__$1, inst_49081);
                } else {
                  if (state_val_49084 === 3) {
                    var inst_49072 = cljs.core.async.timeout.call(null, 16);
                    var state_49083__$1 = state_49083;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_49083__$1, 5, inst_49072);
                  } else {
                    if (state_val_49084 === 2) {
                      var inst_49069 = state_49083[2];
                      var inst_49070 = inst_49069;
                      var state_49083__$1 = function() {
                        var statearr_49088 = state_49083;
                        statearr_49088[7] = inst_49070;
                        return statearr_49088;
                      }();
                      var statearr_49089_49098 = state_49083__$1;
                      statearr_49089_49098[2] = null;
                      statearr_49089_49098[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_49084 === 1) {
                        var state_49083__$1 = state_49083;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_49083__$1, 2, chan);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto__, valfn, precision);
        return function(switch__10455__auto__, c__10470__auto__, valfn, precision) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_49093 = [null, null, null, null, null, null, null, null, null, null];
              statearr_49093[0] = state_machine__10456__auto__;
              statearr_49093[1] = 1;
              return statearr_49093;
            };
            var state_machine__10456__auto____1 = function(state_49083) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_49083);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e49094) {
                    if (e49094 instanceof Object) {
                      var ex__10459__auto__ = e49094;
                      var statearr_49095_49099 = state_49083;
                      statearr_49095_49099[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_49083);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e49094;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__49100 = state_49083;
                  state_49083 = G__49100;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_49083) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_49083);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto__, valfn, precision);
      }();
      var state__10472__auto__ = function() {
        var statearr_49096 = f__10471__auto__.call(null);
        statearr_49096[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
        return statearr_49096;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto__, valfn, precision));
  return c__10470__auto__;
};
var ufv___49239 = schema.utils.use_fn_validation;
var output_schema49102_49240 = schema.core.Any;
var input_schema49103_49241 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "data", "data", -1637455517, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "arg2", "arg2", -1637529003, null))], null);
var input_checker49104_49242 = schema.core.checker.call(null, input_schema49103_49241);
var output_checker49105_49243 = schema.core.checker.call(null, output_schema49102_49240);
dream.blog.blog = function(ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
  return function blog(G__49106, G__49107, G__49108) {
    var validate__7247__auto__ = ufv___49239.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___49244 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__49106, G__49107, G__49108], null);
      var temp__4092__auto___49245 = input_checker49104_49242.call(null, args__7248__auto___49244);
      if (cljs.core.truth_(temp__4092__auto___49245)) {
        var error__7249__auto___49246 = temp__4092__auto___49245;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "blog", "blog", -1637504677, null), cljs.core.pr_str.call(null, error__7249__auto___49246)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___49246, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema49103_49241, new cljs.core.Keyword(null, "value", "value", 
        1125876963), args__7248__auto___49244], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var data = G__49106;
      var owner = G__49107;
      var G__49175 = G__49108;
      var map__49176 = G__49175;
      var map__49176__$1 = cljs.core.seq_QMARK_.call(null, map__49176) ? cljs.core.apply.call(null, cljs.core.hash_map, map__49176) : map__49176;
      var clear_route = cljs.core.get.call(null, map__49176__$1, new cljs.core.Keyword(null, "clear-route", "clear-route", 2633548347));
      var data__$1 = data;
      var owner__$1 = owner;
      var G__49175__$1 = G__49175;
      while (true) {
        var data__$2 = data__$1;
        var owner__$2 = owner__$1;
        var map__49177 = G__49175__$1;
        var map__49177__$1 = cljs.core.seq_QMARK_.call(null, map__49177) ? cljs.core.apply.call(null, cljs.core.hash_map, map__49177) : map__49177;
        var clear_route__$1 = cljs.core.get.call(null, map__49177__$1, new cljs.core.Keyword(null, "clear-route", "clear-route", 2633548347));
        if (typeof dream.blog.t49178 !== "undefined") {
        } else {
          dream.blog.t49178 = function(input_schema49103, G__49106, G__49107, G__49108, clear_route, G__49175, blog, map__49177, ufv__, data, validate__7247__auto__, input_checker49104, output_checker49105, owner, output_schema49102, map__49176, meta49179) {
            this.input_schema49103 = input_schema49103;
            this.G__49106 = G__49106;
            this.G__49107 = G__49107;
            this.G__49108 = G__49108;
            this.clear_route = clear_route;
            this.G__49175 = G__49175;
            this.blog = blog;
            this.map__49177 = map__49177;
            this.ufv__ = ufv__;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.input_checker49104 = input_checker49104;
            this.output_checker49105 = output_checker49105;
            this.owner = owner;
            this.output_schema49102 = output_schema49102;
            this.map__49176 = map__49176;
            this.meta49179 = meta49179;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.blog.t49178.cljs$lang$type = true;
          dream.blog.t49178.cljs$lang$ctorStr = "dream.blog/t49178";
          dream.blog.t49178.cljs$lang$ctorPrWriter = function(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.blog/t49178");
            };
          }(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243);
          dream.blog.t49178.prototype.om$core$IRenderState$ = true;
          dream.blog.t49178.prototype.om$core$IRenderState$render_state$arity$2 = function(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
            return function(_, p__49181) {
              var self__ = this;
              var map__49182 = p__49181;
              var map__49182__$1 = cljs.core.seq_QMARK_.call(null, map__49182) ? cljs.core.apply.call(null, cljs.core.hash_map, map__49182) : map__49182;
              var opacity = cljs.core.get.call(null, map__49182__$1, new cljs.core.Keyword(null, "opacity", "opacity", 4041665405));
              var topidx = cljs.core.get.call(null, map__49182__$1, new cljs.core.Keyword(null, "topidx", "topidx", 4440837306));
              var flip = cljs.core.get.call(null, map__49182__$1, new cljs.core.Keyword(null, "flip", "flip", 1017050079));
              var c = cljs.core.get.call(null, map__49182__$1, new cljs.core.Keyword(null, "c", "c", 1013904341));
              var idx = cljs.core.get.call(null, map__49182__$1, new cljs.core.Keyword(null, "idx", "idx", 1014008367));
              var ___$1 = this;
              var blog__$2 = self__.data.call(null, new cljs.core.Keyword(null, "routes", "routes", 4383738556)).call(null, new cljs.core.Keyword(null, "blog", "blog", 1016931092));
              var blogseq = cljs.core.seq.call(null, self__.data.call(null, new cljs.core.Keyword(null, "routes", "routes", 4383738556)).call(null, new cljs.core.Keyword(null, "blog", "blog", 1016931092)));
              var blogcount = cljs.core.count.call(null, blogseq);
              return cljs.core.apply.call(null, React.DOM.section, {"style":{"opacity":function() {
                var or__3541__auto__ = opacity;
                if (cljs.core.truth_(or__3541__auto__)) {
                  return or__3541__auto__;
                } else {
                  return 0;
                }
              }(), "transform-style":"preserve-3d"}, "className":"full neutral"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, React.DOM.div, {"className":cljs.core.truth_(flip) ? "full trans flipped" : "full trans", "id":"card"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, React.DOM.div, {"className":"figure front full flex"}, 
              cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [om_tools.dom.element.call(null, React.DOM.div, blogcount > 1 ? React.DOM.button({"onClick":function(blog__$2, blogseq, blogcount, ___$1, map__49182, map__49182__$1, opacity, topidx, flip, c, idx, data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, 
              input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
                return function() {
                  return om.core.update_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "topidx", "topidx", 4440837306), function(blog__$2, blogseq, blogcount, ___$1, map__49182, map__49182__$1, opacity, topidx, flip, c, idx, data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
                    return function(pc) {
                      return cljs.core.mod.call(null, pc + 1, blogcount);
                    };
                  }(blog__$2, blogseq, blogcount, ___$1, map__49182, map__49182__$1, opacity, topidx, flip, c, idx, data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243));
                };
              }(blog__$2, blogseq, blogcount, ___$1, map__49182, map__49182__$1, opacity, topidx, flip, c, idx, data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243)}) : null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [om.core.build.call(null, 
              dream.blog.topic, cljs.core.nth.call(null, blogseq, topidx), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "init-state", "init-state", 4479067398), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "c", "c", 1013904341), c], null)], null))], null))], null))), om.core.build.call(null, dream.blog.essay, function() {
                var temp__4092__auto__ = idx;
                if (cljs.core.truth_(temp__4092__auto__)) {
                  var vec__49183 = temp__4092__auto__;
                  var key = cljs.core.nth.call(null, vec__49183, 0, null);
                  var ess = cljs.core.nth.call(null, vec__49183, 1, null);
                  return cljs.core.nth.call(null, cljs.core.reverse.call(null, blog__$2.call(null, key)), ess, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "content", "content", 1965434859), ""], null));
                } else {
                  return null;
                }
              }(), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "init-state", "init-state", 4479067398), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "c", "c", 1013904341), c], null)], null))], null)))], null)));
            };
          }(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243);
          dream.blog.t49178.prototype.om$core$IWillMount$ = true;
          dream.blog.t49178.prototype.om$core$IWillMount$will_mount$arity$1 = function(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              var c = om.core.get_state.call(null, self__.owner, new cljs.core.Keyword(null, "c", "c", 1013904341));
              var vec__49184 = om.core.get_state.call(null, self__.owner, new cljs.core.Keyword(null, "context", "context", 1965435169));
              var top = cljs.core.nth.call(null, vec__49184, 0, null);
              var ess = cljs.core.nth.call(null, vec__49184, 1, null);
              var ctx = vec__49184;
              var G__49185_49247 = cljs.core.count.call(null, ctx);
              var caseval__49248;
              switch(G__49185_49247) {
                case 2:
                  (function() {
                    var G__49186 = self__.owner;
                    om.core.set_state_BANG_.call(null, G__49186, new cljs.core.Keyword(null, "idx", "idx", 1014008367), ctx);
                    om.core.set_state_BANG_.call(null, G__49186, new cljs.core.Keyword(null, "flip", "flip", 1017050079), true);
                    return G__49186;
                  })();
                  break;
                default:
                  cljs.core.print.call(null, "Well then");
              }
              var rand_chan_49249 = cljs.core.async.chan.call(null);
              dream.blog.rand_process.call(null, rand_chan_49249, self__.owner);
              dream.blog.random_thing.call(null, rand_chan_49249);
              var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
              cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__, c, vec__49184, top, ess, ctx, ___$1, data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
                return function() {
                  var f__10471__auto__ = function() {
                    var switch__10455__auto__ = function(c__10470__auto__, c, vec__49184, top, ess, ctx, ___$1, data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
                      return function(state_49215) {
                        var state_val_49216 = state_49215[1];
                        if (state_val_49216 === 9) {
                          var inst_49210 = state_49215[2];
                          var inst_49194 = inst_49210;
                          var state_49215__$1 = function() {
                            var statearr_49217 = state_49215;
                            statearr_49217[7] = inst_49194;
                            return statearr_49217;
                          }();
                          var statearr_49218_49250 = state_49215__$1;
                          statearr_49218_49250[2] = null;
                          statearr_49218_49250[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_49216 === 8) {
                            var inst_49198 = state_49215[8];
                            var inst_49204 = om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "idx", "idx", 1014008367), inst_49198);
                            var inst_49205 = om.core.update_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "flip", "flip", 1017050079), cljs.core.not);
                            var state_49215__$1 = function() {
                              var statearr_49219 = state_49215;
                              statearr_49219[9] = inst_49205;
                              statearr_49219[10] = inst_49204;
                              return statearr_49219;
                            }();
                            var statearr_49220_49251 = state_49215__$1;
                            statearr_49220_49251[2] = self__.owner;
                            statearr_49220_49251[1] = 5;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_49216 === 7) {
                              var inst_49201 = om.core.update_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "flip", "flip", 1017050079), cljs.core.not);
                              var state_49215__$1 = state_49215;
                              var statearr_49221_49252 = state_49215__$1;
                              statearr_49221_49252[2] = inst_49201;
                              statearr_49221_49252[1] = 5;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_49216 === 6) {
                                var inst_49198 = state_49215[8];
                                var inst_49199 = om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "idx", "idx", 1014008367), inst_49198);
                                var state_49215__$1 = state_49215;
                                var statearr_49222_49253 = state_49215__$1;
                                statearr_49222_49253[2] = inst_49199;
                                statearr_49222_49253[1] = 5;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_49216 === 5) {
                                  var inst_49208 = state_49215[2];
                                  var state_49215__$1 = function() {
                                    var statearr_49223 = state_49215;
                                    statearr_49223[11] = inst_49208;
                                    return statearr_49223;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_49215__$1, 9, c);
                                } else {
                                  if (state_val_49216 === 4) {
                                    var inst_49213 = state_49215[2];
                                    var state_49215__$1 = state_49215;
                                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_49215__$1, inst_49213);
                                  } else {
                                    if (state_val_49216 === 3) {
                                      var inst_49194 = state_49215[7];
                                      var inst_49197 = cljs.core.nth.call(null, inst_49194, 0, null);
                                      var inst_49198 = cljs.core.nth.call(null, inst_49194, 1, null);
                                      var state_49215__$1 = function() {
                                        var statearr_49224 = state_49215;
                                        statearr_49224[8] = inst_49198;
                                        return statearr_49224;
                                      }();
                                      var G__49225_49254 = inst_49197 instanceof cljs.core.Keyword ? inst_49197.fqn : null;
                                      var caseval__49255;
                                      switch(G__49225_49254) {
                                        case "idxflip":
                                          (function() {
                                            var statearr_49226 = state_49215__$1;
                                            statearr_49226[1] = 8;
                                            return statearr_49226;
                                          })();
                                          break;
                                        case "flip":
                                          (function() {
                                            var statearr_49227 = state_49215__$1;
                                            statearr_49227[1] = 7;
                                            return statearr_49227;
                                          })();
                                          break;
                                        case "idx":
                                          (function() {
                                            var statearr_49228 = state_49215__$1;
                                            statearr_49228[1] = 6;
                                            return statearr_49228;
                                          })();
                                          break;
                                        default:
                                          (function() {
                                            throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_49197));
                                          })();
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_49216 === 2) {
                                        var inst_49191 = state_49215[2];
                                        var inst_49192 = cljs.core.nth.call(null, inst_49191, 0, null);
                                        var inst_49193 = cljs.core.nth.call(null, inst_49191, 1, null);
                                        var inst_49194 = inst_49191;
                                        var state_49215__$1 = function() {
                                          var statearr_49229 = state_49215;
                                          statearr_49229[12] = inst_49192;
                                          statearr_49229[13] = inst_49193;
                                          statearr_49229[7] = inst_49194;
                                          return statearr_49229;
                                        }();
                                        var statearr_49230_49256 = state_49215__$1;
                                        statearr_49230_49256[2] = null;
                                        statearr_49230_49256[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_49216 === 1) {
                                          var state_49215__$1 = state_49215;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_49215__$1, 2, c);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      };
                    }(c__10470__auto__, c, vec__49184, top, ess, ctx, ___$1, data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243);
                    return function(switch__10455__auto__, c__10470__auto__, c, vec__49184, top, ess, ctx, ___$1, data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
                      return function() {
                        var state_machine__10456__auto__ = null;
                        var state_machine__10456__auto____0 = function() {
                          var statearr_49234 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                          statearr_49234[0] = state_machine__10456__auto__;
                          statearr_49234[1] = 1;
                          return statearr_49234;
                        };
                        var state_machine__10456__auto____1 = function(state_49215) {
                          while (true) {
                            var ret_value__10457__auto__ = function() {
                              try {
                                while (true) {
                                  var result__10458__auto__ = switch__10455__auto__.call(null, state_49215);
                                  if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                                    continue;
                                  } else {
                                    return result__10458__auto__;
                                  }
                                  break;
                                }
                              } catch (e49235) {
                                if (e49235 instanceof Object) {
                                  var ex__10459__auto__ = e49235;
                                  var statearr_49236_49257 = state_49215;
                                  statearr_49236_49257[5] = ex__10459__auto__;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_49215);
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    throw e49235;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }();
                            if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                              var G__49258 = state_49215;
                              state_49215 = G__49258;
                              continue;
                            } else {
                              return ret_value__10457__auto__;
                            }
                            break;
                          }
                        };
                        state_machine__10456__auto__ = function(state_49215) {
                          switch(arguments.length) {
                            case 0:
                              return state_machine__10456__auto____0.call(this);
                            case 1:
                              return state_machine__10456__auto____1.call(this, state_49215);
                          }
                          throw new Error("Invalid arity: " + arguments.length);
                        };
                        state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
                        state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
                        return state_machine__10456__auto__;
                      }();
                    }(switch__10455__auto__, c__10470__auto__, c, vec__49184, top, ess, ctx, ___$1, data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243);
                  }();
                  var state__10472__auto__ = function() {
                    var statearr_49237 = f__10471__auto__.call(null);
                    statearr_49237[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
                    return statearr_49237;
                  }();
                  return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
                };
              }(c__10470__auto__, c, vec__49184, top, ess, ctx, ___$1, data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243));
              return c__10470__auto__;
            };
          }(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243);
          dream.blog.t49178.prototype.om$core$IInitState$ = true;
          dream.blog.t49178.prototype.om$core$IInitState$init_state$arity$1 = function(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              var vec__49238 = cljs.core.first.call(null, cljs.core.seq.call(null, self__.data.call(null, new cljs.core.Keyword(null, "routes", "routes", 4383738556)).call(null, new cljs.core.Keyword(null, "blog", "blog", 1016931092))));
              var top = cljs.core.nth.call(null, vec__49238, 0, null);
              var posts = cljs.core.nth.call(null, vec__49238, 1, null);
              return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "c", "c", 1013904341), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "topidx", "topidx", 4440837306), 0, new cljs.core.Keyword(null, "idx", "idx", 1014008367), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [top, -1], null)], null);
            };
          }(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243);
          dream.blog.t49178.prototype.cljs$core$IMeta$_meta$arity$1 = function(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
            return function(_49180) {
              var self__ = this;
              var _49180__$1 = this;
              return self__.meta49179;
            };
          }(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243);
          dream.blog.t49178.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
            return function(_49180, meta49179__$1) {
              var self__ = this;
              var _49180__$1 = this;
              return new dream.blog.t49178(self__.input_schema49103, self__.G__49106, self__.G__49107, self__.G__49108, self__.clear_route, self__.G__49175, self__.blog, self__.map__49177, self__.ufv__, self__.data, self__.validate__7247__auto__, self__.input_checker49104, self__.output_checker49105, self__.owner, self__.output_schema49102, self__.map__49176, meta49179__$1);
            };
          }(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243);
          dream.blog.__GT_t49178 = function(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243) {
            return function __GT_t49178(input_schema49103__$1, G__49106__$1, G__49107__$1, G__49108__$1, clear_route__$2, G__49175__$2, blog__$1, map__49177__$2, ufv____$1, data__$3, validate__7247__auto____$1, input_checker49104__$1, output_checker49105__$1, owner__$3, output_schema49102__$1, map__49176__$2, meta49179) {
              return new dream.blog.t49178(input_schema49103__$1, G__49106__$1, G__49107__$1, G__49108__$1, clear_route__$2, G__49175__$2, blog__$1, map__49177__$2, ufv____$1, data__$3, validate__7247__auto____$1, input_checker49104__$1, output_checker49105__$1, owner__$3, output_schema49102__$1, map__49176__$2, meta49179);
            };
          }(data__$2, owner__$2, map__49177, map__49177__$1, clear_route__$1, data, owner, G__49175, map__49176, map__49176__$1, clear_route, validate__7247__auto__, ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243);
        }
        return new dream.blog.t49178(input_schema49103_49241, G__49106, G__49107, G__49108, clear_route__$1, G__49175__$1, blog, map__49177__$1, ufv___49239, data__$2, validate__7247__auto__, input_checker49104_49242, output_checker49105_49243, owner__$2, output_schema49102_49240, map__49176__$1, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___49259 = output_checker49105_49243.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___49259)) {
        var error__7249__auto___49260 = temp__4092__auto___49259;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "blog", "blog", -1637504677, null), cljs.core.pr_str.call(null, error__7249__auto___49260)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___49260, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema49102_49240, new cljs.core.Keyword(null, "value", "value", 
        1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___49239, output_schema49102_49240, input_schema49103_49241, input_checker49104_49242, output_checker49105_49243);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.blog.blog), schema.core.make_fn_schema.call(null, output_schema49102_49240, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema49103_49241], null)));
dream.blog.__GT_blog = function() {
  var __GT_blog = null;
  var __GT_blog__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.blog.blog, cursor__9015__auto__);
  };
  var __GT_blog__2 = function(cursor__9015__auto__, m49101) {
    return om.core.build.call(null, dream.blog.blog, cursor__9015__auto__, m49101);
  };
  __GT_blog = function(cursor__9015__auto__, m49101) {
    switch(arguments.length) {
      case 1:
        return __GT_blog__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_blog__2.call(this, cursor__9015__auto__, m49101);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_blog.cljs$core$IFn$_invoke$arity$1 = __GT_blog__1;
  __GT_blog.cljs$core$IFn$_invoke$arity$2 = __GT_blog__2;
  return __GT_blog;
}();
goog.provide("goog.history.Event");
goog.require("goog.events.Event");
goog.require("goog.history.EventType");
goog.history.Event = function(token, isNavigation) {
  goog.events.Event.call(this, goog.history.EventType.NAVIGATE);
  this.token = token;
  this.isNavigation = isNavigation;
};
goog.inherits(goog.history.Event, goog.events.Event);
goog.provide("goog.history.Html5History");
goog.provide("goog.history.Html5History.TokenTransformer");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.history.Event");
goog.require("goog.history.EventType");
goog.history.Html5History = function(opt_win, opt_transformer) {
  goog.events.EventTarget.call(this);
  goog.asserts.assert(goog.history.Html5History.isSupported(opt_win), "HTML5 history is not supported.");
  this.window_ = opt_win || window;
  this.transformer_ = opt_transformer || null;
  goog.events.listen(this.window_, goog.events.EventType.POPSTATE, this.onHistoryEvent_, false, this);
  goog.events.listen(this.window_, goog.events.EventType.HASHCHANGE, this.onHistoryEvent_, false, this);
};
goog.inherits(goog.history.Html5History, goog.events.EventTarget);
goog.history.Html5History.isSupported = function(opt_win) {
  var win = opt_win || window;
  return!!(win.history && win.history.pushState);
};
goog.history.Html5History.prototype.enabled_ = false;
goog.history.Html5History.prototype.useFragment_ = true;
goog.history.Html5History.prototype.pathPrefix_ = "/";
goog.history.Html5History.prototype.setEnabled = function(enable) {
  if (enable == this.enabled_) {
    return;
  }
  this.enabled_ = enable;
  if (enable) {
    this.dispatchEvent(new goog.history.Event(this.getToken(), false));
  }
};
goog.history.Html5History.prototype.getToken = function() {
  if (this.useFragment_) {
    var loc = this.window_.location.href;
    var index = loc.indexOf("#");
    return index < 0 ? "" : loc.substring(index + 1);
  } else {
    return this.transformer_ ? this.transformer_.retrieveToken(this.pathPrefix_, this.window_.location) : this.window_.location.pathname.substr(this.pathPrefix_.length);
  }
};
goog.history.Html5History.prototype.setToken = function(token, opt_title) {
  if (token == this.getToken()) {
    return;
  }
  this.window_.history.pushState(null, opt_title || (this.window_.document.title || ""), this.getUrl_(token));
  this.dispatchEvent(new goog.history.Event(token, false));
};
goog.history.Html5History.prototype.replaceToken = function(token, opt_title) {
  this.window_.history.replaceState(null, opt_title || (this.window_.document.title || ""), this.getUrl_(token));
  this.dispatchEvent(new goog.history.Event(token, false));
};
goog.history.Html5History.prototype.disposeInternal = function() {
  goog.events.unlisten(this.window_, goog.events.EventType.POPSTATE, this.onHistoryEvent_, false, this);
  if (this.useFragment_) {
    goog.events.unlisten(this.window_, goog.events.EventType.HASHCHANGE, this.onHistoryEvent_, false, this);
  }
};
goog.history.Html5History.prototype.setUseFragment = function(useFragment) {
  if (this.useFragment_ != useFragment) {
    if (useFragment) {
      goog.events.listen(this.window_, goog.events.EventType.HASHCHANGE, this.onHistoryEvent_, false, this);
    } else {
      goog.events.unlisten(this.window_, goog.events.EventType.HASHCHANGE, this.onHistoryEvent_, false, this);
    }
    this.useFragment_ = useFragment;
  }
};
goog.history.Html5History.prototype.setPathPrefix = function(pathPrefix) {
  this.pathPrefix_ = pathPrefix;
};
goog.history.Html5History.prototype.getPathPrefix = function() {
  return this.pathPrefix_;
};
goog.history.Html5History.prototype.getUrl_ = function(token) {
  if (this.useFragment_) {
    return "#" + token;
  } else {
    return this.transformer_ ? this.transformer_.createUrl(token, this.pathPrefix_, this.window_.location) : this.pathPrefix_ + token + this.window_.location.search;
  }
};
goog.history.Html5History.prototype.onHistoryEvent_ = function(e) {
  if (this.enabled_) {
    this.dispatchEvent(new goog.history.Event(this.getToken(), true));
  }
};
goog.history.Html5History.TokenTransformer = function() {
};
goog.history.Html5History.TokenTransformer.prototype.retrieveToken = function(pathPrefix, location) {
};
goog.history.Html5History.TokenTransformer.prototype.createUrl = function(token, pathPrefix, location) {
};
goog.provide("dream.default$");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("om_tools.core");
goog.require("dream.ani");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.debug");
goog.require("om_tools.dom");
goog.require("om.core");
goog.require("dream.ani");
goog.require("om.core");
goog.require("om_tools.dom");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.debug");
dream.default$.make_cell = function make_cell(owner, ref, x, y) {
  var node = om.core.get_node.call(null, owner, ref);
  var ctx = node.getContext("2d");
  var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__, node, ctx) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto__, node, ctx) {
          return function(state_60310) {
            var state_val_60311 = state_60310[1];
            if (state_val_60311 === 7) {
              var inst_60302 = state_60310[2];
              var state_60310__$1 = function() {
                var statearr_60312 = state_60310;
                statearr_60312[7] = inst_60302;
                return statearr_60312;
              }();
              var statearr_60313_60327 = state_60310__$1;
              statearr_60313_60327[2] = null;
              statearr_60313_60327[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_60311 === 6) {
                var inst_60306 = state_60310[2];
                var state_60310__$1 = state_60310;
                var statearr_60314_60328 = state_60310__$1;
                statearr_60314_60328[2] = inst_60306;
                statearr_60314_60328[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_60311 === 5) {
                  var state_60310__$1 = state_60310;
                  var statearr_60315_60329 = state_60310__$1;
                  statearr_60315_60329[2] = null;
                  statearr_60315_60329[1] = 6;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_60311 === 4) {
                    var inst_60293 = cljs.core.rand_int.call(null, 255);
                    var inst_60294 = cljs.core.rand_int.call(null, 255);
                    var inst_60295 = cljs.core.rand_int.call(null, 255);
                    var inst_60296 = "rgb(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_60293) + "," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_60294) + "," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_60295) + ")";
                    var inst_60297 = ctx.fillStyle = inst_60296;
                    var inst_60298 = ctx.fillRect(x, y, 10, 10);
                    var inst_60299 = cljs.core.rand_int.call(null, 1E3);
                    var inst_60300 = cljs.core.async.timeout.call(null, inst_60299);
                    var state_60310__$1 = function() {
                      var statearr_60316 = state_60310;
                      statearr_60316[8] = inst_60297;
                      statearr_60316[9] = inst_60298;
                      return statearr_60316;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_60310__$1, 7, inst_60300);
                  } else {
                    if (state_val_60311 === 3) {
                      var inst_60308 = state_60310[2];
                      var state_60310__$1 = state_60310;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_60310__$1, inst_60308);
                    } else {
                      if (state_val_60311 === 2) {
                        var state_60310__$1 = state_60310;
                        if (true) {
                          var statearr_60317_60330 = state_60310__$1;
                          statearr_60317_60330[1] = 4;
                        } else {
                          var statearr_60318_60331 = state_60310__$1;
                          statearr_60318_60331[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_60311 === 1) {
                          var state_60310__$1 = state_60310;
                          var statearr_60319_60332 = state_60310__$1;
                          statearr_60319_60332[2] = null;
                          statearr_60319_60332[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto__, node, ctx);
        return function(switch__10455__auto__, c__10470__auto__, node, ctx) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_60323 = [null, null, null, null, null, null, null, null, null, null];
              statearr_60323[0] = state_machine__10456__auto__;
              statearr_60323[1] = 1;
              return statearr_60323;
            };
            var state_machine__10456__auto____1 = function(state_60310) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_60310);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e60324) {
                    if (e60324 instanceof Object) {
                      var ex__10459__auto__ = e60324;
                      var statearr_60325_60333 = state_60310;
                      statearr_60325_60333[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_60310);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e60324;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__60334 = state_60310;
                  state_60310 = G__60334;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_60310) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_60310);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto__, node, ctx);
      }();
      var state__10472__auto__ = function() {
        var statearr_60326 = f__10471__auto__.call(null);
        statearr_60326[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
        return statearr_60326;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto__, node, ctx));
  return c__10470__auto__;
};
dream.default$.make_scene = function make_scene(owner, rows, cols, ref) {
  var n__4397__auto__ = cols;
  var x = 0;
  while (true) {
    if (x < n__4397__auto__) {
      var n__4397__auto___60335__$1 = rows;
      var y_60336 = 0;
      while (true) {
        if (y_60336 < n__4397__auto___60335__$1) {
          dream.default$.make_cell.call(null, owner, ref, 10 * x, 10 * y_60336);
          var G__60337 = y_60336 + 1;
          y_60336 = G__60337;
          continue;
        } else {
        }
        break;
      }
      var G__60338 = x + 1;
      x = G__60338;
      continue;
    } else {
      return null;
    }
    break;
  }
};
var ufv___60357 = schema.utils.use_fn_validation;
var output_schema60340_60358 = schema.core.Any;
var input_schema60341_60359 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "data", "data", -1637455517, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "opts", "opts", -1637113383, null))], null);
var input_checker60342_60360 = schema.core.checker.call(null, input_schema60341_60359);
var output_checker60343_60361 = schema.core.checker.call(null, output_schema60340_60358);
dream.default$.default$ = function(ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361) {
  return function default$(G__60344, G__60345, G__60346) {
    var validate__7247__auto__ = ufv___60357.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___60362 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__60344, G__60345, G__60346], null);
      var temp__4092__auto___60363 = input_checker60342_60360.call(null, args__7248__auto___60362);
      if (cljs.core.truth_(temp__4092__auto___60363)) {
        var error__7249__auto___60364 = temp__4092__auto___60363;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "default", "default", -95727622, null), cljs.core.pr_str.call(null, error__7249__auto___60364)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___60364, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema60341_60359, new cljs.core.Keyword(null, "value", "value", 
        1125876963), args__7248__auto___60362], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var data = G__60344;
      var owner = G__60345;
      var opts = G__60346;
      while (true) {
        if (typeof dream.default$.t60352 !== "undefined") {
        } else {
          dream.default$.t60352 = function(opts, G__60346, G__60345, ufv__, G__60344, input_schema60341, default$, data, validate__7247__auto__, output_schema60340, output_checker60343, owner, input_checker60342, meta60353) {
            this.opts = opts;
            this.G__60346 = G__60346;
            this.G__60345 = G__60345;
            this.ufv__ = ufv__;
            this.G__60344 = G__60344;
            this.input_schema60341 = input_schema60341;
            this.default$ = default$;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.output_schema60340 = output_schema60340;
            this.output_checker60343 = output_checker60343;
            this.owner = owner;
            this.input_checker60342 = input_checker60342;
            this.meta60353 = meta60353;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.default$.t60352.cljs$lang$type = true;
          dream.default$.t60352.cljs$lang$ctorStr = "dream.default/t60352";
          dream.default$.t60352.cljs$lang$ctorPrWriter = function(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.default/t60352");
            };
          }(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361);
          dream.default$.t60352.prototype.om$core$IRenderState$ = true;
          dream.default$.t60352.prototype.om$core$IRenderState$render_state$arity$2 = function(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361) {
            return function(_, p__60355) {
              var self__ = this;
              var map__60356 = p__60355;
              var map__60356__$1 = cljs.core.seq_QMARK_.call(null, map__60356) ? cljs.core.apply.call(null, cljs.core.hash_map, map__60356) : map__60356;
              var canvchan = cljs.core.get.call(null, map__60356__$1, new cljs.core.Keyword(null, "canvchan", "canvchan", 908213866));
              var mouse_pos = cljs.core.get.call(null, map__60356__$1, new cljs.core.Keyword(null, "mouse-pos", "mouse-pos", 1599110302));
              var ___$1 = this;
              var x = cljs.core.mod.call(null, cljs.core.get.call(null, mouse_pos, 0, 255), 255);
              var y = cljs.core.mod.call(null, cljs.core.get.call(null, mouse_pos, 1, 255), 255);
              var z = x - y;
              var canvchan__$1 = om.core.get_state.call(null, self__.owner, new cljs.core.Keyword(null, "canvchan", "canvchan", 908213866));
              var rgbstr = "rgb(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x) + "," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(y) + ", " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(z) + ")";
              return cljs.core.apply.call(null, React.DOM.section, {"className":"full flex"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [React.DOM.canvas({"className":"", "ref":"canvas"}), om_tools.dom.element.call(null, React.DOM.article, om_tools.dom.element.call(null, React.DOM.ul, cljs.core.apply.call(null, React.DOM.li, null, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
              ["My current orienting inquiries:", om_tools.dom.element.call(null, React.DOM.ul, React.DOM.li(null, "What is the relationship between inherents and coherence?"), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [React.DOM.li(null, "What is the relationship between grief and novelty?")], null))], null))), cljs.core.PersistentVector.EMPTY), cljs.core.PersistentVector.EMPTY)], null)));
            };
          }(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361);
          dream.default$.t60352.prototype.om$core$IDidMount$ = true;
          dream.default$.t60352.prototype.om$core$IDidMount$did_mount$arity$1 = function(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              return dream.default$.make_scene.call(null, self__.owner, 50, 50, "canvas");
            };
          }(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361);
          dream.default$.t60352.prototype.om$core$IInitState$ = true;
          dream.default$.t60352.prototype.om$core$IInitState$init_state$arity$1 = function(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "canvchan", "canvchan", 908213866), cljs.core.async.chan.call(null)], null);
            };
          }(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361);
          dream.default$.t60352.prototype.cljs$core$IMeta$_meta$arity$1 = function(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361) {
            return function(_60354) {
              var self__ = this;
              var _60354__$1 = this;
              return self__.meta60353;
            };
          }(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361);
          dream.default$.t60352.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361) {
            return function(_60354, meta60353__$1) {
              var self__ = this;
              var _60354__$1 = this;
              return new dream.default$.t60352(self__.opts, self__.G__60346, self__.G__60345, self__.ufv__, self__.G__60344, self__.input_schema60341, self__.default$, self__.data, self__.validate__7247__auto__, self__.output_schema60340, self__.output_checker60343, self__.owner, self__.input_checker60342, meta60353__$1);
            };
          }(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361);
          dream.default$.__GT_t60352 = function(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361) {
            return function __GT_t60352(opts__$1, G__60346__$1, G__60345__$1, ufv____$1, G__60344__$1, input_schema60341__$1, default$__$1, data__$1, validate__7247__auto____$1, output_schema60340__$1, output_checker60343__$1, owner__$1, input_checker60342__$1, meta60353) {
              return new dream.default$.t60352(opts__$1, G__60346__$1, G__60345__$1, ufv____$1, G__60344__$1, input_schema60341__$1, default$__$1, data__$1, validate__7247__auto____$1, output_schema60340__$1, output_checker60343__$1, owner__$1, input_checker60342__$1, meta60353);
            };
          }(validate__7247__auto__, ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361);
        }
        return new dream.default$.t60352(opts, G__60346, G__60345, ufv___60357, G__60344, input_schema60341_60359, default$, data, validate__7247__auto__, output_schema60340_60358, output_checker60343_60361, owner, input_checker60342_60360, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___60365 = output_checker60343_60361.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___60365)) {
        var error__7249__auto___60366 = temp__4092__auto___60365;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "default", "default", -95727622, null), cljs.core.pr_str.call(null, error__7249__auto___60366)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___60366, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema60340_60358, new cljs.core.Keyword(null, "value", "value", 
        1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___60357, output_schema60340_60358, input_schema60341_60359, input_checker60342_60360, output_checker60343_60361);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.default$.default$), schema.core.make_fn_schema.call(null, output_schema60340_60358, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema60341_60359], null)));
dream.default$.__GT_default = function() {
  var __GT_default = null;
  var __GT_default__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.default$.default$, cursor__9015__auto__);
  };
  var __GT_default__2 = function(cursor__9015__auto__, m60339) {
    return om.core.build.call(null, dream.default$.default$, cursor__9015__auto__, m60339);
  };
  __GT_default = function(cursor__9015__auto__, m60339) {
    switch(arguments.length) {
      case 1:
        return __GT_default__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_default__2.call(this, cursor__9015__auto__, m60339);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_default.cljs$core$IFn$_invoke$arity$1 = __GT_default__1;
  __GT_default.cljs$core$IFn$_invoke$arity$2 = __GT_default__2;
  return __GT_default;
}();
goog.provide("dream.routes");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("om_tools.core");
goog.require("dream.ani");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.debug");
goog.require("dream.default$");
goog.require("om_tools.dom");
goog.require("om.core");
goog.require("dream.ani");
goog.require("om.core");
goog.require("dream.default$");
goog.require("goog.history.Html5History");
goog.require("om_tools.dom");
goog.require("goog.history.EventType");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.debug");
cljs.core.enable_console_print_BANG_.call(null);
if (typeof setTimeout !== "undefined") {
} else {
  setTimeout = function(fun, time) {
    return time;
  };
}
dream.routes.update_title_BANG_ = function update_title_BANG_(p__46772) {
  var map__46775 = p__46772;
  var map__46775__$1 = cljs.core.seq_QMARK_.call(null, map__46775) ? cljs.core.apply.call(null, cljs.core.hash_map, map__46775) : map__46775;
  var new_state = cljs.core.get.call(null, map__46775__$1, new cljs.core.Keyword(null, "new-state", "new-state", 3624385942));
  var map__46776 = new_state;
  var map__46776__$1 = cljs.core.seq_QMARK_.call(null, map__46776) ? cljs.core.apply.call(null, cljs.core.hash_map, map__46776) : map__46776;
  var route = cljs.core.get.call(null, map__46776__$1, new cljs.core.Keyword(null, "route", "route", 1122608571));
  return document.title = route.call(null, new cljs.core.Keyword(null, "view", "view", 1017523735));
};
dream.routes.update_history_BANG_ = function update_history_BANG_(owner, p__46777) {
  var map__46780 = p__46777;
  var map__46780__$1 = cljs.core.seq_QMARK_.call(null, map__46780) ? cljs.core.apply.call(null, cljs.core.hash_map, map__46780) : map__46780;
  var old_state = cljs.core.get.call(null, map__46780__$1, new cljs.core.Keyword(null, "old-state", "old-state", 1449001181));
  var new_state = cljs.core.get.call(null, map__46780__$1, new cljs.core.Keyword(null, "new-state", "new-state", 3624385942));
  var history = om.core.get_state.call(null, owner, new cljs.core.Keyword(null, "history", "history", 1940838406));
  var map__46781 = new_state;
  var map__46781__$1 = cljs.core.seq_QMARK_.call(null, map__46781) ? cljs.core.apply.call(null, cljs.core.hash_map, map__46781) : map__46781;
  var route = cljs.core.get.call(null, map__46781__$1, new cljs.core.Keyword(null, "route", "route", 1122608571));
  if (!cljs.core._EQ_.call(null, old_state, new_state)) {
    if (cljs.core.truth_(route.call(null, new cljs.core.Keyword(null, "view", "view", 1017523735)))) {
      return history.setToken(route.call(null, new cljs.core.Keyword(null, "view", "view", 1017523735)));
    } else {
      return history.setToken("/");
    }
  } else {
    return history.replaceToken(route.call(null, new cljs.core.Keyword(null, "view", "view", 1017523735)));
  }
};
dream.routes.stop_router_BANG_ = function stop_router_BANG_(owner) {
  var history = om.core.get_state.call(null, owner, new cljs.core.Keyword(null, "history", "history", 1940838406));
  goog.events.removeAll(history);
  return history.setEnabled(false);
};
dream.routes.start_history_BANG_ = function start_history_BANG_(data, owner) {
  var history = function() {
    var G__46783 = new goog.history.Html5History;
    G__46783.setUseFragment(false);
    G__46783.setPathPrefix("");
    G__46783.setEnabled(true);
    return G__46783;
  }();
  var nav_tokens_chan = om.core.get_shared.call(null, owner, new cljs.core.Keyword(null, "nav-tokens", "nav-tokens", 1550793974));
  goog.events.listen(history, goog.history.EventType.NAVIGATE, function(history, nav_tokens_chan) {
    return function(event) {
      if (cljs.core.truth_(event.isNavigation)) {
        return cljs.core.async.put_BANG_.call(null, nav_tokens_chan, event.token);
      } else {
        return null;
      }
    };
  }(history, nav_tokens_chan));
  return om.core.set_state_BANG_.call(null, owner, new cljs.core.Keyword(null, "history", "history", 1940838406), history);
};
dream.routes.start_tx_loop_BANG_ = function start_tx_loop_BANG_(owner) {
  var transactions_pub_chan = om.core.get_shared.call(null, owner, new cljs.core.Keyword(null, "transactions-pub", "transactions-pub", 1539305975));
  var txs = cljs.core.async.sub.call(null, transactions_pub_chan, new cljs.core.Keyword(null, "nav", "nav", 1014013077), cljs.core.async.chan.call(null));
  var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__, transactions_pub_chan, txs) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto__, transactions_pub_chan, txs) {
          return function(state_46822) {
            var state_val_46823 = state_46822[1];
            if (state_val_46823 === 5) {
              var inst_46817 = state_46822[2];
              var inst_46812 = inst_46817;
              var state_46822__$1 = function() {
                var statearr_46824 = state_46822;
                statearr_46824[7] = inst_46812;
                return statearr_46824;
              }();
              var statearr_46825_46836 = state_46822__$1;
              statearr_46825_46836[2] = null;
              statearr_46825_46836[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_46823 === 4) {
                var inst_46820 = state_46822[2];
                var state_46822__$1 = state_46822;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_46822__$1, inst_46820);
              } else {
                if (state_val_46823 === 3) {
                  var inst_46812 = state_46822[7];
                  var inst_46814 = dream.routes.update_title_BANG_.call(null, inst_46812);
                  var inst_46815 = dream.routes.update_history_BANG_.call(null, owner, inst_46812);
                  var state_46822__$1 = function() {
                    var statearr_46826 = state_46822;
                    statearr_46826[8] = inst_46815;
                    statearr_46826[9] = inst_46814;
                    return statearr_46826;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_46822__$1, 5, txs);
                } else {
                  if (state_val_46823 === 2) {
                    var inst_46811 = state_46822[2];
                    var inst_46812 = inst_46811;
                    var state_46822__$1 = function() {
                      var statearr_46827 = state_46822;
                      statearr_46827[7] = inst_46812;
                      return statearr_46827;
                    }();
                    var statearr_46828_46837 = state_46822__$1;
                    statearr_46828_46837[2] = null;
                    statearr_46828_46837[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_46823 === 1) {
                      var state_46822__$1 = state_46822;
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_46822__$1, 2, txs);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto__, transactions_pub_chan, txs);
        return function(switch__10455__auto__, c__10470__auto__, transactions_pub_chan, txs) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_46832 = [null, null, null, null, null, null, null, null, null, null];
              statearr_46832[0] = state_machine__10456__auto__;
              statearr_46832[1] = 1;
              return statearr_46832;
            };
            var state_machine__10456__auto____1 = function(state_46822) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_46822);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e46833) {
                    if (e46833 instanceof Object) {
                      var ex__10459__auto__ = e46833;
                      var statearr_46834_46838 = state_46822;
                      statearr_46834_46838[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_46822);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e46833;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__46839 = state_46822;
                  state_46822 = G__46839;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_46822) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_46822);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto__, transactions_pub_chan, txs);
      }();
      var state__10472__auto__ = function() {
        var statearr_46835 = f__10471__auto__.call(null);
        statearr_46835[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
        return statearr_46835;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto__, transactions_pub_chan, txs));
  return c__10470__auto__;
};
var ufv___46867 = schema.utils.use_fn_validation;
var output_schema46842_46868 = schema.core.Any;
var input_schema46843_46869 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "data", "data", -1637455517, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "arg2", "arg2", -1637529003, null))], null);
var input_checker46844_46870 = schema.core.checker.call(null, input_schema46843_46869);
var output_checker46845_46871 = schema.core.checker.call(null, output_schema46842_46868);
dream.routes.clear_route = function(ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871) {
  return function clear_route(G__46846, G__46847, G__46848) {
    var validate__7247__auto__ = ufv___46867.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___46872 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__46846, G__46847, G__46848], null);
      var temp__4092__auto___46873 = input_checker46844_46870.call(null, args__7248__auto___46872);
      if (cljs.core.truth_(temp__4092__auto___46873)) {
        var error__7249__auto___46874 = temp__4092__auto___46873;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "clear-route", "clear-route", -20887422, null), cljs.core.pr_str.call(null, error__7249__auto___46874)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___46874, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema46843_46869, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), args__7248__auto___46872], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var data = G__46846;
      var owner = G__46847;
      var G__46859 = G__46848;
      var map__46860 = G__46859;
      var map__46860__$1 = cljs.core.seq_QMARK_.call(null, map__46860) ? cljs.core.apply.call(null, cljs.core.hash_map, map__46860) : map__46860;
      var parent = cljs.core.get.call(null, map__46860__$1, new cljs.core.Keyword(null, "parent", "parent", 4313447452));
      var data__$1 = data;
      var owner__$1 = owner;
      var G__46859__$1 = G__46859;
      while (true) {
        var data__$2 = data__$1;
        var owner__$2 = owner__$1;
        var map__46861 = G__46859__$1;
        var map__46861__$1 = cljs.core.seq_QMARK_.call(null, map__46861) ? cljs.core.apply.call(null, cljs.core.hash_map, map__46861) : map__46861;
        var parent__$1 = cljs.core.get.call(null, map__46861__$1, new cljs.core.Keyword(null, "parent", "parent", 4313447452));
        if (typeof dream.routes.t46862 !== "undefined") {
        } else {
          dream.routes.t46862 = function(clear_route, map__46860, map__46861, input_schema46843, G__46846, output_schema46842, G__46848, ufv__, G__46847, parent, data, validate__7247__auto__, output_checker46845, G__46859, owner, input_checker46844, meta46863) {
            this.clear_route = clear_route;
            this.map__46860 = map__46860;
            this.map__46861 = map__46861;
            this.input_schema46843 = input_schema46843;
            this.G__46846 = G__46846;
            this.output_schema46842 = output_schema46842;
            this.G__46848 = G__46848;
            this.ufv__ = ufv__;
            this.G__46847 = G__46847;
            this.parent = parent;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.output_checker46845 = output_checker46845;
            this.G__46859 = G__46859;
            this.owner = owner;
            this.input_checker46844 = input_checker46844;
            this.meta46863 = meta46863;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.routes.t46862.cljs$lang$type = true;
          dream.routes.t46862.cljs$lang$ctorStr = "dream.routes/t46862";
          dream.routes.t46862.cljs$lang$ctorPrWriter = function(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.routes/t46862");
            };
          }(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871);
          dream.routes.t46862.prototype.om$core$IRenderState$ = true;
          dream.routes.t46862.prototype.om$core$IRenderState$render_state$arity$2 = function(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871) {
            return function(_, p__46865) {
              var self__ = this;
              var map__46866 = p__46865;
              var map__46866__$1 = cljs.core.seq_QMARK_.call(null, map__46866) ? cljs.core.apply.call(null, cljs.core.hash_map, map__46866) : map__46866;
              var show = cljs.core.get.call(null, map__46866__$1, new cljs.core.Keyword(null, "show", "show", 1017433711));
              var ___$1 = this;
              var trou = om.core.get_shared.call(null, self__.owner, new cljs.core.Keyword(null, "transroute", "transroute", 3592887315));
              var onclick = function(trou, ___$1, map__46866, map__46866__$1, show, data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871) {
                return function(e) {
                  return cljs.core.async.put_BANG_.call(null, trou, new cljs.core.Keyword(null, "clear", "clear", 1108650431));
                };
              }(trou, ___$1, map__46866, map__46866__$1, show, data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871);
              return function() {
                var or__3541__auto__ = self__.parent;
                if (cljs.core.truth_(or__3541__auto__)) {
                  return or__3541__auto__;
                } else {
                  return cljs.core.identity;
                }
              }().call(null, React.DOM.span({"onClick":function(trou, onclick, ___$1, map__46866, map__46866__$1, show, data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871) {
                return function(p1__46840_SHARP_) {
                  return onclick.call(null, p1__46840_SHARP_);
                };
              }(trou, onclick, ___$1, map__46866, map__46866__$1, show, data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871), "style":{"font-size":"20vh"}, "className":cljs.core.truth_(show) ? "trans fa fa-caret-up" : "trans fa fa-caret-up hide"}));
            };
          }(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871);
          dream.routes.t46862.prototype.om$core$IWillUpdate$ = true;
          dream.routes.t46862.prototype.om$core$IWillUpdate$will_update$arity$3 = function(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871) {
            return function(_, nprops, nstate) {
              var self__ = this;
              var ___$1 = this;
              var oprops = om.core.get_props.call(null, self__.owner);
              var node = om.core.get_node.call(null, self__.owner);
              cljs.core.print.call(null, oprops, nprops);
              if (oprops == null || cljs.core._EQ_.call(null, oprops, "/")) {
                om.core.update_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "show", "show", 1017433711), cljs.core.not);
              } else {
              }
              if (nprops == null || cljs.core._EQ_.call(null, nprops, "/")) {
                return om.core.update_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "show", "show", 1017433711), cljs.core.not);
              } else {
                return null;
              }
            };
          }(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871);
          dream.routes.t46862.prototype.om$core$IInitState$ = true;
          dream.routes.t46862.prototype.om$core$IInitState$init_state$arity$1 = function(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "show", "show", 1017433711), false], null);
            };
          }(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871);
          dream.routes.t46862.prototype.cljs$core$IMeta$_meta$arity$1 = function(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871) {
            return function(_46864) {
              var self__ = this;
              var _46864__$1 = this;
              return self__.meta46863;
            };
          }(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871);
          dream.routes.t46862.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871) {
            return function(_46864, meta46863__$1) {
              var self__ = this;
              var _46864__$1 = this;
              return new dream.routes.t46862(self__.clear_route, self__.map__46860, self__.map__46861, self__.input_schema46843, self__.G__46846, self__.output_schema46842, self__.G__46848, self__.ufv__, self__.G__46847, self__.parent, self__.data, self__.validate__7247__auto__, self__.output_checker46845, self__.G__46859, self__.owner, self__.input_checker46844, meta46863__$1);
            };
          }(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871);
          dream.routes.__GT_t46862 = function(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871) {
            return function __GT_t46862(clear_route__$1, map__46860__$2, map__46861__$2, input_schema46843__$1, G__46846__$1, output_schema46842__$1, G__46848__$1, ufv____$1, G__46847__$1, parent__$2, data__$3, validate__7247__auto____$1, output_checker46845__$1, G__46859__$2, owner__$3, input_checker46844__$1, meta46863) {
              return new dream.routes.t46862(clear_route__$1, map__46860__$2, map__46861__$2, input_schema46843__$1, G__46846__$1, output_schema46842__$1, G__46848__$1, ufv____$1, G__46847__$1, parent__$2, data__$3, validate__7247__auto____$1, output_checker46845__$1, G__46859__$2, owner__$3, input_checker46844__$1, meta46863);
            };
          }(data__$2, owner__$2, map__46861, map__46861__$1, parent__$1, data, owner, G__46859, map__46860, map__46860__$1, parent, validate__7247__auto__, ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871);
        }
        return new dream.routes.t46862(clear_route, map__46860__$1, map__46861__$1, input_schema46843_46869, G__46846, output_schema46842_46868, G__46848, ufv___46867, G__46847, parent__$1, data__$2, validate__7247__auto__, output_checker46845_46871, G__46859__$1, owner__$2, input_checker46844_46870, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___46875 = output_checker46845_46871.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___46875)) {
        var error__7249__auto___46876 = temp__4092__auto___46875;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "clear-route", "clear-route", -20887422, null), cljs.core.pr_str.call(null, error__7249__auto___46876)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___46876, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema46842_46868, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___46867, output_schema46842_46868, input_schema46843_46869, input_checker46844_46870, output_checker46845_46871);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.routes.clear_route), schema.core.make_fn_schema.call(null, output_schema46842_46868, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema46843_46869], null)));
dream.routes.__GT_clear_route = function() {
  var __GT_clear_route = null;
  var __GT_clear_route__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.routes.clear_route, cursor__9015__auto__);
  };
  var __GT_clear_route__2 = function(cursor__9015__auto__, m46841) {
    return om.core.build.call(null, dream.routes.clear_route, cursor__9015__auto__, m46841);
  };
  __GT_clear_route = function(cursor__9015__auto__, m46841) {
    switch(arguments.length) {
      case 1:
        return __GT_clear_route__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_clear_route__2.call(this, cursor__9015__auto__, m46841);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_clear_route.cljs$core$IFn$_invoke$arity$1 = __GT_clear_route__1;
  __GT_clear_route.cljs$core$IFn$_invoke$arity$2 = __GT_clear_route__2;
  return __GT_clear_route;
}();
dream.routes.build_page = function build_page(data, p__46877, owner) {
  var map__46880 = p__46877;
  var map__46880__$1 = cljs.core.seq_QMARK_.call(null, map__46880) ? cljs.core.apply.call(null, cljs.core.hash_map, map__46880) : map__46880;
  var views = cljs.core.get.call(null, map__46880__$1, new cljs.core.Keyword(null, "page-views", "page-views", 1214717218));
  var map__46881 = data.call(null, new cljs.core.Keyword(null, "route", "route", 1122608571));
  var map__46881__$1 = cljs.core.seq_QMARK_.call(null, map__46881) ? cljs.core.apply.call(null, cljs.core.hash_map, map__46881) : map__46881;
  var context = cljs.core.get.call(null, map__46881__$1, new cljs.core.Keyword(null, "context", "context", 1965435169));
  var view = cljs.core.get.call(null, map__46881__$1, new cljs.core.Keyword(null, "view", "view", 1017523735));
  return om.core.build.call(null, cljs.core.get.call(null, views, view, dream.default$.default$), data, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "init-state", "init-state", 4479067398), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "context", "context", 1965435169), context], null), new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "clear-route", "clear-route", 2633548347), 
  dream.routes.clear_route], null)], null));
};
dream.routes.troute_loop = function troute_loop(data, owner) {
  var trou = om.core.get_shared.call(null, owner, new cljs.core.Keyword(null, "transroute", "transroute", 3592887315));
  var navtok = om.core.get_shared.call(null, owner, new cljs.core.Keyword(null, "nav-tokens", "nav-tokens", 1550793974));
  var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__, trou, navtok) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto__, trou, navtok) {
          return function(state_46950) {
            var state_val_46951 = state_46950[1];
            if (state_val_46951 === 7) {
              var inst_46945 = state_46950[2];
              var inst_46927 = inst_46945;
              var state_46950__$1 = function() {
                var statearr_46952 = state_46950;
                statearr_46952[7] = inst_46927;
                return statearr_46952;
              }();
              var statearr_46953_46968 = state_46950__$1;
              statearr_46953_46968[2] = null;
              statearr_46953_46968[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_46951 === 6) {
                var inst_46927 = state_46950[7];
                var inst_46929 = om.core.get_node.call(null, owner);
                var inst_46930 = [new cljs.core.Keyword(null, "transform", "transform", 2066570974), new cljs.core.Keyword(null, "opacity", "opacity", 4041665405)];
                var inst_46931 = ["translate3d(0,0,0)", 1];
                var inst_46932 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_46930, inst_46931);
                var inst_46933 = [new cljs.core.Keyword(null, "transform", "transform", 2066570974), new cljs.core.Keyword(null, "opacity", "opacity", 4041665405)];
                var inst_46934 = ["translate3d(0, -300%, 0)", 0];
                var inst_46935 = cljs.core.PersistentHashMap.fromArrays.call(null, inst_46933, inst_46934);
                var inst_46936 = [inst_46932, inst_46935];
                var inst_46937 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_46936, null);
                var inst_46938 = dream.ani.create_animation.call(null, inst_46929, inst_46937, 350);
                var inst_46939 = function() {
                  var key = inst_46927;
                  return function(key, inst_46927, inst_46929, inst_46930, inst_46931, inst_46932, inst_46933, inst_46934, inst_46935, inst_46936, inst_46937, inst_46938, state_val_46951, c__10470__auto__, trou, navtok) {
                    return function() {
                      return cljs.core.async.put_BANG_.call(null, navtok, new cljs.core.Keyword(null, "clear", "clear", 1108650431));
                    };
                  }(key, inst_46927, inst_46929, inst_46930, inst_46931, inst_46932, inst_46933, inst_46934, inst_46935, inst_46936, inst_46937, inst_46938, state_val_46951, c__10470__auto__, trou, navtok);
                }();
                var inst_46940 = setTimeout(inst_46939, 250);
                var state_46950__$1 = function() {
                  var statearr_46954 = state_46950;
                  statearr_46954[8] = inst_46938;
                  return statearr_46954;
                }();
                var statearr_46955_46969 = state_46950__$1;
                statearr_46955_46969[2] = inst_46940;
                statearr_46955_46969[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_46951 === 5) {
                  var inst_46943 = state_46950[2];
                  var state_46950__$1 = function() {
                    var statearr_46956 = state_46950;
                    statearr_46956[9] = inst_46943;
                    return statearr_46956;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_46950__$1, 7, trou);
                } else {
                  if (state_val_46951 === 4) {
                    var inst_46948 = state_46950[2];
                    var state_46950__$1 = state_46950;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_46950__$1, inst_46948);
                  } else {
                    if (state_val_46951 === 3) {
                      var inst_46927 = state_46950[7];
                      var state_46950__$1 = state_46950;
                      var G__46957_46970 = inst_46927 instanceof cljs.core.Keyword ? inst_46927.fqn : null;
                      var caseval__46971;
                      switch(G__46957_46970) {
                        case "clear":
                          (function() {
                            var statearr_46958 = state_46950__$1;
                            statearr_46958[1] = 6;
                            return statearr_46958;
                          })();
                          break;
                        default:
                          (function() {
                            throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_46927));
                          })();
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_46951 === 2) {
                        var inst_46926 = state_46950[2];
                        var inst_46927 = inst_46926;
                        var state_46950__$1 = function() {
                          var statearr_46959 = state_46950;
                          statearr_46959[7] = inst_46927;
                          return statearr_46959;
                        }();
                        var statearr_46960_46972 = state_46950__$1;
                        statearr_46960_46972[2] = null;
                        statearr_46960_46972[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_46951 === 1) {
                          var state_46950__$1 = state_46950;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_46950__$1, 2, trou);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto__, trou, navtok);
        return function(switch__10455__auto__, c__10470__auto__, trou, navtok) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_46964 = [null, null, null, null, null, null, null, null, null, null];
              statearr_46964[0] = state_machine__10456__auto__;
              statearr_46964[1] = 1;
              return statearr_46964;
            };
            var state_machine__10456__auto____1 = function(state_46950) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_46950);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e46965) {
                    if (e46965 instanceof Object) {
                      var ex__10459__auto__ = e46965;
                      var statearr_46966_46973 = state_46950;
                      statearr_46966_46973[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_46950);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e46965;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__46974 = state_46950;
                  state_46950 = G__46974;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_46950) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_46950);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto__, trou, navtok);
      }();
      var state__10472__auto__ = function() {
        var statearr_46967 = f__10471__auto__.call(null);
        statearr_46967[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
        return statearr_46967;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto__, trou, navtok));
  return c__10470__auto__;
};
dream.routes.start_nav_loop_BANG_ = function start_nav_loop_BANG_(p__46975, owner) {
  var map__47012 = p__46975;
  var map__47012__$1 = cljs.core.seq_QMARK_.call(null, map__47012) ? cljs.core.apply.call(null, cljs.core.hash_map, map__47012) : map__47012;
  var route = cljs.core.get.call(null, map__47012__$1, new cljs.core.Keyword(null, "route", "route", 1122608571));
  var nav_tokens_chan = om.core.get_shared.call(null, owner, new cljs.core.Keyword(null, "nav-tokens", "nav-tokens", 1550793974));
  var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__, nav_tokens_chan, map__47012, map__47012__$1, route) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto__, nav_tokens_chan, map__47012, map__47012__$1, route) {
          return function(state_47029) {
            var state_val_47030 = state_47029[1];
            if (state_val_47030 === 8) {
              var inst_47024 = state_47029[2];
              var inst_47015 = inst_47024;
              var state_47029__$1 = function() {
                var statearr_47031 = state_47029;
                statearr_47031[7] = inst_47015;
                return statearr_47031;
              }();
              var statearr_47032_47048 = state_47029__$1;
              statearr_47032_47048[2] = null;
              statearr_47032_47048[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_47030 === 7) {
                var inst_47015 = state_47029[7];
                var inst_47019 = om.core.update_BANG_.call(null, route, new cljs.core.Keyword(null, "view", "view", 1017523735), inst_47015, new cljs.core.Keyword(null, "nav", "nav", 1014013077));
                var state_47029__$1 = state_47029;
                var statearr_47033_47049 = state_47029__$1;
                statearr_47033_47049[2] = inst_47019;
                statearr_47033_47049[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_47030 === 6) {
                  var inst_47017 = om.core.update_BANG_.call(null, route, new cljs.core.Keyword(null, "view", "view", 1017523735), null, new cljs.core.Keyword(null, "nav", "nav", 1014013077));
                  var state_47029__$1 = state_47029;
                  var statearr_47034_47050 = state_47029__$1;
                  statearr_47034_47050[2] = inst_47017;
                  statearr_47034_47050[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_47030 === 5) {
                    var inst_47022 = state_47029[2];
                    var state_47029__$1 = function() {
                      var statearr_47035 = state_47029;
                      statearr_47035[8] = inst_47022;
                      return statearr_47035;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_47029__$1, 8, nav_tokens_chan);
                  } else {
                    if (state_val_47030 === 4) {
                      var inst_47027 = state_47029[2];
                      var state_47029__$1 = state_47029;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_47029__$1, inst_47027);
                    } else {
                      if (state_val_47030 === 3) {
                        var inst_47015 = state_47029[7];
                        var state_47029__$1 = state_47029;
                        var G__47036_47051 = inst_47015 instanceof cljs.core.Keyword ? inst_47015.fqn : null;
                        var caseval__47052;
                        switch(G__47036_47051) {
                          case "clear":
                            (function() {
                              var statearr_47037 = state_47029__$1;
                              statearr_47037[1] = 6;
                              return statearr_47037;
                            })();
                            break;
                          default:
                            (function() {
                              var statearr_47038_47053 = state_47029__$1;
                              statearr_47038_47053[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            })();
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_47030 === 2) {
                          var inst_47014 = state_47029[2];
                          var inst_47015 = inst_47014;
                          var state_47029__$1 = function() {
                            var statearr_47039 = state_47029;
                            statearr_47039[7] = inst_47015;
                            return statearr_47039;
                          }();
                          var statearr_47040_47054 = state_47029__$1;
                          statearr_47040_47054[2] = null;
                          statearr_47040_47054[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_47030 === 1) {
                            var state_47029__$1 = state_47029;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_47029__$1, 2, nav_tokens_chan);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto__, nav_tokens_chan, map__47012, map__47012__$1, route);
        return function(switch__10455__auto__, c__10470__auto__, nav_tokens_chan, map__47012, map__47012__$1, route) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_47044 = [null, null, null, null, null, null, null, null, null];
              statearr_47044[0] = state_machine__10456__auto__;
              statearr_47044[1] = 1;
              return statearr_47044;
            };
            var state_machine__10456__auto____1 = function(state_47029) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_47029);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e47045) {
                    if (e47045 instanceof Object) {
                      var ex__10459__auto__ = e47045;
                      var statearr_47046_47055 = state_47029;
                      statearr_47046_47055[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_47029);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e47045;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__47056 = state_47029;
                  state_47029 = G__47056;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_47029) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_47029);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto__, nav_tokens_chan, map__47012, map__47012__$1, route);
      }();
      var state__10472__auto__ = function() {
        var statearr_47047 = f__10471__auto__.call(null);
        statearr_47047[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
        return statearr_47047;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto__, nav_tokens_chan, map__47012, map__47012__$1, route));
  return c__10470__auto__;
};
dream.routes.start_router_BANG_ = function start_router_BANG_(data, owner) {
  dream.routes.start_history_BANG_.call(null, data, owner);
  return dream.routes.start_nav_loop_BANG_.call(null, data, owner);
};
var ufv___47071 = schema.utils.use_fn_validation;
var output_schema47058_47072 = schema.core.Any;
var input_schema47059_47073 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "data", "data", -1637455517, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "opts", "opts", -1637113383, null))], null);
var input_checker47060_47074 = schema.core.checker.call(null, input_schema47059_47073);
var output_checker47061_47075 = schema.core.checker.call(null, output_schema47058_47072);
dream.routes.router = function(ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075) {
  return function router(G__47062, G__47063, G__47064) {
    var validate__7247__auto__ = ufv___47071.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___47076 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__47062, G__47063, G__47064], null);
      var temp__4092__auto___47077 = input_checker47060_47074.call(null, args__7248__auto___47076);
      if (cljs.core.truth_(temp__4092__auto___47077)) {
        var error__7249__auto___47078 = temp__4092__auto___47077;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "router", "router", 1729302786, null), cljs.core.pr_str.call(null, error__7249__auto___47078)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___47078, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema47059_47073, new cljs.core.Keyword(null, "value", "value", 
        1125876963), args__7248__auto___47076], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var data = G__47062;
      var owner = G__47063;
      var opts = G__47064;
      while (true) {
        if (typeof dream.routes.t47068 !== "undefined") {
        } else {
          dream.routes.t47068 = function(opts, output_schema47058, router, ufv__, data, validate__7247__auto__, input_checker47060, owner, output_checker47061, input_schema47059, G__47063, G__47062, G__47064, meta47069) {
            this.opts = opts;
            this.output_schema47058 = output_schema47058;
            this.router = router;
            this.ufv__ = ufv__;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.input_checker47060 = input_checker47060;
            this.owner = owner;
            this.output_checker47061 = output_checker47061;
            this.input_schema47059 = input_schema47059;
            this.G__47063 = G__47063;
            this.G__47062 = G__47062;
            this.G__47064 = G__47064;
            this.meta47069 = meta47069;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.routes.t47068.cljs$lang$type = true;
          dream.routes.t47068.cljs$lang$ctorStr = "dream.routes/t47068";
          dream.routes.t47068.cljs$lang$ctorPrWriter = function(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.routes/t47068");
            };
          }(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075);
          dream.routes.t47068.prototype.om$core$IWillUnmount$ = true;
          dream.routes.t47068.prototype.om$core$IWillUnmount$will_unmount$arity$1 = function(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              return dream.routes.stop_router_BANG_.call(null, self__.owner);
            };
          }(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075);
          dream.routes.t47068.prototype.om$core$IDidMount$ = true;
          dream.routes.t47068.prototype.om$core$IDidMount$did_mount$arity$1 = function(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              return dream.routes.start_router_BANG_.call(null, self__.data, self__.owner);
            };
          }(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075);
          dream.routes.t47068.prototype.om$core$IRender$ = true;
          dream.routes.t47068.prototype.om$core$IRender$render$arity$1 = function(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              return dream.routes.build_page.call(null, self__.data, self__.opts, self__.owner);
            };
          }(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075);
          dream.routes.t47068.prototype.om$core$IWillMount$ = true;
          dream.routes.t47068.prototype.om$core$IWillMount$will_mount$arity$1 = function(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              if (cljs.core.truth_(om.core.get_shared.call(null, self__.owner, new cljs.core.Keyword(null, "transroute", "transroute", 3592887315)))) {
                dream.routes.troute_loop.call(null, self__.data, self__.owner);
                return dream.routes.start_tx_loop_BANG_.call(null, self__.owner);
              } else {
                return null;
              }
            };
          }(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075);
          dream.routes.t47068.prototype.om$core$IDisplayName$ = true;
          dream.routes.t47068.prototype.om$core$IDisplayName$display_name$arity$1 = function(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              return "router";
            };
          }(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075);
          dream.routes.t47068.prototype.cljs$core$IMeta$_meta$arity$1 = function(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075) {
            return function(_47070) {
              var self__ = this;
              var _47070__$1 = this;
              return self__.meta47069;
            };
          }(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075);
          dream.routes.t47068.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075) {
            return function(_47070, meta47069__$1) {
              var self__ = this;
              var _47070__$1 = this;
              return new dream.routes.t47068(self__.opts, self__.output_schema47058, self__.router, self__.ufv__, self__.data, self__.validate__7247__auto__, self__.input_checker47060, self__.owner, self__.output_checker47061, self__.input_schema47059, self__.G__47063, self__.G__47062, self__.G__47064, meta47069__$1);
            };
          }(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075);
          dream.routes.__GT_t47068 = function(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075) {
            return function __GT_t47068(opts__$1, output_schema47058__$1, router__$1, ufv____$1, data__$1, validate__7247__auto____$1, input_checker47060__$1, owner__$1, output_checker47061__$1, input_schema47059__$1, G__47063__$1, G__47062__$1, G__47064__$1, meta47069) {
              return new dream.routes.t47068(opts__$1, output_schema47058__$1, router__$1, ufv____$1, data__$1, validate__7247__auto____$1, input_checker47060__$1, owner__$1, output_checker47061__$1, input_schema47059__$1, G__47063__$1, G__47062__$1, G__47064__$1, meta47069);
            };
          }(validate__7247__auto__, ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075);
        }
        return new dream.routes.t47068(opts, output_schema47058_47072, router, ufv___47071, data, validate__7247__auto__, input_checker47060_47074, owner, output_checker47061_47075, input_schema47059_47073, G__47063, G__47062, G__47064, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___47079 = output_checker47061_47075.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___47079)) {
        var error__7249__auto___47080 = temp__4092__auto___47079;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "router", "router", 1729302786, null), cljs.core.pr_str.call(null, error__7249__auto___47080)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___47080, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema47058_47072, new cljs.core.Keyword(null, "value", "value", 
        1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___47071, output_schema47058_47072, input_schema47059_47073, input_checker47060_47074, output_checker47061_47075);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.routes.router), schema.core.make_fn_schema.call(null, output_schema47058_47072, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema47059_47073], null)));
dream.routes.__GT_router = function() {
  var __GT_router = null;
  var __GT_router__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.routes.router, cursor__9015__auto__);
  };
  var __GT_router__2 = function(cursor__9015__auto__, m47057) {
    return om.core.build.call(null, dream.routes.router, cursor__9015__auto__, m47057);
  };
  __GT_router = function(cursor__9015__auto__, m47057) {
    switch(arguments.length) {
      case 1:
        return __GT_router__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_router__2.call(this, cursor__9015__auto__, m47057);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_router.cljs$core$IFn$_invoke$arity$1 = __GT_router__1;
  __GT_router.cljs$core$IFn$_invoke$arity$2 = __GT_router__2;
  return __GT_router;
}();
goog.provide("om_websocket.core");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.core.async");
goog.require("om_tools.core");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.debug");
goog.require("goog.dom");
goog.require("om.dom");
goog.require("om.core");
goog.require("goog.dom");
goog.require("clojure.string");
goog.require("om.core");
goog.require("goog.net.WebSocket");
goog.require("clojure.string");
goog.require("om.dom");
goog.require("cljs.reader");
goog.require("goog.ui.IdGenerator");
goog.require("om_tools.dom");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.debug");
var ufv___20046 = schema.utils.use_fn_validation;
var output_schema20031_20047 = schema.core.Any;
var input_schema20032_20048 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "data", "data", -1637455517, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "opts", "opts", -1637113383, null))], null);
var input_checker20033_20049 = schema.core.checker.call(null, input_schema20032_20048);
var output_checker20034_20050 = schema.core.checker.call(null, output_schema20031_20047);
om_websocket.core.om_websocket = function(ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
  return function om_websocket__$1(G__20035, G__20036, G__20037) {
    var validate__7247__auto__ = ufv___20046.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___20051 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__20035, G__20036, G__20037], null);
      var temp__4092__auto___20052 = input_checker20033_20049.call(null, args__7248__auto___20051);
      if (cljs.core.truth_(temp__4092__auto___20052)) {
        var error__7249__auto___20053 = temp__4092__auto___20052;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "om-websocket", "om-websocket", 1020807249, null), cljs.core.pr_str.call(null, error__7249__auto___20053)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___20053, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema20032_20048, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), args__7248__auto___20051], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var data = G__20035;
      var owner = G__20036;
      var opts = G__20037;
      while (true) {
        if (typeof om_websocket.core.t20042 !== "undefined") {
        } else {
          om_websocket.core.t20042 = function(input_checker20033, output_checker20034, opts, ufv__, om_websocket, data, validate__7247__auto__, output_schema20031, input_schema20032, G__20035, G__20036, G__20037, owner, meta20043) {
            this.input_checker20033 = input_checker20033;
            this.output_checker20034 = output_checker20034;
            this.opts = opts;
            this.ufv__ = ufv__;
            this.om_websocket = om_websocket;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.output_schema20031 = output_schema20031;
            this.input_schema20032 = input_schema20032;
            this.G__20035 = G__20035;
            this.G__20036 = G__20036;
            this.G__20037 = G__20037;
            this.owner = owner;
            this.meta20043 = meta20043;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          om_websocket.core.t20042.cljs$lang$type = true;
          om_websocket.core.t20042.cljs$lang$ctorStr = "om-websocket.core/t20042";
          om_websocket.core.t20042.cljs$lang$ctorPrWriter = function(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "om-websocket.core/t20042");
            };
          }(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050);
          om_websocket.core.t20042.prototype.om$core$IRenderState$ = true;
          om_websocket.core.t20042.prototype.om$core$IRenderState$render_state$arity$2 = function(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
            return function(_, ___$1) {
              var self__ = this;
              var ___$2 = this;
              return om.core.build.call(null, self__.opts.call(null, new cljs.core.Keyword(null, "child", "child", 1108535438)), self__.data);
            };
          }(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050);
          om_websocket.core.t20042.prototype.om$core$IWillMount$ = true;
          om_websocket.core.t20042.prototype.om$core$IWillMount$will_mount$arity$1 = function(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              var websocket__GT_ = om.core.get_shared.call(null, self__.owner, new cljs.core.Keyword(null, "websocket-\x3e", "websocket-\x3e", 3739762474));
              var websocket = om.core.get_state.call(null, self__.owner, new cljs.core.Keyword(null, "websocket", "websocket", 784338745));
              var __GT_websocket = om.core.get_state.call(null, self__.owner, new cljs.core.Keyword(null, "-\x3ewebsocket", "-\x3ewebsocket", 2226970792));
              var in_coord = self__.opts.call(null, new cljs.core.Keyword(null, "in-coord", "in-coord", 3844677567));
              var out_coord = self__.opts.call(null, new cljs.core.Keyword(null, "out-coord", "out-coord", 1254670120));
              var G__20045_20054 = websocket;
              G__20045_20054.addEventListener(goog.net.WebSocket.EventType.CLOSED, function(G__20045_20054, websocket__GT_, websocket, __GT_websocket, in_coord, out_coord, ___$1, validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
                return function(p1__20028_SHARP_) {
                  return cljs.core.print.call(null, goog.debug.expose(p1__20028_SHARP_));
                };
              }(G__20045_20054, websocket__GT_, websocket, __GT_websocket, in_coord, out_coord, ___$1, validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050));
              G__20045_20054.addEventListener(goog.net.WebSocket.EventType.OPENED, function(G__20045_20054, websocket__GT_, websocket, __GT_websocket, in_coord, out_coord, ___$1, validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
                return function() {
                  return cljs.core.print.call(null, "the channel is alive");
                };
              }(G__20045_20054, websocket__GT_, websocket, __GT_websocket, in_coord, out_coord, ___$1, validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050));
              G__20045_20054.addEventListener(goog.net.WebSocket.EventType.MESSAGE, function(G__20045_20054, websocket__GT_, websocket, __GT_websocket, in_coord, out_coord, ___$1, validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
                return function(p1__20029_SHARP_) {
                  return cljs.core.async.put_BANG_.call(null, __GT_websocket, p1__20029_SHARP_.message);
                };
              }(G__20045_20054, websocket__GT_, websocket, __GT_websocket, in_coord, out_coord, ___$1, validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050));
              G__20045_20054.open(self__.opts.call(null, new cljs.core.Keyword(null, "connection-str", "connection-str", 2282948148)));
              in_coord.call(null, __GT_websocket, self__.data, self__.owner);
              return out_coord.call(null, websocket__GT_, self__.data, self__.owner, websocket);
            };
          }(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050);
          om_websocket.core.t20042.prototype.om$core$IInitState$ = true;
          om_websocket.core.t20042.prototype.om$core$IInitState$init_state$arity$1 = function(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "websocket", "websocket", 784338745), new goog.net.WebSocket, new cljs.core.Keyword(null, "-\x3ewebsocket", "-\x3ewebsocket", 2226970792), cljs.core.async.chan.call(null)], null);
            };
          }(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050);
          om_websocket.core.t20042.prototype.cljs$core$IMeta$_meta$arity$1 = function(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
            return function(_20044) {
              var self__ = this;
              var _20044__$1 = this;
              return self__.meta20043;
            };
          }(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050);
          om_websocket.core.t20042.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
            return function(_20044, meta20043__$1) {
              var self__ = this;
              var _20044__$1 = this;
              return new om_websocket.core.t20042(self__.input_checker20033, self__.output_checker20034, self__.opts, self__.ufv__, self__.om_websocket, self__.data, self__.validate__7247__auto__, self__.output_schema20031, self__.input_schema20032, self__.G__20035, self__.G__20036, self__.G__20037, self__.owner, meta20043__$1);
            };
          }(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050);
          om_websocket.core.__GT_t20042 = function(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050) {
            return function __GT_t20042(input_checker20033__$1, output_checker20034__$1, opts__$1, ufv____$1, om_websocket__$2, data__$1, validate__7247__auto____$1, output_schema20031__$1, input_schema20032__$1, G__20035__$1, G__20036__$1, G__20037__$1, owner__$1, meta20043) {
              return new om_websocket.core.t20042(input_checker20033__$1, output_checker20034__$1, opts__$1, ufv____$1, om_websocket__$2, data__$1, validate__7247__auto____$1, output_schema20031__$1, input_schema20032__$1, G__20035__$1, G__20036__$1, G__20037__$1, owner__$1, meta20043);
            };
          }(validate__7247__auto__, ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050);
        }
        return new om_websocket.core.t20042(input_checker20033_20049, output_checker20034_20050, opts, ufv___20046, om_websocket__$1, data, validate__7247__auto__, output_schema20031_20047, input_schema20032_20048, G__20035, G__20036, G__20037, owner, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___20055 = output_checker20034_20050.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___20055)) {
        var error__7249__auto___20056 = temp__4092__auto___20055;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "om-websocket", "om-websocket", 1020807249, null), cljs.core.pr_str.call(null, error__7249__auto___20056)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___20056, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema20031_20047, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___20046, output_schema20031_20047, input_schema20032_20048, input_checker20033_20049, output_checker20034_20050);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, om_websocket.core.om_websocket), schema.core.make_fn_schema.call(null, output_schema20031_20047, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema20032_20048], null)));
om_websocket.core.__GT_om_websocket = function() {
  var __GT_om_websocket = null;
  var __GT_om_websocket__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, om_websocket.core.om_websocket, cursor__9015__auto__);
  };
  var __GT_om_websocket__2 = function(cursor__9015__auto__, m20030) {
    return om.core.build.call(null, om_websocket.core.om_websocket, cursor__9015__auto__, m20030);
  };
  __GT_om_websocket = function(cursor__9015__auto__, m20030) {
    switch(arguments.length) {
      case 1:
        return __GT_om_websocket__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_om_websocket__2.call(this, cursor__9015__auto__, m20030);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_om_websocket.cljs$core$IFn$_invoke$arity$1 = __GT_om_websocket__1;
  __GT_om_websocket.cljs$core$IFn$_invoke$arity$2 = __GT_om_websocket__2;
  return __GT_om_websocket;
}();
goog.provide("dream.root");
goog.require("cljs.core");
goog.require("om_websocket.core");
goog.require("cljs.core.async");
goog.require("om_tools.core");
goog.require("goog.dom.classes");
goog.require("dream.routes");
goog.require("dream.x");
goog.require("dream.blog");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.debug");
goog.require("dream.blog");
goog.require("cljs.reader");
goog.require("goog.dom");
goog.require("cljs.reader");
goog.require("dream.routes");
goog.require("om_tools.dom");
goog.require("om.core");
goog.require("goog.dom");
goog.require("om.core");
goog.require("goog.dom.classes");
goog.require("dream.x");
goog.require("om.dom");
goog.require("om_websocket.core");
goog.require("om.dom");
goog.require("cljs.reader");
goog.require("om_tools.dom");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.debug");
if (typeof console !== "undefined") {
  cljs.core.enable_console_print_BANG_.call(null);
} else {
  cljs.core.set_print_fn_BANG_.call(null, print);
}
cljs.core.enable_console_print_BANG_.call(null);
dream.root.transition = function transition(length, type) {
  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "transition", "transition", 3584712903), "all " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(length) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(type)], null);
};
dream.root.translator = function translator(scale, x, y, deg) {
  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "-webkit-transform", "-webkit-transform", 2944012288), " translate(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x) + "px," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(y) + "px) rotate(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(deg) + "deg) scale(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(scale) + ")"], null);
};
var ufv___14459 = schema.utils.use_fn_validation;
var output_schema14443_14460 = schema.core.Any;
var input_schema14444_14461 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "data", "data", -1637455517, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null))], null);
var input_checker14445_14462 = schema.core.checker.call(null, input_schema14444_14461);
var output_checker14446_14463 = schema.core.checker.call(null, output_schema14443_14460);
dream.root.nav_el = function(ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463) {
  return function nav_el(G__14447, G__14448) {
    var validate__7247__auto__ = ufv___14459.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___14464 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14447, G__14448], null);
      var temp__4092__auto___14465 = input_checker14445_14462.call(null, args__7248__auto___14464);
      if (cljs.core.truth_(temp__4092__auto___14465)) {
        var error__7249__auto___14466 = temp__4092__auto___14465;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "nav-el", "nav-el", 1601818442, null), cljs.core.pr_str.call(null, error__7249__auto___14466)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___14466, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14444_14461, new cljs.core.Keyword(null, "value", "value", 
        1125876963), args__7248__auto___14464], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var data = G__14447;
      var owner = G__14448;
      while (true) {
        if (typeof dream.root.t14454 !== "undefined") {
        } else {
          dream.root.t14454 = function(ufv__, G__14447, input_schema14444, data, input_checker14445, validate__7247__auto__, G__14448, nav_el, output_schema14443, owner, output_checker14446, meta14455) {
            this.ufv__ = ufv__;
            this.G__14447 = G__14447;
            this.input_schema14444 = input_schema14444;
            this.data = data;
            this.input_checker14445 = input_checker14445;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.G__14448 = G__14448;
            this.nav_el = nav_el;
            this.output_schema14443 = output_schema14443;
            this.owner = owner;
            this.output_checker14446 = output_checker14446;
            this.meta14455 = meta14455;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.root.t14454.cljs$lang$type = true;
          dream.root.t14454.cljs$lang$ctorStr = "dream.root/t14454";
          dream.root.t14454.cljs$lang$ctorPrWriter = function(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.root/t14454");
            };
          }(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463);
          dream.root.t14454.prototype.om$core$IRenderState$ = true;
          dream.root.t14454.prototype.om$core$IRenderState$render_state$arity$2 = function(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463) {
            return function(_, p__14457) {
              var self__ = this;
              var map__14458 = p__14457;
              var map__14458__$1 = cljs.core.seq_QMARK_.call(null, map__14458) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14458) : map__14458;
              var clicksort = cljs.core.get.call(null, map__14458__$1, new cljs.core.Keyword(null, "clicksort", "clicksort", 3344738968));
              var selected = cljs.core.get.call(null, map__14458__$1, new cljs.core.Keyword(null, "selected", "selected", 2205476365));
              var ___$1 = this;
              var navc = om.core.get_shared.call(null, self__.owner, new cljs.core.Keyword(null, "nav-tokens", "nav-tokens", 1550793974));
              var webc = om.core.get_shared.call(null, self__.owner, new cljs.core.Keyword(null, "websocket-\x3e", "websocket-\x3e", 3739762474));
              var onclick = function(navc, webc, ___$1, map__14458, map__14458__$1, clicksort, selected, validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463) {
                return function(event) {
                  event.preventDefault();
                  return cljs.core.async.put_BANG_.call(null, navc, self__.data);
                };
              }(navc, webc, ___$1, map__14458, map__14458__$1, clicksort, selected, validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463);
              return cljs.core.apply.call(null, React.DOM.div, {"className":cljs.core._EQ_.call(null, self__.data, selected) ? "block selected" : "block well-named", "href":"" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.data)}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, React.DOM.a, {"onClick":function(navc, webc, onclick, ___$1, map__14458, map__14458__$1, clicksort, selected, validate__7247__auto__, 
              ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463) {
                return function(p1__14441_SHARP_) {
                  return onclick.call(null, p1__14441_SHARP_);
                };
              }(navc, webc, onclick, ___$1, map__14458, map__14458__$1, clicksort, selected, validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463), "style":{"display":"inline-block"}, "href":"" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.data)}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.data], null)))], null)));
            };
          }(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463);
          dream.root.t14454.prototype.om$core$IDisplayName$ = true;
          dream.root.t14454.prototype.om$core$IDisplayName$display_name$arity$1 = function(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              return "nav-el";
            };
          }(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463);
          dream.root.t14454.prototype.cljs$core$IMeta$_meta$arity$1 = function(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463) {
            return function(_14456) {
              var self__ = this;
              var _14456__$1 = this;
              return self__.meta14455;
            };
          }(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463);
          dream.root.t14454.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463) {
            return function(_14456, meta14455__$1) {
              var self__ = this;
              var _14456__$1 = this;
              return new dream.root.t14454(self__.ufv__, self__.G__14447, self__.input_schema14444, self__.data, self__.input_checker14445, self__.validate__7247__auto__, self__.G__14448, self__.nav_el, self__.output_schema14443, self__.owner, self__.output_checker14446, meta14455__$1);
            };
          }(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463);
          dream.root.__GT_t14454 = function(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463) {
            return function __GT_t14454(ufv____$1, G__14447__$1, input_schema14444__$1, data__$1, input_checker14445__$1, validate__7247__auto____$1, G__14448__$1, nav_el__$1, output_schema14443__$1, owner__$1, output_checker14446__$1, meta14455) {
              return new dream.root.t14454(ufv____$1, G__14447__$1, input_schema14444__$1, data__$1, input_checker14445__$1, validate__7247__auto____$1, G__14448__$1, nav_el__$1, output_schema14443__$1, owner__$1, output_checker14446__$1, meta14455);
            };
          }(validate__7247__auto__, ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463);
        }
        return new dream.root.t14454(ufv___14459, G__14447, input_schema14444_14461, data, input_checker14445_14462, validate__7247__auto__, G__14448, nav_el, output_schema14443_14460, owner, output_checker14446_14463, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___14467 = output_checker14446_14463.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___14467)) {
        var error__7249__auto___14468 = temp__4092__auto___14467;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "nav-el", "nav-el", 1601818442, null), cljs.core.pr_str.call(null, error__7249__auto___14468)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___14468, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14443_14460, new cljs.core.Keyword(null, "value", "value", 
        1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___14459, output_schema14443_14460, input_schema14444_14461, input_checker14445_14462, output_checker14446_14463);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.root.nav_el), schema.core.make_fn_schema.call(null, output_schema14443_14460, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14444_14461], null)));
dream.root.__GT_nav_el = function() {
  var __GT_nav_el = null;
  var __GT_nav_el__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.root.nav_el, cursor__9015__auto__);
  };
  var __GT_nav_el__2 = function(cursor__9015__auto__, m14442) {
    return om.core.build.call(null, dream.root.nav_el, cursor__9015__auto__, m14442);
  };
  __GT_nav_el = function(cursor__9015__auto__, m14442) {
    switch(arguments.length) {
      case 1:
        return __GT_nav_el__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_nav_el__2.call(this, cursor__9015__auto__, m14442);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_nav_el.cljs$core$IFn$_invoke$arity$1 = __GT_nav_el__1;
  __GT_nav_el.cljs$core$IFn$_invoke$arity$2 = __GT_nav_el__2;
  return __GT_nav_el;
}();
var ufv___14495 = schema.utils.use_fn_validation;
var output_schema14471_14496 = schema.core.Any;
var input_schema14472_14497 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "arg0", "arg0", -1637529005, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null))], null);
var input_checker14473_14498 = schema.core.checker.call(null, input_schema14472_14497);
var output_checker14474_14499 = schema.core.checker.call(null, output_schema14471_14496);
dream.root.nav = function(ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499) {
  return function nav(G__14475, G__14476) {
    var validate__7247__auto__ = ufv___14495.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___14500 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14475, G__14476], null);
      var temp__4092__auto___14501 = input_checker14473_14498.call(null, args__7248__auto___14500);
      if (cljs.core.truth_(temp__4092__auto___14501)) {
        var error__7249__auto___14502 = temp__4092__auto___14501;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "nav", "nav", -1640422692, null), cljs.core.pr_str.call(null, error__7249__auto___14502)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___14502, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14472_14497, new cljs.core.Keyword(null, "value", "value", 1125876963), 
        args__7248__auto___14500], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var G__14487 = G__14475;
      var map__14488 = G__14487;
      var map__14488__$1 = cljs.core.seq_QMARK_.call(null, map__14488) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14488) : map__14488;
      var data = map__14488__$1;
      var route = cljs.core.get.call(null, map__14488__$1, new cljs.core.Keyword(null, "route", "route", 1122608571));
      var owner = G__14476;
      var G__14487__$1 = G__14487;
      var owner__$1 = owner;
      while (true) {
        var map__14489 = G__14487__$1;
        var map__14489__$1 = cljs.core.seq_QMARK_.call(null, map__14489) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14489) : map__14489;
        var data__$1 = map__14489__$1;
        var route__$1 = cljs.core.get.call(null, map__14489__$1, new cljs.core.Keyword(null, "route", "route", 1122608571));
        var owner__$2 = owner__$1;
        if (typeof dream.root.t14490 !== "undefined") {
        } else {
          dream.root.t14490 = function(map__14489, nav, route, map__14488, input_checker14473, ufv__, data, validate__7247__auto__, G__14487, output_checker14474, G__14476, G__14475, input_schema14472, owner, output_schema14471, meta14491) {
            this.map__14489 = map__14489;
            this.nav = nav;
            this.route = route;
            this.map__14488 = map__14488;
            this.input_checker14473 = input_checker14473;
            this.ufv__ = ufv__;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.G__14487 = G__14487;
            this.output_checker14474 = output_checker14474;
            this.G__14476 = G__14476;
            this.G__14475 = G__14475;
            this.input_schema14472 = input_schema14472;
            this.owner = owner;
            this.output_schema14471 = output_schema14471;
            this.meta14491 = meta14491;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.root.t14490.cljs$lang$type = true;
          dream.root.t14490.cljs$lang$ctorStr = "dream.root/t14490";
          dream.root.t14490.cljs$lang$ctorPrWriter = function(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.root/t14490");
            };
          }(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499);
          dream.root.t14490.prototype.om$core$IRenderState$ = true;
          dream.root.t14490.prototype.om$core$IRenderState$render_state$arity$2 = function(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499) {
            return function(_, p__14493) {
              var self__ = this;
              var map__14494 = p__14493;
              var map__14494__$1 = cljs.core.seq_QMARK_.call(null, map__14494) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14494) : map__14494;
              var view = cljs.core.get.call(null, map__14494__$1, new cljs.core.Keyword(null, "view", "view", 1017523735));
              var clicksort = cljs.core.get.call(null, map__14494__$1, new cljs.core.Keyword(null, "clicksort", "clicksort", 3344738968));
              var artidx = cljs.core.get.call(null, map__14494__$1, new cljs.core.Keyword(null, "artidx", "artidx", 3899773164));
              var artfn = cljs.core.get.call(null, map__14494__$1, new cljs.core.Keyword(null, "artfn", "artfn", 1106996701));
              var sortk = cljs.core.get.call(null, map__14494__$1, new cljs.core.Keyword(null, "sortk", "sortk", 1123529215));
              var ___$1 = this;
              var navc = om.core.get_shared.call(null, self__.owner, new cljs.core.Keyword(null, "nav-tokens", "nav-tokens", 1550793974));
              return cljs.core.apply.call(null, React.DOM.div, {"className":"column flex"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [om.core.build.call(null, dream.routes.clear_route, view, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "parent", "parent", 4313447452), function(navc, ___$1, map__14494, map__14494__$1, 
              view, clicksort, artidx, artfn, sortk, map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499) {
                return function(p1__14469_SHARP_) {
                  return cljs.core.apply.call(null, React.DOM.div, {"style":{"top":0, "position":"absolute"}}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__14469_SHARP_], null)));
                };
              }(navc, ___$1, map__14494, map__14494__$1, view, clicksort, artidx, artfn, sortk, map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499)], null)], null)), om.core.build_all.call(null, dream.root.nav_el, sortk, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "init-state", 
              "init-state", 4479067398), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "clicksort", "clicksort", 3344738968), clicksort], null), new cljs.core.Keyword(null, "state", "state", 1123661827), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selected", "selected", 2205476365), cljs.core.first.call(null, sortk)], null)], null)), cljs.core.apply.call(null, React.DOM.div, {"style":{"left":0, "bottom":0, "position":"absolute"}, "className":"column flex"}, 
              cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [React.DOM.a({"href":"https://twitter.com/opinionsonline", "className":"fa fa-twitter-square socials"}, ""), React.DOM.a({"href":"http://www.youtube.com/neurosisnow", "className":"fa fa-youtube-square socials"}, "")], null)))], null)));
            };
          }(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499);
          dream.root.t14490.prototype.om$core$IWillUpdate$ = true;
          dream.root.t14490.prototype.om$core$IWillUpdate$will_update$arity$3 = function(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499) {
            return function(_, ___$1, ___$2) {
              var self__ = this;
              var ___$3 = this;
              var sortk = om.core.get_state.call(null, self__.owner, new cljs.core.Keyword(null, "sortk", "sortk", 1123529215));
              var artfn = function(sortk, ___$3, map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499) {
                return function(int$) {
                  var sortk__$1 = cljs.core.map.call(null, cljs.core.name, cljs.core.keys.call(null, self__.data.call(null, new cljs.core.Keyword(null, "axis", "axis", 1016912659))));
                  var f_key = cljs.core.first.call(null, sortk__$1);
                  var lgth = cljs.core.count.call(null, self__.data.call(null, new cljs.core.Keyword(null, "axis", "axis", 1016912659)).call(null, f_key));
                  return cljs.core.mod.call(null, int$, lgth);
                };
              }(sortk, ___$3, map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499);
              var node = om.core.get_node.call(null, self__.owner);
              return om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "artfn", "artfn", 1106996701), artfn);
            };
          }(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499);
          dream.root.t14490.prototype.om$core$IInitState$ = true;
          dream.root.t14490.prototype.om$core$IInitState$init_state$arity$1 = function(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499) {
            return function(_) {
              var self__ = this;
              var ___$1 = this;
              return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "sortk", "sortk", 1123529215), cljs.core.map.call(null, cljs.core.name, cljs.core.keys.call(null, self__.data)), new cljs.core.Keyword(null, "artfn", "artfn", 1106996701), function(___$1, map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, 
              output_checker14474_14499) {
                return function(int$) {
                  var sortk = cljs.core.map.call(null, cljs.core.name, cljs.core.keys.call(null, self__.data.call(null, new cljs.core.Keyword(null, "axis", "axis", 1016912659))));
                  var f_key = cljs.core.first.call(null, sortk);
                  var lgth = cljs.core.count.call(null, self__.data.call(null, new cljs.core.Keyword(null, "axis", "axis", 1016912659)).call(null, f_key));
                  return cljs.core.mod.call(null, int$, lgth);
                };
              }(___$1, map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499), new cljs.core.Keyword(null, "artidx", "artidx", 3899773164), 0], null);
            };
          }(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499);
          dream.root.t14490.prototype.cljs$core$IMeta$_meta$arity$1 = function(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499) {
            return function(_14492) {
              var self__ = this;
              var _14492__$1 = this;
              return self__.meta14491;
            };
          }(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499);
          dream.root.t14490.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499) {
            return function(_14492, meta14491__$1) {
              var self__ = this;
              var _14492__$1 = this;
              return new dream.root.t14490(self__.map__14489, self__.nav, self__.route, self__.map__14488, self__.input_checker14473, self__.ufv__, self__.data, self__.validate__7247__auto__, self__.G__14487, self__.output_checker14474, self__.G__14476, self__.G__14475, self__.input_schema14472, self__.owner, self__.output_schema14471, meta14491__$1);
            };
          }(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499);
          dream.root.__GT_t14490 = function(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499) {
            return function __GT_t14490(map__14489__$2, nav__$1, route__$2, map__14488__$2, input_checker14473__$1, ufv____$1, data__$2, validate__7247__auto____$1, G__14487__$2, output_checker14474__$1, G__14476__$1, G__14475__$1, input_schema14472__$1, owner__$3, output_schema14471__$1, meta14491) {
              return new dream.root.t14490(map__14489__$2, nav__$1, route__$2, map__14488__$2, input_checker14473__$1, ufv____$1, data__$2, validate__7247__auto____$1, G__14487__$2, output_checker14474__$1, G__14476__$1, G__14475__$1, input_schema14472__$1, owner__$3, output_schema14471__$1, meta14491);
            };
          }(map__14489, map__14489__$1, data__$1, route__$1, owner__$2, G__14487, map__14488, map__14488__$1, data, route, owner, validate__7247__auto__, ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499);
        }
        return new dream.root.t14490(map__14489__$1, nav, route__$1, map__14488__$1, input_checker14473_14498, ufv___14495, data__$1, validate__7247__auto__, G__14487__$1, output_checker14474_14499, G__14476, G__14475, input_schema14472_14497, owner__$2, output_schema14471_14496, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___14503 = output_checker14474_14499.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___14503)) {
        var error__7249__auto___14504 = temp__4092__auto___14503;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "nav", "nav", -1640422692, null), cljs.core.pr_str.call(null, error__7249__auto___14504)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___14504, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14471_14496, new cljs.core.Keyword(null, "value", "value", 
        1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___14495, output_schema14471_14496, input_schema14472_14497, input_checker14473_14498, output_checker14474_14499);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.root.nav), schema.core.make_fn_schema.call(null, output_schema14471_14496, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14472_14497], null)));
dream.root.__GT_nav = function() {
  var __GT_nav = null;
  var __GT_nav__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.root.nav, cursor__9015__auto__);
  };
  var __GT_nav__2 = function(cursor__9015__auto__, m14470) {
    return om.core.build.call(null, dream.root.nav, cursor__9015__auto__, m14470);
  };
  __GT_nav = function(cursor__9015__auto__, m14470) {
    switch(arguments.length) {
      case 1:
        return __GT_nav__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_nav__2.call(this, cursor__9015__auto__, m14470);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_nav.cljs$core$IFn$_invoke$arity$1 = __GT_nav__1;
  __GT_nav.cljs$core$IFn$_invoke$arity$2 = __GT_nav__2;
  return __GT_nav;
}();
var ufv___14530 = schema.utils.use_fn_validation;
var output_schema14506_14531 = schema.core.Any;
var input_schema14507_14532 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "arg0", "arg0", -1637529005, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null))], null);
var input_checker14508_14533 = schema.core.checker.call(null, input_schema14507_14532);
var output_checker14509_14534 = schema.core.checker.call(null, output_schema14506_14531);
dream.root.app_view = function(ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534) {
  return function app_view(G__14510, G__14511) {
    var validate__7247__auto__ = ufv___14530.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___14535 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14510, G__14511], null);
      var temp__4092__auto___14536 = input_checker14508_14533.call(null, args__7248__auto___14535);
      if (cljs.core.truth_(temp__4092__auto___14536)) {
        var error__7249__auto___14537 = temp__4092__auto___14536;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "app-view", "app-view", -518813558, null), cljs.core.pr_str.call(null, error__7249__auto___14537)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___14537, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14507_14532, new cljs.core.Keyword(null, "value", "value", 
        1125876963), args__7248__auto___14535], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var G__14522 = G__14510;
      var map__14523 = G__14522;
      var map__14523__$1 = cljs.core.seq_QMARK_.call(null, map__14523) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14523) : map__14523;
      var data = map__14523__$1;
      var route = cljs.core.get.call(null, map__14523__$1, new cljs.core.Keyword(null, "route", "route", 1122608571));
      var owner = G__14511;
      var G__14522__$1 = G__14522;
      var owner__$1 = owner;
      while (true) {
        var map__14524 = G__14522__$1;
        var map__14524__$1 = cljs.core.seq_QMARK_.call(null, map__14524) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14524) : map__14524;
        var data__$1 = map__14524__$1;
        var route__$1 = cljs.core.get.call(null, map__14524__$1, new cljs.core.Keyword(null, "route", "route", 1122608571));
        var owner__$2 = owner__$1;
        if (typeof dream.root.t14525 !== "undefined") {
        } else {
          dream.root.t14525 = function(map__14523, route, input_schema14507, ufv__, output_schema14506, G__14522, data, validate__7247__auto__, map__14524, G__14511, G__14510, input_checker14508, owner, output_checker14509, app_view, meta14526) {
            this.map__14523 = map__14523;
            this.route = route;
            this.input_schema14507 = input_schema14507;
            this.ufv__ = ufv__;
            this.output_schema14506 = output_schema14506;
            this.G__14522 = G__14522;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.map__14524 = map__14524;
            this.G__14511 = G__14511;
            this.G__14510 = G__14510;
            this.input_checker14508 = input_checker14508;
            this.owner = owner;
            this.output_checker14509 = output_checker14509;
            this.app_view = app_view;
            this.meta14526 = meta14526;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.root.t14525.cljs$lang$type = true;
          dream.root.t14525.cljs$lang$ctorStr = "dream.root/t14525";
          dream.root.t14525.cljs$lang$ctorPrWriter = function(map__14524, map__14524__$1, data__$1, route__$1, owner__$2, G__14522, map__14523, map__14523__$1, data, route, owner, validate__7247__auto__, ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.root/t14525");
            };
          }(map__14524, map__14524__$1, data__$1, route__$1, owner__$2, G__14522, map__14523, map__14523__$1, data, route, owner, validate__7247__auto__, ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534);
          dream.root.t14525.prototype.om$core$IRenderState$ = true;
          dream.root.t14525.prototype.om$core$IRenderState$render_state$arity$2 = function(map__14524, map__14524__$1, data__$1, route__$1, owner__$2, G__14522, map__14523, map__14523__$1, data, route, owner, validate__7247__auto__, ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534) {
            return function(_, p__14528) {
              var self__ = this;
              var map__14529 = p__14528;
              var map__14529__$1 = cljs.core.seq_QMARK_.call(null, map__14529) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14529) : map__14529;
              var trans = cljs.core.get.call(null, map__14529__$1, new cljs.core.Keyword(null, "trans", "trans", 1124525594));
              var ___$1 = this;
              return cljs.core.apply.call(null, React.DOM.div, {"tabIndex":"1", "style":{"outline":"none"}, "className":"flex-start full perspect"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, React.DOM.div, {"ref":"nav", "style":{"zIndex":"9", "height":"100%"}, "className":"flex"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [om.core.build.call(null, 
              dream.root.nav, self__.data.call(null, new cljs.core.Keyword(null, "routes", "routes", 4383738556)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "state", "state", 1123661827), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "view", "view", 1017523735), self__.route.call(null, new cljs.core.Keyword(null, "view", "view", 1017523735))], null)], null))], null))), om.core.build.call(null, dream.routes.router, self__.data, new cljs.core.PersistentArrayMap(null, 
              1, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "page-views", "page-views", 1214717218), new cljs.core.PersistentArrayMap(null, 1, ["blog", dream.blog.blog], null)], null)], null))], null)));
            };
          }(map__14524, map__14524__$1, data__$1, route__$1, owner__$2, G__14522, map__14523, map__14523__$1, data, route, owner, validate__7247__auto__, ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534);
          dream.root.t14525.prototype.cljs$core$IMeta$_meta$arity$1 = function(map__14524, map__14524__$1, data__$1, route__$1, owner__$2, G__14522, map__14523, map__14523__$1, data, route, owner, validate__7247__auto__, ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534) {
            return function(_14527) {
              var self__ = this;
              var _14527__$1 = this;
              return self__.meta14526;
            };
          }(map__14524, map__14524__$1, data__$1, route__$1, owner__$2, G__14522, map__14523, map__14523__$1, data, route, owner, validate__7247__auto__, ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534);
          dream.root.t14525.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(map__14524, map__14524__$1, data__$1, route__$1, owner__$2, G__14522, map__14523, map__14523__$1, data, route, owner, validate__7247__auto__, ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534) {
            return function(_14527, meta14526__$1) {
              var self__ = this;
              var _14527__$1 = this;
              return new dream.root.t14525(self__.map__14523, self__.route, self__.input_schema14507, self__.ufv__, self__.output_schema14506, self__.G__14522, self__.data, self__.validate__7247__auto__, self__.map__14524, self__.G__14511, self__.G__14510, self__.input_checker14508, self__.owner, self__.output_checker14509, self__.app_view, meta14526__$1);
            };
          }(map__14524, map__14524__$1, data__$1, route__$1, owner__$2, G__14522, map__14523, map__14523__$1, data, route, owner, validate__7247__auto__, ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534);
          dream.root.__GT_t14525 = function(map__14524, map__14524__$1, data__$1, route__$1, owner__$2, G__14522, map__14523, map__14523__$1, data, route, owner, validate__7247__auto__, ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534) {
            return function __GT_t14525(map__14523__$2, route__$2, input_schema14507__$1, ufv____$1, output_schema14506__$1, G__14522__$2, data__$2, validate__7247__auto____$1, map__14524__$2, G__14511__$1, G__14510__$1, input_checker14508__$1, owner__$3, output_checker14509__$1, app_view__$1, meta14526) {
              return new dream.root.t14525(map__14523__$2, route__$2, input_schema14507__$1, ufv____$1, output_schema14506__$1, G__14522__$2, data__$2, validate__7247__auto____$1, map__14524__$2, G__14511__$1, G__14510__$1, input_checker14508__$1, owner__$3, output_checker14509__$1, app_view__$1, meta14526);
            };
          }(map__14524, map__14524__$1, data__$1, route__$1, owner__$2, G__14522, map__14523, map__14523__$1, data, route, owner, validate__7247__auto__, ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534);
        }
        return new dream.root.t14525(map__14523__$1, route__$1, input_schema14507_14532, ufv___14530, output_schema14506_14531, G__14522__$1, data__$1, validate__7247__auto__, map__14524__$1, G__14511, G__14510, input_checker14508_14533, owner__$2, output_checker14509_14534, app_view, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___14538 = output_checker14509_14534.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___14538)) {
        var error__7249__auto___14539 = temp__4092__auto___14538;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "app-view", "app-view", -518813558, null), cljs.core.pr_str.call(null, error__7249__auto___14539)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___14539, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14506_14531, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___14530, output_schema14506_14531, input_schema14507_14532, input_checker14508_14533, output_checker14509_14534);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.root.app_view), schema.core.make_fn_schema.call(null, output_schema14506_14531, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14507_14532], null)));
dream.root.__GT_app_view = function() {
  var __GT_app_view = null;
  var __GT_app_view__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.root.app_view, cursor__9015__auto__);
  };
  var __GT_app_view__2 = function(cursor__9015__auto__, m14505) {
    return om.core.build.call(null, dream.root.app_view, cursor__9015__auto__, m14505);
  };
  __GT_app_view = function(cursor__9015__auto__, m14505) {
    switch(arguments.length) {
      case 1:
        return __GT_app_view__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_app_view__2.call(this, cursor__9015__auto__, m14505);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_app_view.cljs$core$IFn$_invoke$arity$1 = __GT_app_view__1;
  __GT_app_view.cljs$core$IFn$_invoke$arity$2 = __GT_app_view__2;
  return __GT_app_view;
}();
dream.root.out_coord = function out_coord(chan, data, owner, websock) {
  var sockout = function(p1__14540_SHARP_, p2__14541_SHARP_) {
    return websock.send(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__14540_SHARP_, p2__14541_SHARP_], null));
  };
  var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__, sockout) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto__, sockout) {
          return function(state_14604) {
            var state_val_14605 = state_14604[1];
            if (state_val_14605 === 7) {
              var inst_14599 = state_14604[2];
              var inst_14589 = inst_14599;
              var state_14604__$1 = function() {
                var statearr_14606 = state_14604;
                statearr_14606[7] = inst_14589;
                return statearr_14606;
              }();
              var statearr_14607_14622 = state_14604__$1;
              statearr_14607_14622[2] = null;
              statearr_14607_14622[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_14605 === 6) {
                var inst_14592 = state_14604[8];
                var inst_14594 = sockout.call(null, inst_14592, "");
                var state_14604__$1 = state_14604;
                var statearr_14608_14623 = state_14604__$1;
                statearr_14608_14623[2] = inst_14594;
                statearr_14608_14623[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_14605 === 5) {
                  var inst_14597 = state_14604[2];
                  var state_14604__$1 = function() {
                    var statearr_14609 = state_14604;
                    statearr_14609[9] = inst_14597;
                    return statearr_14609;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14604__$1, 7, chan);
                } else {
                  if (state_val_14605 === 4) {
                    var inst_14602 = state_14604[2];
                    var state_14604__$1 = state_14604;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14604__$1, inst_14602);
                  } else {
                    if (state_val_14605 === 3) {
                      var inst_14589 = state_14604[7];
                      var inst_14592 = state_14604[8];
                      var inst_14592__$1 = cljs.core.nth.call(null, inst_14589, 0, null);
                      var inst_14593 = cljs.core.nth.call(null, inst_14589, 1, null);
                      var state_14604__$1 = function() {
                        var statearr_14610 = state_14604;
                        statearr_14610[10] = inst_14593;
                        statearr_14610[8] = inst_14592__$1;
                        return statearr_14610;
                      }();
                      var G__14611_14624 = inst_14592__$1 instanceof cljs.core.Keyword ? inst_14592__$1.fqn : null;
                      var caseval__14625;
                      switch(G__14611_14624) {
                        case "sig":
                          (function() {
                            var statearr_14612 = state_14604__$1;
                            statearr_14612[1] = 6;
                            return statearr_14612;
                          })();
                          break;
                        default:
                          (function() {
                            throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_14592__$1));
                          })();
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_14605 === 2) {
                        var inst_14586 = state_14604[2];
                        var inst_14587 = cljs.core.nth.call(null, inst_14586, 0, null);
                        var inst_14588 = cljs.core.nth.call(null, inst_14586, 1, null);
                        var inst_14589 = inst_14586;
                        var state_14604__$1 = function() {
                          var statearr_14613 = state_14604;
                          statearr_14613[7] = inst_14589;
                          statearr_14613[11] = inst_14588;
                          statearr_14613[12] = inst_14587;
                          return statearr_14613;
                        }();
                        var statearr_14614_14626 = state_14604__$1;
                        statearr_14614_14626[2] = null;
                        statearr_14614_14626[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_14605 === 1) {
                          var state_14604__$1 = state_14604;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14604__$1, 2, chan);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10470__auto__, sockout);
        return function(switch__10455__auto__, c__10470__auto__, sockout) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_14618 = [null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14618[0] = state_machine__10456__auto__;
              statearr_14618[1] = 1;
              return statearr_14618;
            };
            var state_machine__10456__auto____1 = function(state_14604) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_14604);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e14619) {
                    if (e14619 instanceof Object) {
                      var ex__10459__auto__ = e14619;
                      var statearr_14620_14627 = state_14604;
                      statearr_14620_14627[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14604);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e14619;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__14628 = state_14604;
                  state_14604 = G__14628;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_14604) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_14604);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto__, sockout);
      }();
      var state__10472__auto__ = function() {
        var statearr_14621 = f__10471__auto__.call(null);
        statearr_14621[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
        return statearr_14621;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto__, sockout));
  return c__10470__auto__;
};
dream.root.in_coord = function in_coord(chan, data, owner) {
  var c__10470__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10470__auto__) {
    return function() {
      var f__10471__auto__ = function() {
        var switch__10455__auto__ = function(c__10470__auto__) {
          return function(state_14657) {
            var state_val_14658 = state_14657[1];
            if (state_val_14658 === 4) {
              var inst_14655 = state_14657[2];
              var state_14657__$1 = state_14657;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14657__$1, inst_14655);
            } else {
              if (state_val_14658 === 3) {
                var inst_14651 = state_14657[7];
                var inst_14653 = cljs.core.print.call(null, inst_14651);
                var state_14657__$1 = state_14657;
                var statearr_14659_14669 = state_14657__$1;
                statearr_14659_14669[2] = inst_14653;
                statearr_14659_14669[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_14658 === 2) {
                  var inst_14650 = state_14657[2];
                  var inst_14651 = inst_14650;
                  var state_14657__$1 = function() {
                    var statearr_14660 = state_14657;
                    statearr_14660[7] = inst_14651;
                    return statearr_14660;
                  }();
                  var statearr_14661_14670 = state_14657__$1;
                  statearr_14661_14670[2] = null;
                  statearr_14661_14670[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_14658 === 1) {
                    var state_14657__$1 = state_14657;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14657__$1, 2, chan);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__10470__auto__);
        return function(switch__10455__auto__, c__10470__auto__) {
          return function() {
            var state_machine__10456__auto__ = null;
            var state_machine__10456__auto____0 = function() {
              var statearr_14665 = [null, null, null, null, null, null, null, null];
              statearr_14665[0] = state_machine__10456__auto__;
              statearr_14665[1] = 1;
              return statearr_14665;
            };
            var state_machine__10456__auto____1 = function(state_14657) {
              while (true) {
                var ret_value__10457__auto__ = function() {
                  try {
                    while (true) {
                      var result__10458__auto__ = switch__10455__auto__.call(null, state_14657);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10458__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10458__auto__;
                      }
                      break;
                    }
                  } catch (e14666) {
                    if (e14666 instanceof Object) {
                      var ex__10459__auto__ = e14666;
                      var statearr_14667_14671 = state_14657;
                      statearr_14667_14671[5] = ex__10459__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14657);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e14666;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10457__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__14672 = state_14657;
                  state_14657 = G__14672;
                  continue;
                } else {
                  return ret_value__10457__auto__;
                }
                break;
              }
            };
            state_machine__10456__auto__ = function(state_14657) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10456__auto____0.call(this);
                case 1:
                  return state_machine__10456__auto____1.call(this, state_14657);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10456__auto____0;
            state_machine__10456__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10456__auto____1;
            return state_machine__10456__auto__;
          }();
        }(switch__10455__auto__, c__10470__auto__);
      }();
      var state__10472__auto__ = function() {
        var statearr_14668 = f__10471__auto__.call(null);
        statearr_14668[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10470__auto__;
        return statearr_14668;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10472__auto__);
    };
  }(c__10470__auto__));
  return c__10470__auto__;
};
var ufv___14686 = schema.utils.use_fn_validation;
var output_schema14674_14687 = schema.core.Any;
var input_schema14675_14688 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "data", "data", -1637455517, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null))], null);
var input_checker14676_14689 = schema.core.checker.call(null, input_schema14675_14688);
var output_checker14677_14690 = schema.core.checker.call(null, output_schema14674_14687);
dream.root.world = function(ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690) {
  return function world(G__14678, G__14679) {
    var validate__7247__auto__ = ufv___14686.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___14691 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14678, G__14679], null);
      var temp__4092__auto___14692 = input_checker14676_14689.call(null, args__7248__auto___14691);
      if (cljs.core.truth_(temp__4092__auto___14692)) {
        var error__7249__auto___14693 = temp__4092__auto___14692;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "world", "world", -1527212725, null), cljs.core.pr_str.call(null, error__7249__auto___14693)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___14693, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14675_14688, new cljs.core.Keyword(null, "value", "value", 
        1125876963), args__7248__auto___14691], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var data = G__14678;
      var owner = G__14679;
      while (true) {
        if (typeof dream.root.t14683 !== "undefined") {
        } else {
          dream.root.t14683 = function(input_checker14676, output_checker14677, ufv__, data, validate__7247__auto__, output_schema14674, world, G__14678, input_schema14675, G__14679, owner, meta14684) {
            this.input_checker14676 = input_checker14676;
            this.output_checker14677 = output_checker14677;
            this.ufv__ = ufv__;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.output_schema14674 = output_schema14674;
            this.world = world;
            this.G__14678 = G__14678;
            this.input_schema14675 = input_schema14675;
            this.G__14679 = G__14679;
            this.owner = owner;
            this.meta14684 = meta14684;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.root.t14683.cljs$lang$type = true;
          dream.root.t14683.cljs$lang$ctorStr = "dream.root/t14683";
          dream.root.t14683.cljs$lang$ctorPrWriter = function(validate__7247__auto__, ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.root/t14683");
            };
          }(validate__7247__auto__, ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690);
          dream.root.t14683.prototype.om$core$IRenderState$ = true;
          dream.root.t14683.prototype.om$core$IRenderState$render_state$arity$2 = function(validate__7247__auto__, ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690) {
            return function(_, ___$1) {
              var self__ = this;
              var ___$2 = this;
              return om.core.build.call(null, om_websocket.core.om_websocket, self__.data, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "connection-str", "connection-str", 2282948148), "ws://" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(location.host) + "/ws", new cljs.core.Keyword(null, "in-coord", "in-coord", 3844677567), dream.root.in_coord, new cljs.core.Keyword(null, 
              "out-coord", "out-coord", 1254670120), dream.root.out_coord, new cljs.core.Keyword(null, "child", "child", 1108535438), dream.root.app_view], null)], null));
            };
          }(validate__7247__auto__, ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690);
          dream.root.t14683.prototype.cljs$core$IMeta$_meta$arity$1 = function(validate__7247__auto__, ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690) {
            return function(_14685) {
              var self__ = this;
              var _14685__$1 = this;
              return self__.meta14684;
            };
          }(validate__7247__auto__, ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690);
          dream.root.t14683.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(validate__7247__auto__, ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690) {
            return function(_14685, meta14684__$1) {
              var self__ = this;
              var _14685__$1 = this;
              return new dream.root.t14683(self__.input_checker14676, self__.output_checker14677, self__.ufv__, self__.data, self__.validate__7247__auto__, self__.output_schema14674, self__.world, self__.G__14678, self__.input_schema14675, self__.G__14679, self__.owner, meta14684__$1);
            };
          }(validate__7247__auto__, ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690);
          dream.root.__GT_t14683 = function(validate__7247__auto__, ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690) {
            return function __GT_t14683(input_checker14676__$1, output_checker14677__$1, ufv____$1, data__$1, validate__7247__auto____$1, output_schema14674__$1, world__$1, G__14678__$1, input_schema14675__$1, G__14679__$1, owner__$1, meta14684) {
              return new dream.root.t14683(input_checker14676__$1, output_checker14677__$1, ufv____$1, data__$1, validate__7247__auto____$1, output_schema14674__$1, world__$1, G__14678__$1, input_schema14675__$1, G__14679__$1, owner__$1, meta14684);
            };
          }(validate__7247__auto__, ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690);
        }
        return new dream.root.t14683(input_checker14676_14689, output_checker14677_14690, ufv___14686, data, validate__7247__auto__, output_schema14674_14687, world, G__14678, input_schema14675_14688, G__14679, owner, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___14694 = output_checker14677_14690.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___14694)) {
        var error__7249__auto___14695 = temp__4092__auto___14694;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "world", "world", -1527212725, null), cljs.core.pr_str.call(null, error__7249__auto___14695)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___14695, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14674_14687, new cljs.core.Keyword(null, "value", "value", 
        1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___14686, output_schema14674_14687, input_schema14675_14688, input_checker14676_14689, output_checker14677_14690);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.root.world), schema.core.make_fn_schema.call(null, output_schema14674_14687, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14675_14688], null)));
dream.root.__GT_world = function() {
  var __GT_world = null;
  var __GT_world__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.root.world, cursor__9015__auto__);
  };
  var __GT_world__2 = function(cursor__9015__auto__, m14673) {
    return om.core.build.call(null, dream.root.world, cursor__9015__auto__, m14673);
  };
  __GT_world = function(cursor__9015__auto__, m14673) {
    switch(arguments.length) {
      case 1:
        return __GT_world__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_world__2.call(this, cursor__9015__auto__, m14673);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_world.cljs$core$IFn$_invoke$arity$1 = __GT_world__1;
  __GT_world.cljs$core$IFn$_invoke$arity$2 = __GT_world__2;
  return __GT_world;
}();
dream.root.render = function render(app_container) {
  var transactions = cljs.core.async.chan.call(null);
  var transactions_pub = cljs.core.async.pub.call(null, transactions, new cljs.core.Keyword(null, "tag", "tag", 1014018828));
  return om.core.root.call(null, dream.root.world, dream.root.app_state, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "target", "target", 4427965699), app_container, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 666878114), function(transactions, transactions_pub) {
    return function(p1__14696_SHARP_) {
      return cljs.core.async.put_BANG_.call(null, transactions, p1__14696_SHARP_);
    };
  }(transactions, transactions_pub), new cljs.core.Keyword(null, "shared", "shared", 4405305303), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "nav-tokens", "nav-tokens", 1550793974), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "transactions", "transactions", 2968026311), transactions, new cljs.core.Keyword(null, "websocket-\x3e", "websocket-\x3e", 3739762474), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "transroute", "transroute", 3592887315), 
  cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "transactions-pub", "transactions-pub", 1539305975), transactions_pub], null)], null));
};
var ufv___14710 = schema.utils.use_fn_validation;
var output_schema14698_14711 = schema.core.Any;
var input_schema14699_14712 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "data", "data", -1637455517, null)), schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "owner", "owner", -1534366612, null))], null);
var input_checker14700_14713 = schema.core.checker.call(null, input_schema14699_14712);
var output_checker14701_14714 = schema.core.checker.call(null, output_schema14698_14711);
dream.root.fuck = function(ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714) {
  return function fuck(G__14702, G__14703) {
    var validate__7247__auto__ = ufv___14710.get_cell();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var args__7248__auto___14715 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14702, G__14703], null);
      var temp__4092__auto___14716 = input_checker14700_14713.call(null, args__7248__auto___14715);
      if (cljs.core.truth_(temp__4092__auto___14716)) {
        var error__7249__auto___14717 = temp__4092__auto___14716;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "fuck", "fuck", -1637377232, null), cljs.core.pr_str.call(null, error__7249__auto___14717)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___14717, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14699_14712, new cljs.core.Keyword(null, "value", "value", 
        1125876963), args__7248__auto___14715], null));
      } else {
      }
    } else {
    }
    var o__7250__auto__ = function() {
      var data = G__14702;
      var owner = G__14703;
      while (true) {
        if (typeof dream.root.t14707 !== "undefined") {
        } else {
          dream.root.t14707 = function(fuck, input_schema14699, G__14703, ufv__, output_checker14701, data, validate__7247__auto__, owner, input_checker14700, G__14702, output_schema14698, meta14708) {
            this.fuck = fuck;
            this.input_schema14699 = input_schema14699;
            this.G__14703 = G__14703;
            this.ufv__ = ufv__;
            this.output_checker14701 = output_checker14701;
            this.data = data;
            this.validate__7247__auto__ = validate__7247__auto__;
            this.owner = owner;
            this.input_checker14700 = input_checker14700;
            this.G__14702 = G__14702;
            this.output_schema14698 = output_schema14698;
            this.meta14708 = meta14708;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          dream.root.t14707.cljs$lang$type = true;
          dream.root.t14707.cljs$lang$ctorStr = "dream.root/t14707";
          dream.root.t14707.cljs$lang$ctorPrWriter = function(validate__7247__auto__, ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714) {
            return function(this__4108__auto__, writer__4109__auto__, opt__4110__auto__) {
              return cljs.core._write.call(null, writer__4109__auto__, "dream.root/t14707");
            };
          }(validate__7247__auto__, ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714);
          dream.root.t14707.prototype.om$core$IRenderState$ = true;
          dream.root.t14707.prototype.om$core$IRenderState$render_state$arity$2 = function(validate__7247__auto__, ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714) {
            return function(_, ___$1) {
              var self__ = this;
              var ___$2 = this;
              return React.DOM.h1(null, "fuck");
            };
          }(validate__7247__auto__, ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714);
          dream.root.t14707.prototype.cljs$core$IMeta$_meta$arity$1 = function(validate__7247__auto__, ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714) {
            return function(_14709) {
              var self__ = this;
              var _14709__$1 = this;
              return self__.meta14708;
            };
          }(validate__7247__auto__, ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714);
          dream.root.t14707.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(validate__7247__auto__, ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714) {
            return function(_14709, meta14708__$1) {
              var self__ = this;
              var _14709__$1 = this;
              return new dream.root.t14707(self__.fuck, self__.input_schema14699, self__.G__14703, self__.ufv__, self__.output_checker14701, self__.data, self__.validate__7247__auto__, self__.owner, self__.input_checker14700, self__.G__14702, self__.output_schema14698, meta14708__$1);
            };
          }(validate__7247__auto__, ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714);
          dream.root.__GT_t14707 = function(validate__7247__auto__, ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714) {
            return function __GT_t14707(fuck__$1, input_schema14699__$1, G__14703__$1, ufv____$1, output_checker14701__$1, data__$1, validate__7247__auto____$1, owner__$1, input_checker14700__$1, G__14702__$1, output_schema14698__$1, meta14708) {
              return new dream.root.t14707(fuck__$1, input_schema14699__$1, G__14703__$1, ufv____$1, output_checker14701__$1, data__$1, validate__7247__auto____$1, owner__$1, input_checker14700__$1, G__14702__$1, output_schema14698__$1, meta14708);
            };
          }(validate__7247__auto__, ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714);
        }
        return new dream.root.t14707(fuck, input_schema14699_14712, G__14703, ufv___14710, output_checker14701_14714, data, validate__7247__auto__, owner, input_checker14700_14713, G__14702, output_schema14698_14711, null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7247__auto__)) {
      var temp__4092__auto___14718 = output_checker14701_14714.call(null, o__7250__auto__);
      if (cljs.core.truth_(temp__4092__auto___14718)) {
        var error__7249__auto___14719 = temp__4092__auto___14718;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "fuck", "fuck", -1637377232, null), cljs.core.pr_str.call(null, error__7249__auto___14719)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__7249__auto___14719, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14698_14711, new cljs.core.Keyword(null, "value", "value", 
        1125876963), o__7250__auto__], null));
      } else {
      }
    } else {
    }
    return o__7250__auto__;
  };
}(ufv___14710, output_schema14698_14711, input_schema14699_14712, input_checker14700_14713, output_checker14701_14714);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, dream.root.fuck), schema.core.make_fn_schema.call(null, output_schema14698_14711, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14699_14712], null)));
dream.root.__GT_fuck = function() {
  var __GT_fuck = null;
  var __GT_fuck__1 = function(cursor__9015__auto__) {
    return om.core.build.call(null, dream.root.fuck, cursor__9015__auto__);
  };
  var __GT_fuck__2 = function(cursor__9015__auto__, m14697) {
    return om.core.build.call(null, dream.root.fuck, cursor__9015__auto__, m14697);
  };
  __GT_fuck = function(cursor__9015__auto__, m14697) {
    switch(arguments.length) {
      case 1:
        return __GT_fuck__1.call(this, cursor__9015__auto__);
      case 2:
        return __GT_fuck__2.call(this, cursor__9015__auto__, m14697);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_fuck.cljs$core$IFn$_invoke$arity$1 = __GT_fuck__1;
  __GT_fuck.cljs$core$IFn$_invoke$arity$2 = __GT_fuck__2;
  return __GT_fuck;
}();
dream.root.render_to_string = function render_to_string(state_edn) {
  return om.dom.render_to_str.call(null, om.core.build.call(null, dream.root.app_view, cljs.reader.read_string.call(null, state_edn)));
};
goog.exportSymbol("dream.root.render_to_string", dream.root.render_to_string);
dream.root.init = function init(app, state) {
  var edn_node = goog.dom.getElement(state);
  var edn_text = edn_node.textContent;
  var edn = cljs.reader.read_string.call(null, edn_text);
  var target_node = goog.dom.getElement(app);
  dream.root.app_state = cljs.core.atom.call(null, edn);
  return dream.root.render.call(null, target_node);
};
goog.exportSymbol("dream.root.init", dream.root.init);

//# sourceMappingURL=dream.js.map